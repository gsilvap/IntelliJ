<templateSet group="Matt Raible's Shortcuts">
  <template name="search-form" value="&lt;form ng-submit=&quot;search()&quot;&gt;&#10;    &lt;input type=&quot;search&quot; name=&quot;search&quot; ng-model=&quot;term&quot;&gt;&#10;    &lt;button&gt;Search&lt;/button&gt;&#10;&lt;/form&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="search.js" value="angular.module('myApp.search', ['ngRoute'])&#10;&#10;    .config(['$routeProvider', function ($routeProvider) {&#10;        $routeProvider&#10;            .when('/search', {&#10;                templateUrl: 'search/index.html',&#10;                controller: 'SearchController'&#10;            })&#10;    }])&#10;&#10;    .controller('SearchController', function () {&#10;        console.log(&quot;In Search Controller...&quot;);&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-service" value=".factory('SearchService', function ($http) {&#10;        var service = {&#10;            query: function (term) {&#10;                return $http.get('/search/' + term);&#10;            }&#10;        };&#10;        return service;&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-controller" value=".controller('SearchController', function ($scope, SearchService) {&#10;        $scope.search = function () {&#10;            console.log(&quot;Search term is: &quot; + $scope.term);&#10;            SearchService.query($scope.term).then(function (response) {&#10;                $scope.searchResults = response.data;&#10;            });&#10;        };&#10;    })" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="mock-api.js" value="angular.module('myApp')&#10;    .service('ServerDataModel', function ServerDataModel() {&#10;        this.data = [&#10;            {&#10;                id: 1,&#10;                name: &quot;Peyton Manning&quot;,&#10;                phone: &quot;(303) 567-8910&quot;,&#10;                address: {&#10;                    street: &quot;1234 Main Street&quot;,&#10;                    city: &quot;Greenwood Village&quot;,&#10;                    state: &quot;CO&quot;,&#10;                    zip: &quot;80111&quot;&#10;                }&#10;            },&#10;            {&#10;                id: 2,&#10;                name: &quot;Demaryius Thomas&quot;,&#10;                phone: &quot;(720) 213-9876&quot;,&#10;                address: {&#10;                    street: &quot;5555 Marion Street&quot;,&#10;                    city: &quot;Denver&quot;,&#10;                    state: &quot;CO&quot;,&#10;                    zip: &quot;80202&quot;&#10;                }&#10;            },&#10;            {&#10;                id: 3,&#10;                name: &quot;Von Miller&quot;,&#10;                phone: &quot;(917) 323-2333&quot;,&#10;                address: {&#10;                    street: &quot;14 Mountain Way&quot;,&#10;                    city: &quot;Vail&quot;,&#10;                    state: &quot;CO&quot;,&#10;                    zip: &quot;81657&quot;&#10;                }&#10;            }&#10;        ];&#10;&#10;        this.getData = function () {&#10;            return this.data;&#10;        };&#10;&#10;        this.search = function (term) {&#10;            if (term == &quot;&quot; || term == &quot;*&quot;) {&#10;                return this.getData();&#10;            }&#10;            // find the name that matches the term&#10;            var list = $.grep(this.getData(), function (element, index) {&#10;                term = term.toLowerCase();&#10;                return (element.name.toLowerCase().match(term));&#10;            });&#10;&#10;            if (list.length === 0) {&#10;                return [];&#10;            } else {&#10;                return list;&#10;            }&#10;        };&#10;    })&#10;    .run(function ($httpBackend, ServerDataModel) {&#10;&#10;        $httpBackend.whenGET(/\/search\/\w+/).respond(function (method, url, data) {&#10;            // parse the matching URL to pull out the term (/search/:term)&#10;            var term = url.split('/')[2];&#10;&#10;            var results = ServerDataModel.search(term);&#10;&#10;            return [200, results, {Location: '/search/' + term}];&#10;        });&#10;&#10;        $httpBackend.whenGET(/search\/index.html/).passThrough();&#10;        $httpBackend.whenGET(/view/).passThrough();&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="jquery" value="&quot;jquery&quot;: &quot;~1.10.x&quot;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="angular-mocks" value="&lt;script src=&quot;bower_components/angular-mocks/angular-mocks.js&quot;&gt;&lt;/script&gt;&#10;  &lt;script src=&quot;bower_components/jquery/dist/jquery.js&quot;&gt;&lt;/script&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="search-table" value="&lt;table ng-show=&quot;searchResults.length&quot; style=&quot;width: 100%&quot;&gt;&#10;    &lt;thead&gt;&#10;    &lt;tr&gt;&#10;        &lt;th&gt;Name&lt;/th&gt;&#10;        &lt;th&gt;Phone&lt;/th&gt;&#10;        &lt;th&gt;Address&lt;/th&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/thead&gt;&#10;    &lt;tbody&gt;&#10;    &lt;tr ng-repeat=&quot;person in searchResults&quot;&gt;&#10;        &lt;td&gt;{{person.name}}&lt;/td&gt;&#10;        &lt;td&gt;{{person.phone}}&lt;/td&gt;&#10;        &lt;td&gt;{{person.address.street}}&lt;br/&gt;&#10;            {{person.address.city}}, {{person.address.state}} {{person.address.zip}}&#10;        &lt;/td&gt;&#10;    &lt;/tr&gt;&#10;    &lt;/tbody&gt;&#10;&lt;/table&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="search-div" value="&lt;div&gt;&#10;    &lt;pre&gt;{{ searchResults | json}}&lt;/pre&gt;&#10;&lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="search-edit" value="$scope.edit = function (person) {&#10;            $location.path(&quot;/edit/&quot; + person.id);&#10;        }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-fetch" value="fetch: function (id) {&#10;                return $http.get('/edit/' + id);&#10;            },&#10;            save: function(data) {&#10;                return $http.post('/edit/' + data.id, data);&#10;            }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="mock-edit" value="$httpBackend.whenGET(/\/search/).respond(function (method, url, data) {&#10;            var results = ServerDataModel.search(&quot;&quot;);&#10;&#10;            return [200, results];&#10;        });&#10;&#10;        $httpBackend.whenGET(/\/edit\/\d+/).respond(function (method, url, data) {&#10;            // parse the matching URL to pull out the id (/edit/:id)&#10;            var id = url.split('/')[2];&#10;&#10;            var results = ServerDataModel.find(id);&#10;&#10;            return [200, results, {Location: '/edit/' + id}];&#10;        });&#10;&#10;        $httpBackend.whenPOST(/\/edit\/\d+/).respond(function(method, url, data) {&#10;            var params = angular.fromJson(data);&#10;&#10;            // parse the matching URL to pull out the id (/edit/:id)&#10;            var id = url.split('/')[2];&#10;&#10;            var person = ServerDataModel.update(id, params);&#10;&#10;            return [201, person, { Location: '/edit/' + id }];&#10;        });&#10;&#10;        $httpBackend.whenGET(/search\/edit.html/).passThrough();" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="mock-find" value="this.find = function (id) {&#10;            // find the game that matches that id&#10;            var list = $.grep(this.getData(), function (element, index) {&#10;                return (element.id == id);&#10;            });&#10;            if (list.length === 0) {&#10;                return {};&#10;            }&#10;            // even if list contains multiple items, just return first one&#10;            return list[0];&#10;        };&#10;&#10;        this.update = function (id, dataItem) {&#10;            // find the game that matches that id&#10;            var people = this.getData();&#10;            var match = null;&#10;            for (var i = 0; i &lt; people.length; i++) {&#10;                if (people[i].id == id) {&#10;                    match = people[i];&#10;                    break;&#10;                }&#10;            }&#10;            if (!angular.isObject(match)) {&#10;                return {};&#10;            }&#10;            angular.extend(match, dataItem);&#10;            return match;&#10;        };" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-auto" value="if ($routeParams.term) {&#10;            SearchService.query($routeParams.term).then(function (response) {&#10;                $scope.term = $routeParams.term;&#10;                $scope.searchResults = response.data;&#10;            });&#10;        }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-route" value=".when('/search/:term', {&#10;                templateUrl: 'search/index.html',&#10;                controller: 'SearchController'&#10;            })" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="save-e2e" value="describe('save person', function() {&#10;        var name = element(by.model('person.name'));&#10;        var save = element(by.id('save'));&#10;&#10;        beforeEach(function() {&#10;            browser.get('index.html#/edit/1');&#10;        });&#10;&#10;        it('should allow updating a name', function() {&#10;            name.sendKeys(&quot; Updated&quot;);&#10;            save.click().then(function() {&#10;                // verify url set back to search results&#10;                browser.driver.wait(function() {&#10;                    return browser.driver.getCurrentUrl().then(function(url) {&#10;                        expect(url).toContain('/search/Peyton%20Manning%20Updated');&#10;                        return url;&#10;                    });&#10;                });&#10;                // verify one element matched this change&#10;                expect(element.all(by.repeater('person in searchResults')).count()).toEqual(1);&#10;            });&#10;        });&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-e2e" value="describe('search', function() {&#10;        var searchTerm = element(by.model('term'));&#10;        var searchButton = element(by.id('search'));&#10;&#10;        beforeEach(function() {&#10;            browser.get('index.html#/search');&#10;        });&#10;&#10;        it('should allow searching at /search', function() {&#10;            searchTerm.sendKeys(&quot;M&quot;);&#10;            searchButton.click().then(function() {&#10;                expect(element.all(by.repeater('person in searchResults')).count()).toEqual(3);&#10;            });&#10;        });&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-auto-test" value="describe('search by term automatically', function() {&#10;    var scope, rootScope, controller, location, deferred;&#10;&#10;    beforeEach(inject(function($rootScope, $controller, $q) {&#10;        rootScope = $rootScope;&#10;        scope = $rootScope.$new();&#10;&#10;        // in this case, expectations need to be setup before controller is initialized&#10;        var routeParams = {&quot;term&quot;: &quot;peyton&quot;};&#10;        deferred = $q.defer();&#10;        spyOn(mockSearchService, 'query').andReturn(deferred.promise);&#10;        deferred.resolve({data: {name: &quot;Peyton Manning&quot;}});&#10;&#10;        controller = $controller('SearchController', {$scope: scope, $routeParams: routeParams, SearchService: mockSearchService });&#10;    }));&#10;&#10;    it('should search automatically when a term is on the URL', function() {&#10;        rootScope.$apply();&#10;        expect(scope.searchResults).toEqual({name: &quot;Peyton Manning&quot;});&#10;    });&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="search-term" value="describe('search by term', function() {&#10;    var scope, rootScope, controller, deferred;&#10;&#10;    // setup the controller with dependencies.&#10;    beforeEach(inject(function($rootScope, $controller, $q) {&#10;        rootScope = $rootScope;&#10;        scope = $rootScope.$new();&#10;        controller = $controller('SearchController', {$scope: scope, SearchService: mockSearchService });&#10;        deferred = $q.defer();&#10;    }));&#10;&#10;    it('should search when a term is set and search() is called', function() {&#10;        spyOn(mockSearchService, 'query').andReturn(deferred.promise);&#10;        scope.term = 'M';&#10;        scope.search();&#10;        deferred.resolve({data: {name: &quot;Peyton Manning&quot;}});&#10;        rootScope.$apply();&#10;        expect(scope.searchResults).toEqual({name: &quot;Peyton Manning&quot;});&#10;    });&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="karma" value="'app/search/search.js',&#10;        'app/search/search_test.js'," description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="search-test" value="'use strict';&#10;&#10;describe('myApp.search module', function() {&#10;    var mockSearchService;&#10;&#10;    beforeEach(module('myApp.search', function($provide) {&#10;        mockSearchService = {query: function(term) {}};&#10;        $provide.value(&quot;SearchService&quot;, mockSearchService);&#10;    }));&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="boot-entity" value="@javax.persistence.Entity&#10;class $entity$ {&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue&#10;    private java.lang.Long id;&#10;    private java.lang.String name;&#10;&#10;    public $entity$() {}&#10;    &#10;    public $entity$(String name) {&#10;        this.name = name;&#10;    }&#10;    &#10;    public java.lang.Long getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(java.lang.Long id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public java.lang.String getName() {&#10;        return name;&#10;    }&#10;&#10;    public void setName(java.lang.String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String toString() {&#10;        return &quot;$entity${&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                '}';&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="boot-repo" value="@org.springframework.data.rest.core.annotation.RepositoryRestResource&#10;interface $entity$Repository extends JpaRepository&lt;$entity$, java.lang.Long&gt; {}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="boot-command" value="@org.springframework.stereotype.Component&#10;class $entity$CommandLineRunner implements org.springframework.boot.CommandLineRunner {&#10;    &#10;    private final $entity$Repository repository;&#10;    &#10;    public $entity$CommandLineRunner($entity$Repository repository) {&#10;        this.repository = repository;&#10;    }&#10;    &#10;    @java.lang.Override&#10;    public void run(java.lang.String... strings) {&#10;        repository.findAll().forEach(System.out::println);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="boot-controller" value="@org.springframework.web.bind.annotation.RestController&#10;class $entity$Controller {&#10;&#10;    private $entity$Repository repository;&#10;    &#10;    public $entity$Controller($entity$Repository repository) {&#10;        this.repository = repository;&#10;    }&#10;    &#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/$uriMapping$&quot;)&#10;    java.util.Collection&lt;$entity$&gt; list() {&#10;        return repository.findAll();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="uriMapping" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="boot-sql" value="insert into $entity$ (name) values ('First');&#10;insert into $entity$ (name) values ('Second');" description="" toReformat="true" toShortenFQNames="true">
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="boot-h2" value="        &lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.h2database&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;h2&lt;/artifactId&gt;&#10;&#9;&#9;&lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="jh-findBy" value="findByBlogUserLoginOrderByDateDesc(SecurityUtils.getCurrentUserLogin().orElse(null), pageable);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="false" />
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_COMMENT" value="false" />
      <option name="JAVA_DECLARATION" value="false" />
      <option name="JAVA_EXPRESSION" value="false" />
      <option name="JAVA_STATEMENT" value="false" />
      <option name="JAVA_STRING" value="false" />
    </context>
  </template>
  <template name="jh-entries" value="&lt;div class=&quot;table-responsive&quot; *ngIf=&quot;entries?.length &gt; 0&quot;&gt;&#10;        &lt;div infinite-scroll (scrolled)=&quot;loadPage(page + 1)&quot; [infiniteScrollDisabled]=&quot;page &gt;= links['last']&quot; [infiniteScrollDistance]=&quot;0&quot;&gt;&#10;            &lt;div *ngFor=&quot;let entry of entries; trackBy: trackId&quot;&gt;&#10;                &lt;a [routerLink]=&quot;['/entry', entry.id, 'view' ]&quot;&gt;&#10;                    &lt;h2&gt;{{entry.title}}&lt;/h2&gt;&#10;                &lt;/a&gt;&#10;                &lt;small&gt;Posted on {{entry.date | date: 'short'}} by {{entry.blog.user.firstName}}&lt;/small&gt;&#10;                &lt;div [innerHTML]=&quot;entry.content&quot;&gt;&lt;/div&gt;&#10;                &lt;div class=&quot;btn-group mb-2 mt-1&quot;&gt;&#10;                    &lt;button type=&quot;submit&quot;&#10;                            [routerLink]=&quot;['/entry', entry.id, 'edit']&quot;&#10;                            class=&quot;btn btn-primary btn-sm&quot;&gt;&#10;                        &lt;fa-icon [icon]=&quot;'pencil-alt'&quot;&gt;&lt;/fa-icon&gt;&#10;                        &lt;span class=&quot;d-none d-md-inline&quot; jhiTranslate=&quot;entity.action.edit&quot;&gt;Edit&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &lt;button type=&quot;submit&quot;&#10;                            [routerLink]=&quot;['/', 'entry', { outlets: { popup: entry.id + '/delete'} }]&quot;&#10;                            replaceUrl=&quot;true&quot;&#10;                            queryParamsHandling=&quot;merge&quot;&#10;                            class=&quot;btn btn-danger btn-sm&quot;&gt;&#10;                        &lt;fa-icon [icon]=&quot;'times'&quot;&gt;&lt;/fa-icon&gt;&#10;                        &lt;span class=&quot;d-none d-md-inline&quot; jhiTranslate=&quot;entity.action.delete&quot;&gt;Delete&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                &lt;/div&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;    &lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="javaee-sec" value="    &lt;security-constraint&gt;&#10;        &lt;web-resource-collection&gt;&#10;            &lt;web-resource-name&gt;api&lt;/web-resource-name&gt;&#10;            &lt;url-pattern&gt;/api/*&lt;/url-pattern&gt;&#10;            &lt;http-method&gt;GET&lt;/http-method&gt;&#10;            &lt;http-method&gt;POST&lt;/http-method&gt;&#10;        &lt;/web-resource-collection&gt;&#10;        &lt;auth-constraint&gt;&#10;            &lt;role-name&gt;ROLE_USER&lt;/role-name&gt;&#10;            &lt;role-name&gt;ROLE_ADMIN&lt;/role-name&gt;&#10;        &lt;/auth-constraint&gt;&#10;    &lt;/security-constraint&gt;&#10;&#10;    &lt;login-config&gt;&#10;        &lt;auth-method&gt;BASIC&lt;/auth-method&gt;&#10;        &lt;realm-name&gt;Java EE Login&lt;/realm-name&gt;&#10;    &lt;/login-config&gt;&#10;&#10;    &lt;security-role&gt;&#10;        &lt;role-name&gt;ROLE_USER&lt;/role-name&gt;&#10;    &lt;/security-role&gt;&#10;&#10;    &lt;security-role&gt;&#10;        &lt;role-name&gt;ROLE_ADMIN&lt;/role-name&gt;&#10;    &lt;/security-role&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="javaee-ssl" value="&lt;user-data-constraint&gt;&#10;            &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt;&#10;        &lt;/user-data-constraint&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="session-config" value="&lt;session-config&gt;&#10;        &lt;session-timeout&gt;15&lt;/session-timeout&gt;&#10;        &lt;cookie-config&gt;&#10;            &lt;http-only&gt;true&lt;/http-only&gt;&#10;            &lt;secure&gt;true&lt;/secure&gt;&#10;        &lt;/cookie-config&gt;&#10;        &lt;tracking-mode&gt;COOKIE&lt;/tracking-mode&gt;&#10;    &lt;/session-config&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="shiro-deps" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;&#10;            &lt;artifactId&gt;shiro-core&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;&#10;            &lt;artifactId&gt;shiro-spring&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;&#10;            &lt;artifactId&gt;shiro-web&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2.4&lt;/version&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="login-error-spring" value="&lt;p th:if=&quot;${param.error}&quot; th:with=&quot;errorMsg=${session['SPRING_SECURITY_LAST_EXCEPTION'].message}&quot; style=&quot;color:red&quot;&gt;&#10;    Invalid username and password. Reason: &lt;br/&gt;&lt;span th:text=&quot;${errorMsg}&quot;&gt;Wrong input!&lt;/span&gt;&#10;&lt;/p&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="login-error-shiro" value="&lt;p th:if=&quot;${shiroLoginFailure}&quot; style=&quot;color:red&quot;&gt;&#10;    Invalid username and password.&#10;&lt;/p&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="userManager.save" value="try {&#10;                userManager.saveUser(user);&#10;            } catch (UserExistsException uex) {&#10;                result.addError(new ObjectError(&quot;user&quot;, uex.getMessage()));&#10;                return &quot;userform&quot;;&#10;            }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="loginresource" value="package security;&#10;&#10;import javax.inject.Inject;&#10;import javax.ws.rs.*;&#10;import javax.ws.rs.core.MediaType;&#10;&#10;@Path(&quot;/login&quot;)&#10;@Produces(MediaType.APPLICATION_JSON)&#10;@Consumes(MediaType.APPLICATION_FORM_URLENCODED)&#10;public class LoginResource {&#10;&#10;    @Inject&#10;    LoginService loginService;&#10;&#10;    @GET&#10;    public LoginStatus getStatus() {&#10;        return loginService.getStatus();&#10;    }&#10;&#10;    @POST&#10;    public LoginStatus login(@FormParam(&quot;j_username&quot;) String username,&#10;                             @FormParam(&quot;j_password&quot;) String password) {&#10;        return loginService.login(username, password);&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="loginservice" value="package security;&#10;&#10;public interface LoginService {&#10;&#10;    LoginStatus getStatus();&#10;&#10;    LoginStatus login(String username, String password);&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="javaee-loginservice" value="package security;&#10;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;&#10;import javax.inject.Inject;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.http.HttpServletRequest;&#10;&#10;public class JavaEELoginService implements LoginService {&#10;    private Log log = LogFactory.getLog(JavaEELoginService.class);&#10;&#10;    @Inject&#10;    private HttpServletRequest request;&#10;&#10;    public LoginStatus getStatus() {&#10;        if (request.getRemoteUser() != null) {&#10;            return new LoginStatus(true, request.getRemoteUser());&#10;        } else {&#10;            return new LoginStatus(false, null);&#10;        }&#10;    }&#10;&#10;    @Override&#10;    public LoginStatus login(String username, String password) {&#10;        try {&#10;            if (request.getRemoteUser() == null) {&#10;                request.login(username, password);&#10;                log.debug(&quot;Login succeeded!&quot;);&#10;            }&#10;            return new LoginStatus(true, request.getRemoteUser());&#10;        } catch (ServletException e) {&#10;            e.printStackTrace();&#10;            return new LoginStatus(false, null);&#10;        }&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="shiro-loginservice" value="package security;&#10;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import org.apache.shiro.SecurityUtils;&#10;import org.apache.shiro.authc.AuthenticationException;&#10;import org.apache.shiro.authc.UsernamePasswordToken;&#10;import org.apache.shiro.subject.Subject;&#10;import org.springframework.stereotype.Service;&#10;&#10;@Service(&quot;shiroLoginService&quot;)&#10;public class ShiroLoginService implements LoginService {&#10;    private Log log = LogFactory.getLog(ShiroLoginService.class);&#10;&#10;    public LoginStatus getStatus() {&#10;        Subject currentUser = SecurityUtils.getSubject();&#10;        if (currentUser.isAuthenticated()) {&#10;            return new LoginStatus(true, currentUser.getPrincipal().toString());&#10;        } else {&#10;            return new LoginStatus(false, null);&#10;        }&#10;    }&#10;&#10;    public LoginStatus login(String username, String password) {&#10;        if (!getStatus().isLoggedIn()) {&#10;            UsernamePasswordToken token = new UsernamePasswordToken(username, password);&#10;            //this is all you have to do to support 'remember me' (no config - built in!):&#10;            token.setRememberMe(true);&#10;            Subject currentUser = SecurityUtils.getSubject();&#10;            try {&#10;                currentUser.login(token);&#10;                log.debug(&quot;Login succeeded!&quot;);&#10;                return new LoginStatus(currentUser.isAuthenticated(),&#10;                        currentUser.getPrincipal().toString());&#10;            } catch (AuthenticationException e) {&#10;                return new LoginStatus(false, null);&#10;            }&#10;&#10;        } else {&#10;            return getStatus();&#10;        }&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="spring-loginservice" value="package security;&#10;&#10;import org.apache.commons.logging.Log;&#10;import org.apache.commons.logging.LogFactory;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.beans.factory.annotation.Qualifier;&#10;import org.springframework.security.authentication.AuthenticationManager;&#10;import org.springframework.security.authentication.BadCredentialsException;&#10;import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.security.core.GrantedAuthority;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.core.userdetails.User;&#10;import org.springframework.stereotype.Service;&#10;&#10;import java.util.Collections;&#10;&#10;@Service&#10;public class SpringSecurityLoginService implements LoginService {&#10;    private Log log = LogFactory.getLog(SpringSecurityLoginService.class);&#10;&#10;    @Autowired(required = false)&#10;    @Qualifier(&quot;authenticationManager&quot;)&#10;    AuthenticationManager authenticationManager;&#10;&#10;    public LoginStatus getStatus() {&#10;        Authentication auth = SecurityContextHolder.getContext().getAuthentication();&#10;        if (auth != null &amp;&amp; !auth.getName().equals(&quot;anonymousUser&quot;) &amp;&amp; auth.isAuthenticated()) {&#10;            return new LoginStatus(true, auth.getName());&#10;        } else {&#10;            return new LoginStatus(false, null);&#10;        }&#10;    }&#10;&#10;    public LoginStatus login(String username, String password) {&#10;        UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(username, password);&#10;        User details = new User(username, password, Collections.&lt;GrantedAuthority&gt;emptyList());&#10;        token.setDetails(details);&#10;&#10;        try {&#10;            Authentication auth = authenticationManager.authenticate(token);&#10;            log.debug(&quot;Login succeeded!&quot;);&#10;            SecurityContextHolder.getContext().setAuthentication(auth);&#10;            return new LoginStatus(auth.isAuthenticated(), auth.getName());&#10;        } catch (BadCredentialsException e) {&#10;            return new LoginStatus(false, null);&#10;        }&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="spring-logintest" value="package security;&#10;&#10;import org.junit.Before;&#10;import org.junit.Test;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.SpringApplicationConfiguration;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.security.test.context.support.WithMockUser;&#10;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#10;import org.springframework.test.context.web.WebAppConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;import org.springframework.web.context.WebApplicationContext;&#10;&#10;import static org.hamcrest.CoreMatchers.containsString;&#10;import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestBuilders.formLogin;&#10;import static org.springframework.security.test.web.servlet.request.SecurityMockMvcRequestPostProcessors.httpBasic;&#10;import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.authenticated;&#10;import static org.springframework.security.test.web.servlet.response.SecurityMockMvcResultMatchers.unauthenticated;&#10;import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;/**&#10; * Demonstrates some of the integrations with Spring Security's Test support.&#10; * This is not a complete showcase. For additional features and details on what&#10; * is shown refer to the &lt;a href=&#10; * &quot;http://docs.spring.io/spring-security/site/docs/4.0.x/reference/htmlsingle/#test&quot;&#10; * &gt;reference&lt;/a&gt;&#10; *&#10; * @author Rob Winch&#10; */&#10;@RunWith(SpringJUnit4ClassRunner.class)&#10;@SpringApplicationConfiguration(classes = {Application.class})&#10;@WebAppConfiguration&#10;public class MockMvcWebSecurityTests {&#10;    @Autowired&#10;    WebApplicationContext context;&#10;&#10;    MockMvc mockMvc;&#10;&#10;    @Before&#10;    public void setup() {&#10;        mockMvc = MockMvcBuilders&#10;                .webAppContextSetup(context)&#10;                .apply(springSecurity())&#10;                .alwaysDo(print())&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Demonstrate how to easily make a form based login request.&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;Default username is &quot;user&quot;&lt;/li&gt;&#10;     * &lt;li&gt;Default password is &quot;password&quot;&lt;/li&gt;&#10;     * &lt;li&gt;Automatically includes a valid CSRF token&lt;/li&gt;&#10;     * &lt;li&gt;We are able to verify the user we are authenticated with&lt;/li&gt;&#10;     * &lt;/ul&gt;&#10;     */&#10;    @Test&#10;    public void testLogin() throws Exception {&#10;        mockMvc&#10;                .perform(formLogin())&#10;                .andExpect(status().isFound())&#10;                .andExpect(redirectedUrl(&quot;/&quot;))&#10;                .andExpect(authenticated().withUsername(&quot;user&quot;));&#10;    }&#10;&#10;    /**&#10;     * Demonstrate how to easily make a form based login request.&#10;     * &lt;p/&gt;&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;Default username is &quot;user&quot;&lt;/li&gt;&#10;     * &lt;li&gt;Override the default password to &quot;invalid&quot;&lt;/li&gt;&#10;     * &lt;li&gt;Automatically includes a valid CSRF token&lt;/li&gt;&#10;     * &lt;li&gt;We are able to verify we are unauthenticated&lt;/li&gt;&#10;     * &lt;/ul&gt;&#10;     */&#10;    @Test&#10;    public void testDenied() throws Exception {&#10;        String loginErrorUrl = &quot;/login?error&quot;;&#10;        mockMvc&#10;                .perform(formLogin().password(&quot;invalid&quot;))&#10;                .andExpect(status().isFound())&#10;                .andExpect(redirectedUrl(loginErrorUrl))&#10;                .andExpect(unauthenticated());&#10;&#10;        mockMvc&#10;                .perform(get(loginErrorUrl))&#10;                .andExpect(content().string(containsString(&quot;Invalid username and password&quot;)));&#10;    }&#10;&#10;    /**&#10;     * Demonstrates requesting a protected page as an unauthenticated user&#10;     */&#10;    @Test&#10;    public void testProtected() throws Exception {&#10;        mockMvc&#10;                .perform(get(&quot;/api/health&quot;).accept(MediaType.APPLICATION_JSON))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;&#10;    /**&#10;     * Demonstrates requesting a protected page with valid http basic credentials&#10;     */&#10;    @Test&#10;    public void testAuthorizedAccessHttpBasic() throws Exception {&#10;        mockMvc&#10;                .perform(get(&quot;/api/health&quot;).with(httpBasic(&quot;user&quot;, &quot;password&quot;)))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    /**&#10;     * Demonstrates running a request as a user using {@link WithMockUser}.&#10;     * &lt;p/&gt;&#10;     * &lt;ul&gt;&#10;     * &lt;li&gt;The default username is &quot;user&quot;&lt;/li&gt;&#10;     * &lt;li&gt;The default role is &quot;ROLE_USER&quot;&lt;/li&gt;&#10;     * &lt;li&gt;The user does NOT need to exist&lt;/li&gt;&#10;     * &lt;/ul&gt;&#10;     */&#10;    @WithMockUser&#10;    @Test&#10;    public void testAuthorizedAccessWithMockUser() throws Exception {&#10;        mockMvc&#10;                .perform(get(&quot;/api/health&quot;))&#10;                .andExpect(status().isOk());&#10;    }&#10;&#10;    /**&#10;     * Demonstrates requesting a protected page with invalid http basic credentials&#10;     */&#10;    @Test&#10;    public void testUnauthorizedAccess() throws Exception {&#10;        mockMvc&#10;                .perform(get(&quot;/api/health&quot;).with(httpBasic(&quot;user&quot;, &quot;invalid&quot;)))&#10;                .andExpect(status().isUnauthorized());&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="keytool-plugin" value="&lt;plugin&gt;&#10;                &lt;groupId&gt;org.codehaus.mojo&lt;/groupId&gt;&#10;                &lt;artifactId&gt;keytool-maven-plugin&lt;/artifactId&gt;&#10;                &lt;version&gt;1.5&lt;/version&gt;&#10;                &lt;executions&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;generate-resources&lt;/phase&gt;&#10;                        &lt;id&gt;clean&lt;/id&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;clean&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                    &lt;execution&gt;&#10;                        &lt;phase&gt;generate-resources&lt;/phase&gt;&#10;                        &lt;id&gt;generateKeyPair&lt;/id&gt;&#10;                        &lt;goals&gt;&#10;                            &lt;goal&gt;generateKeyPair&lt;/goal&gt;&#10;                        &lt;/goals&gt;&#10;                    &lt;/execution&gt;&#10;                &lt;/executions&gt;&#10;                &lt;configuration&gt;&#10;                    &lt;keystore&gt;${project.build.directory}/classes/ssl.keystore&lt;/keystore&gt;&#10;                    &lt;dname&gt;cn=localhost&lt;/dname&gt;&#10;                    &lt;keypass&gt;secret&lt;/keypass&gt;&#10;                    &lt;storepass&gt;secret&lt;/storepass&gt;&#10;                    &lt;alias&gt;localhost&lt;/alias&gt;&#10;                    &lt;keyalg&gt;RSA&lt;/keyalg&gt;&#10;                &lt;/configuration&gt;&#10;            &lt;/plugin&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-xml" value="&lt;jettyXml&gt;&#10;                        ${project.basedir}/src/test/resources/jetty.xml,${project.basedir}/src/test/resources/jetty-http.xml,${project.basedir}/src/test/resources/jetty-ssl.xml,${project.basedir}/src/test/resources/jetty-https.xml&#10;                    &lt;/jettyXml&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-file" value="&lt;configuration&gt;&#10;                    &lt;loginServices&gt;&#10;                        &lt;loginService implementation=&quot;org.eclipse.jetty.security.HashLoginService&quot;&gt;&#10;                            &lt;name&gt;Java EE Login&lt;/name&gt;&#10;                            &lt;config&gt;${basedir}/src/test/resources/realm.properties&lt;/config&gt;&#10;                        &lt;/loginService&gt;&#10;                    &lt;/loginServices&gt;&#10;                &lt;/configuration&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-jdbc" value="&lt;loginService implementation=&quot;org.eclipse.jetty.security.JDBCLoginService&quot;&gt;&#10;                            &lt;name&gt;Java EE Login&lt;/name&gt;&#10;                            &lt;config&gt;${basedir}/src/test/resources/jdbc-realm.properties&lt;/config&gt;&#10;                        &lt;/loginService&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-webdefault" value="&lt;defaultsDescriptor&gt;src/test/resources/webdefault.xml&lt;/defaultsDescriptor&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="webdefault.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;&#10;&#10;  &lt;!-- ===================================================================== --&gt;&#10;  &lt;!-- This file contains the default descriptor for web applications.       --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - --&gt;&#10;  &lt;!-- The intent of this descriptor is to include jetty specific or common  --&gt;&#10;  &lt;!-- configuration for all webapps.   If a context has a webdefault.xml    --&gt;&#10;  &lt;!-- descriptor, it is applied before the contexts own web.xml file        --&gt;&#10;  &lt;!--                                                                       --&gt;&#10;  &lt;!-- A context may be assigned a default descriptor by:                    --&gt;&#10;  &lt;!--  + Calling WebApplicationContext.setDefaultsDescriptor                --&gt;&#10;  &lt;!--  + Passed an arg to addWebApplications                                --&gt;&#10;  &lt;!--                                                                       --&gt;&#10;  &lt;!-- This file is used both as the resource within the jetty.jar (which is --&gt;&#10;  &lt;!-- used as the default if no explicit defaults descriptor is set) and it --&gt;&#10;  &lt;!-- is copied to the etc directory of the Jetty distro and explicitly     --&gt;&#10;  &lt;!-- by the jetty.xml file.                                                --&gt;&#10;  &lt;!--                                                                       --&gt;&#10;  &lt;!-- ===================================================================== --&gt;&#10;&lt;web-app&#10;  xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;&#10;  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;  xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;&#10;  metadata-complete=&quot;true&quot;&#10;  version=&quot;2.5&quot;&#10;&gt;&#10;&#10;  &lt;description&gt;&#10;    Default web.xml file.  &#10;    This file is applied to a Web application before it's own WEB_INF/web.xml file&#10;  &lt;/description&gt;&#10;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;!-- Context params to control Session Cookies                            --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;!--&#10;    UNCOMMENT TO ACTIVATE &lt;context-param&gt; &lt;param-name&gt;org.eclipse.jetty.servlet.SessionDomain&lt;/param-name&gt; &lt;param-value&gt;127.0.0.1&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt;&#10;    &lt;param-name&gt;org.eclipse.jetty.servlet.SessionPath&lt;/param-name&gt; &lt;param-value&gt;/&lt;/param-value&gt; &lt;/context-param&gt; &lt;context-param&gt; &lt;param-name&gt;org.eclipse.jetty.servlet.MaxAge&lt;/param-name&gt;&#10;    &lt;param-value&gt;-1&lt;/param-value&gt; &lt;/context-param&gt;&#10;  --&gt;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;!-- The default servlet.                                                 --&gt;&#10;  &lt;!-- This servlet, normally mapped to /, provides the handling for static --&gt;&#10;  &lt;!-- content, OPTIONS and TRACE methods for the context.                  --&gt;&#10;  &lt;!-- The following initParameters are supported:                          --&gt;&#10;  &lt;!--  &#10; *  acceptRanges      If true, range requests and responses are&#10; *                    supported&#10; *&#10; *  dirAllowed        If true, directory listings are returned if no&#10; *                    welcome file is found. Else 403 Forbidden.&#10; *&#10; *  welcomeServlets   If true, attempt to dispatch to welcome files&#10; *                    that are servlets, but only after no matching static&#10; *                    resources could be found. If false, then a welcome&#10; *                    file must exist on disk. If &quot;exact&quot;, then exact&#10; *                    servlet matches are supported without an existing file.&#10; *                    Default is true.&#10; *&#10; *                    This must be false if you want directory listings,&#10; *                    but have index.jsp in your welcome file list.&#10; *&#10; *  redirectWelcome   If true, welcome files are redirected rather than&#10; *                    forwarded to.&#10; *&#10; *  gzip              If set to true, then static content will be served as&#10; *                    gzip content encoded if a matching resource is&#10; *                    found ending with &quot;.gz&quot;&#10; *&#10; *  resourceBase      Set to replace the context resource base&#10; *&#10; *  resourceCache     If set, this is a context attribute name, which the servlet &#10; *                    will use to look for a shared ResourceCache instance. &#10; *                        &#10; *  relativeResourceBase&#10; *                    Set with a pathname relative to the base of the&#10; *                    servlet context root. Useful for only serving static content out&#10; *                    of only specific subdirectories.&#10; *&#10; *  aliases           If True, aliases of resources are allowed (eg. symbolic&#10; *                    links and caps variations). May bypass security constraints.&#10; *&#10; *  maxCacheSize      The maximum total size of the cache or 0 for no cache.&#10; *  maxCachedFileSize The maximum size of a file to cache&#10; *  maxCachedFiles    The maximum number of files to cache&#10; *&#10; *  useFileMappedBuffer&#10; *                    If set to true, it will use mapped file buffer to serve static content&#10; *                    when using NIO connector. Setting this value to false means that&#10; *                    a direct buffer will be used instead of a mapped file buffer.&#10; *                    By default, this is set to true.&#10; *&#10; *  cacheControl      If set, all static content will have this value set as the cache-control&#10; *                    header.&#10; --&gt;&#10; &#10; &#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;servlet&gt;&#10;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;&#10;    &lt;servlet-class&gt;org.eclipse.jetty.servlet.DefaultServlet&lt;/servlet-class&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;aliases&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;acceptRanges&lt;/param-name&gt;&#10;      &lt;param-value&gt;true&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;dirAllowed&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;welcomeServlets&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;redirectWelcome&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;maxCacheSize&lt;/param-name&gt;&#10;      &lt;param-value&gt;256000000&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;maxCachedFileSize&lt;/param-name&gt;&#10;      &lt;param-value&gt;200000000&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;maxCachedFiles&lt;/param-name&gt;&#10;      &lt;param-value&gt;2048&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;gzip&lt;/param-name&gt;&#10;      &lt;param-value&gt;true&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;useFileMappedBuffer&lt;/param-name&gt;&#10;      &lt;param-value&gt;true&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;resourceCache&lt;/param-name&gt;&#10;      &lt;param-value&gt;resourceCache&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;!--&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;cacheControl&lt;/param-name&gt;&#10;      &lt;param-value&gt;max-age=3600,public&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    --&gt;&#10;    &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;&#10;  &lt;/servlet&gt;&#10;&#10;  &lt;servlet-mapping&gt;&#10;    &lt;servlet-name&gt;default&lt;/servlet-name&gt;&#10;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&#10;  &lt;/servlet-mapping&gt;&#10;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;!-- JSP Servlet                                                          --&gt;&#10;  &lt;!-- This is the jasper JSP servlet from the jakarta project              --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;!-- The JSP page compiler and execution servlet, which is the mechanism  --&gt;&#10;  &lt;!-- used by Glassfish to support JSP pages.  Traditionally, this servlet --&gt;&#10;  &lt;!-- is mapped to URL patterh &quot;*.jsp&quot;.  This servlet supports the         --&gt;&#10;  &lt;!-- following initialization parameters (default values are in square    --&gt;&#10;  &lt;!-- brackets):                                                           --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   checkInterval       If development is false and reloading is true, --&gt;&#10;  &lt;!--                       background compiles are enabled. checkInterval --&gt;&#10;  &lt;!--                       is the time in seconds between checks to see   --&gt;&#10;  &lt;!--                       if a JSP page needs to be recompiled. [300]    --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   compiler            Which compiler Ant should use to compile JSP   --&gt;&#10;  &lt;!--                       pages.  See the Ant documenation for more      --&gt;&#10;  &lt;!--                       information. [javac]                           --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   classdebuginfo      Should the class file be compiled with         --&gt;&#10;  &lt;!--                       debugging information?  [true]                 --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   classpath           What class path should I use while compiling   --&gt;&#10;  &lt;!--                       generated servlets?  [Created dynamically      --&gt;&#10;  &lt;!--                       based on the current web application]          --&gt;&#10;  &lt;!--                       Set to ? to make the container explicitly set  --&gt;&#10;  &lt;!--                       this parameter.                                --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   development         Is Jasper used in development mode (will check --&gt;&#10;  &lt;!--                       for JSP modification on every access)?  [true] --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   enablePooling       Determines whether tag handler pooling is      --&gt;&#10;  &lt;!--                       enabled  [true]                                --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   fork                Tell Ant to fork compiles of JSP pages so that --&gt;&#10;  &lt;!--                       a separate JVM is used for JSP page compiles   --&gt;&#10;  &lt;!--                       from the one Tomcat is running in. [true]      --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   ieClassId           The class-id value to be sent to Internet      --&gt;&#10;  &lt;!--                       Explorer when using &lt;jsp:plugin&gt; tags.         --&gt;&#10;  &lt;!--                       [clsid:8AD9C840-044E-11D1-B3E9-00805F499D93]   --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   javaEncoding        Java file encoding to use for generating java  --&gt;&#10;  &lt;!--                       source files. [UTF-8]                          --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   keepgenerated       Should we keep the generated Java source code  --&gt;&#10;  &lt;!--                       for each page instead of deleting it? [true]   --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   logVerbosityLevel   The level of detailed messages to be produced  --&gt;&#10;  &lt;!--                       by this servlet.  Increasing levels cause the  --&gt;&#10;  &lt;!--                       generation of more messages.  Valid values are --&gt;&#10;  &lt;!--                       FATAL, ERROR, WARNING, INFORMATION, and DEBUG. --&gt;&#10;  &lt;!--                       [WARNING]                                      --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   mappedfile          Should we generate static content with one     --&gt;&#10;  &lt;!--                       print statement per input line, to ease        --&gt;&#10;  &lt;!--                       debugging?  [false]                            --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   reloading           Should Jasper check for modified JSPs?  [true] --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   suppressSmap        Should the generation of SMAP info for JSR45   --&gt;&#10;  &lt;!--                       debugging be suppressed?  [false]              --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   dumpSmap            Should the SMAP info for JSR45 debugging be    --&gt;&#10;  &lt;!--                       dumped to a file? [false]                      --&gt;&#10;  &lt;!--                       False if suppressSmap is true                  --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   scratchdir          What scratch directory should we use when      --&gt;&#10;  &lt;!--                       compiling JSP pages?  [default work directory  --&gt;&#10;  &lt;!--                       for the current web application]               --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   tagpoolMaxSize      The maximum tag handler pool size  [5]         --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--   xpoweredBy          Determines whether X-Powered-By response       --&gt;&#10;  &lt;!--                       header is added by generated servlet  [false]  --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!-- If you wish to use Jikes to compile JSP pages:                       --&gt;&#10;  &lt;!--   Set the init parameter &quot;compiler&quot; to &quot;jikes&quot;.  Define              --&gt;&#10;  &lt;!--   the property &quot;-Dbuild.compiler.emacs=true&quot; when starting Jetty     --&gt;&#10;  &lt;!--   to cause Jikes to emit error messages in a format compatible with  --&gt;&#10;  &lt;!--   Jasper.                                                            --&gt;&#10;  &lt;!--   If you get an error reporting that jikes can't use UTF-8 encoding, --&gt;&#10;  &lt;!--   try setting the init parameter &quot;javaEncoding&quot; to &quot;ISO-8859-1&quot;.     --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;servlet&#10;    id=&quot;jsp&quot;&#10;  &gt;&#10;    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;&#10;    &lt;servlet-class&gt;org.apache.jasper.servlet.JspServlet&lt;/servlet-class&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;logVerbosityLevel&lt;/param-name&gt;&#10;      &lt;param-value&gt;DEBUG&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;fork&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;init-param&gt;&#10;      &lt;param-name&gt;xpoweredBy&lt;/param-name&gt;&#10;      &lt;param-value&gt;false&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    &lt;!--  &#10;    &lt;init-param&gt;&#10;        &lt;param-name&gt;classpath&lt;/param-name&gt;&#10;        &lt;param-value&gt;?&lt;/param-value&gt;&#10;    &lt;/init-param&gt;&#10;    --&gt;&#10;    &lt;load-on-startup&gt;0&lt;/load-on-startup&gt;&#10;  &lt;/servlet&gt;&#10;&#10;  &lt;servlet-mapping&gt;&#10;    &lt;servlet-name&gt;jsp&lt;/servlet-name&gt;&#10;    &lt;url-pattern&gt;*.jsp&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.jspf&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.jspx&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.xsp&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.JSP&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.JSPF&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.JSPX&lt;/url-pattern&gt;&#10;    &lt;url-pattern&gt;*.XSP&lt;/url-pattern&gt;&#10;  &lt;/servlet-mapping&gt;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;!-- Dynamic Servlet Invoker.                                             --&gt;&#10;  &lt;!-- This servlet invokes anonymous servlets that have not been defined   --&gt;&#10;  &lt;!-- in the web.xml or by other means. The first element of the pathInfo  --&gt;&#10;  &lt;!-- of a request passed to the envoker is treated as a servlet name for  --&gt;&#10;  &lt;!-- an existing servlet, or as a class name of a new servlet.            --&gt;&#10;  &lt;!-- This servlet is normally mapped to /servlet/*                        --&gt;&#10;  &lt;!-- This servlet support the following initParams:                       --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--  nonContextServlets       If false, the invoker can only load        --&gt;&#10;  &lt;!--                           servlets from the contexts classloader.    --&gt;&#10;  &lt;!--                           This is false by default and setting this  --&gt;&#10;  &lt;!--                           to true may have security implications.    --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--  verbose                  If true, log dynamic loads                 --&gt;&#10;  &lt;!--                                                                      --&gt;&#10;  &lt;!--  *                        All other parameters are copied to the     --&gt;&#10;  &lt;!--                           each dynamic servlet as init parameters    --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;!--&#10;    Uncomment for dynamic invocation &lt;servlet&gt; &lt;servlet-name&gt;invoker&lt;/servlet-name&gt; &lt;servlet-class&gt;org.eclipse.jetty.servlet.Invoker&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;verbose&lt;/param-name&gt;&#10;    &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;nonContextServlets&lt;/param-name&gt; &lt;param-value&gt;false&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt;&#10;    &lt;param-name&gt;dynamicParam&lt;/param-name&gt; &lt;param-value&gt;anyValue&lt;/param-value&gt; &lt;/init-param&gt; &lt;load-on-startup&gt;0&lt;/load-on-startup&gt; &lt;/servlet&gt; &lt;servlet-mapping&gt; &lt;servlet-name&gt;invoker&lt;/servlet-name&gt;&#10;    &lt;url-pattern&gt;/servlet/*&lt;/url-pattern&gt; &lt;/servlet-mapping&gt;&#10;  --&gt;&#10;&#10;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;session-config&gt;&#10;    &lt;session-timeout&gt;30&lt;/session-timeout&gt;&#10;  &lt;/session-config&gt;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;!-- Default MIME mappings                                                --&gt;&#10;  &lt;!-- The default MIME mappings are provided by the mime.properties        --&gt;&#10;  &lt;!-- resource in the org.eclipse.jetty.server.jar file.  Additional or modified  --&gt;&#10;  &lt;!-- mappings may be specified here                                       --&gt;&#10;  &lt;!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  --&gt;&#10;  &lt;!-- UNCOMMENT TO ACTIVATE&#10;  &lt;mime-mapping&gt;&#10;    &lt;extension&gt;mysuffix&lt;/extension&gt;&#10;    &lt;mime-type&gt;mymime/type&lt;/mime-type&gt;&#10;  &lt;/mime-mapping&gt;&#10;  --&gt;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;welcome-file-list&gt;&#10;    &lt;welcome-file&gt;index.html&lt;/welcome-file&gt;&#10;    &lt;welcome-file&gt;index.htm&lt;/welcome-file&gt;&#10;    &lt;welcome-file&gt;index.jsp&lt;/welcome-file&gt;&#10;  &lt;/welcome-file-list&gt;&#10;&#10;  &lt;!-- ==================================================================== --&gt;&#10;  &lt;locale-encoding-mapping-list&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ar&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-6&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;be&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;bg&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ca&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;cs&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;da&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;de&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;el&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-7&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;en&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;es&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;et&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;fi&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;fr&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;hr&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;hu&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;is&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;it&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;iw&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-8&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ja&lt;/locale&gt;&#10;      &lt;encoding&gt;Shift_JIS&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ko&lt;/locale&gt;&#10;      &lt;encoding&gt;EUC-KR&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;lt&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;lv&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;mk&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;nl&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;no&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;pl&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;pt&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ro&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;ru&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sh&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sk&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sl&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sq&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-2&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sr&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;sv&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-1&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;tr&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-9&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;uk&lt;/locale&gt;&#10;      &lt;encoding&gt;ISO-8859-5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;zh&lt;/locale&gt;&#10;      &lt;encoding&gt;GB2312&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;    &lt;locale-encoding-mapping&gt;&#10;      &lt;locale&gt;zh_TW&lt;/locale&gt;&#10;      &lt;encoding&gt;Big5&lt;/encoding&gt;&#10;    &lt;/locale-encoding-mapping&gt;&#10;  &lt;/locale-encoding-mapping-list&gt;&#10;&#10;  &lt;security-constraint&gt;&#10;    &lt;web-resource-collection&gt;&#10;      &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;&#10;      &lt;url-pattern&gt;/&lt;/url-pattern&gt;&#10;      &lt;http-method&gt;TRACE&lt;/http-method&gt;&#10;    &lt;/web-resource-collection&gt;&#10;    &lt;auth-constraint/&gt;&#10;  &lt;/security-constraint&gt;&#10;&#10;&lt;/web-app&gt;&#10;&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-mysql" value="&lt;dependencies&gt;&#10;                    &lt;!-- MySQL for JDBC Realm --&gt;&#10;                    &lt;dependency&gt;&#10;                        &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;                        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;                        &lt;version&gt;5.1.36&lt;/version&gt;&#10;                    &lt;/dependency&gt;&#10;                &lt;/dependencies&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="security.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;beans:beans xmlns=&quot;http://www.springframework.org/schema/security&quot;&#10;             xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;             xmlns:beans=&quot;http://www.springframework.org/schema/beans&quot;&#10;             xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&#10;              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd&quot;&gt;&#10;&#10;    &lt;!-- New in Spring Security 3.1 --&gt;&#10;    &lt;!-- &lt;http pattern=&quot;/css/**&quot; security=&quot;none&quot;/&gt; --&gt;&#10;&#10;    &lt;http auto-config=&quot;true&quot;&gt;&#10;        &lt;intercept-url pattern=&quot;/app/users&quot; access=&quot;ROLE_USER,ROLE_ADMIN&quot;/&gt;&#10;        &lt;http-basic/&gt;&#10;    &lt;/http&gt;&#10;&#10;    &lt;authentication-manager alias=&quot;authenticationManager&quot;&gt;&#10;        &lt;authentication-provider&gt;&#10;            &lt;password-encoder hash=&quot;sha&quot;/&gt;&#10;            &lt;user-service id=&quot;userService&quot;&gt;&#10;                &lt;user name=&quot;user&quot; password=&quot;12dea96fec20593566ab75692c9949596833adc9&quot; authorities=&quot;ROLE_USER&quot;/&gt;&#10;                &lt;user name=&quot;admin&quot; password=&quot;d033e22ae348aeb5660fc2140aec35850c4da997&quot; authorities=&quot;ROLE_ADMIN&quot;/&gt;&#10;            &lt;/user-service&gt;&#10;        &lt;/authentication-provider&gt;&#10;    &lt;/authentication-manager&gt;&#10;&#10;    &lt;!--&lt;global-method-security&gt;&#10;        &lt;protect-pointcut expression=&quot;execution(* *..service.UserManager.removeUser(..))&quot; access=&quot;ROLE_ADMIN&quot;/&gt;&#10;    &lt;/global-method-security&gt;--&gt;&#10;&#10;    &lt;!-- Override userSecurityAdvice bean in appfuse-service to allow any role to update a user. --&gt;&#10;    &lt;beans:bean id=&quot;userSecurityAdvice&quot; class=&quot;org.appfuse.examples.webapp.security.UserSecurityAdvice&quot;/&gt;&#10;&lt;/beans:beans&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="spring-securityfilter" value="&lt;filter&gt;&#10;        &lt;filter-name&gt;securityFilter&lt;/filter-name&gt;&#10;        &lt;filter-class&gt;org.springframework.web.filter.DelegatingFilterProxy&lt;/filter-class&gt;&#10;        &lt;init-param&gt;&#10;            &lt;param-name&gt;targetBeanName&lt;/param-name&gt;&#10;            &lt;param-value&gt;springSecurityFilterChain&lt;/param-value&gt;&#10;        &lt;/init-param&gt;&#10;    &lt;/filter&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="logout-spring" value="&lt;security:authorize ifAnyGranted=&quot;ROLE_USER,ROLE_ADMIN&quot;&gt;&#10;                            &lt;li&gt;&lt;a href=&quot;${ctx}/logout&quot;&gt;Logout&lt;/a&gt;&lt;/li&gt;&#10;                        &lt;/security:authorize&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="logout-shiro" value="&lt;shiro:authenticated&gt;&#10;                            &lt;li&gt;&lt;a href=&quot;${ctx}/logout&quot;&gt;Logout&lt;/a&gt;&lt;/li&gt;&#10;                        &lt;/shiro:authenticated&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="javaee-form" value="&lt;form-login-config&gt;&#10;            &lt;form-login-page&gt;/login.jsp&lt;/form-login-page&gt;&#10;            &lt;form-error-page&gt;/login.jsp?error=true&lt;/form-error-page&gt;&#10;        &lt;/form-login-config&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="spring-rememberme" value="&lt;div&gt;&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;remember-me&quot; id=&quot;remember-me&quot;/&gt;&#10;        &lt;label for=&quot;remember-me&quot;&gt;Remember me&lt;/label&gt;&#10;    &lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="spring-logout" value="&lt;logout logout-url=&quot;/logout&quot;/&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="login-error" value="&lt;c:if test=&quot;${param.error == 'true'}&quot;&gt;&#10;        &lt;div class=&quot;alert alert-error&quot;&gt;Login Failed. Please try again.&lt;/div&gt;&#10;    &lt;/c:if&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="shiro-jdbc" value="@Autowired&#10;private DataSource dataSource;&#10;&#10;@Bean(name = &quot;jdbcRealm&quot;)&#10;@DependsOn(&quot;lifecycleBeanPostProcessor&quot;)&#10;public JdbcRealm jdbcRealm() {&#10;    JdbcRealm realm = new JdbcRealm();&#10;    HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();&#10;    credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);&#10;    realm.setCredentialsMatcher(credentialsMatcher);&#10;    realm.setDataSource(dataSource);&#10;    realm.init();&#10;    return realm;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="shiro-sha" value="HashedCredentialsMatcher credentialsMatcher = new HashedCredentialsMatcher();&#10;        credentialsMatcher.setHashAlgorithmName(Sha256Hash.ALGORITHM_NAME);&#10;        propertiesRealm.setCredentialsMatcher(credentialsMatcher);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="cache-headers" value="response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache, no-store, must-revalidate&quot;); // HTTP 1.1&#10;        response.setHeader(&quot;Pragma&quot;, &quot;no-cache&quot;); // HTTP 1.0&#10;        response.setDateHeader(&quot;Expires&quot;, 0); // Proxies" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="javaee-login" value="&lt;%@ taglib uri=&quot;http://java.sun.com/jsp/jstl/core&quot; prefix=&quot;c&quot; %&gt;&#10;&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;title&gt;Login&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;p&gt;&#10;    Please enter your username and password to login.&#10;&lt;/p&gt;&#10;&#10;&lt;form method=&quot;post&quot; id=&quot;loginForm&quot; action=&quot;/j_security_check&quot;&gt;&#10;    &lt;h2&gt;Sign In&lt;/h2&gt;&#10;&#10;    &lt;c:if test=&quot;${param.error == 'true'}&quot;&gt;&#10;        &lt;p style=&quot;color: red&quot;&gt;Login Failed. Please try again.&lt;/p&gt;&#10;    &lt;/c:if&gt;&#10;&#10;    &lt;input type=&quot;text&quot; name=&quot;j_username&quot; id=&quot;j_username&quot; placeholder=&quot;Username&quot; required autofocus&gt;&#10;    &lt;input type=&quot;password&quot; name=&quot;j_password&quot; id=&quot;j_password&quot; placeholder=&quot;Password&quot; required&gt;&#10;&#10;    &lt;input type=&quot;submit&quot; name=&quot;login&quot; id=&quot;login&quot; value=&quot;Login&quot;&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="pom-cdi" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;org.glassfish.jersey.containers.glassfish&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jersey-gf-cdi&lt;/artifactId&gt;&#10;            &lt;version&gt;${jersey.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.glassfish.jersey.containers.glassfish&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jersey-gf-cdi-ban-custom-hk2-binding&lt;/artifactId&gt;&#10;            &lt;version&gt;${jersey.version}&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.jboss.weld.servlet&lt;/groupId&gt;&#10;            &lt;artifactId&gt;weld-servlet-core&lt;/artifactId&gt;&#10;            &lt;version&gt;2.2.5.Final&lt;/version&gt;&#10;            &lt;scope&gt;runtime&lt;/scope&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-cdi" value="&lt;contextXml&gt;${basedir}/src/main/webapp/WEB-INF/jetty-context.xml&lt;/contextXml&gt;&#10;                    &lt;webApp&gt;&#10;                        &lt;jettyEnvXml&gt;${basedir}/src/main/webapp/WEB-INF/jetty-env.xml&lt;/jettyEnvXml&gt;&#10;                    &lt;/webApp&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="web-cdi" value="&lt;resource-env-ref&gt;&#10;        &lt;resource-env-ref-name&gt;BeanManager&lt;/resource-env-ref-name&gt;&#10;        &lt;resource-env-ref-type&gt;&#10;            javax.enterprise.inject.spi.BeanManager&#10;        &lt;/resource-env-ref-type&gt;&#10;    &lt;/resource-env-ref&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="beans.xml" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&lt;beans xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;&#10;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;       xsi:schemaLocation=&quot;&#10;      http://java.sun.com/xml/ns/javaee&#10;      http://java.sun.com/xml/ns/javaee/beans_1_0.xsd&quot;&gt;&#10;&lt;/beans&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="login-ajax" value="&lt;c:if test=&quot;${param.ajax}&quot;&gt;&#10;    &lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;&#10;    &lt;script type=&quot;text/javascript&quot;&gt;&#10;        var loginFailed = function (data, status) {&#10;            $(&quot;.error&quot;).remove();&#10;            $('#j_username').before('&lt;p style=&quot;color: red&quot; class=&quot;error&quot;&gt;Login failed, please try again.&lt;/p&gt;');&#10;        };&#10;        $(&quot;#login&quot;).on('click', function (e) {&#10;            e.preventDefault();&#10;            $.ajax({&#10;                url: &quot;/api/login&quot;,&#10;                type: &quot;POST&quot;,&#10;                beforeSend: function (xhr) {&#10;                    xhr.withCredentials = true;&#10;                },&#10;                data: $(&quot;#loginForm&quot;).serialize(),&#10;                success: function (data, status) {&#10;                    if (data.loggedIn) {&#10;                        // success&#10;                        location.href = '/api/health';&#10;                    } else {&#10;                        loginFailed(data);&#10;                    }&#10;                },&#10;                error: loginFailed&#10;            });&#10;        });&#10;&#10;    &lt;/script&gt;&#10;&lt;/c:if&gt;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
      <option name="JSP" value="true" />
    </context>
  </template>
  <template name="logoutresource" value="package security;&#10;&#10;import javax.inject.Inject;&#10;import javax.servlet.ServletException;&#10;import javax.servlet.http.HttpServletRequest;&#10;import javax.ws.rs.*;&#10;import javax.ws.rs.core.MediaType;&#10;&#10;@Path(&quot;/logout&quot;)&#10;@Produces(MediaType.TEXT_PLAIN)&#10;public class LogoutResource {&#10;&#10;    @Inject&#10;    HttpServletRequest request;&#10;&#10;    @GET&#10;    public String getStatus() throws ServletException {&#10;        request.logout();&#10;        request.getSession().invalidate();&#10;        return &quot;OK&quot;;&#10;    }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="logincontroller" value="package security;&#10;&#10;import org.springframework.security.core.Authentication;&#10;import org.springframework.web.bind.annotation.RequestMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/login&quot;)&#10;public class LoginController {&#10;&#10;    @RequestMapping&#10;    public LoginStatus status(Authentication principal) {&#10;        return principal == null ? new LoginStatus(false, null) : new LoginStatus(true, principal.getName());&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="boot-ssl" value="server.port=8443&#10;server.ssl.key-store=classpath:ssl.keystore&#10;server.ssl.key-store-password=secret" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="MAVEN" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="basic-off" value="security.basic.enabled=false" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="login.html" value="&lt;!DOCTYPE html&gt;&#10;&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;title&gt;Login&lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&#10;&lt;h2&gt;Sign In&lt;/h2&gt;&#10;&#10;&lt;p&gt;&#10;    Please enter your username and password to login.&#10;&lt;/p&gt;&#10;&#10;&lt;p th:if=&quot;${param.error}&quot; style=&quot;color:red&quot;&gt;&#10;    Invalid username and password.&#10;&lt;/p&gt;&#10;&lt;p th:if=&quot;${param.logout}&quot; style=&quot;color: green&quot;&gt;&#10;    You have been logged out.&#10;&lt;/p&gt;&#10;&#10;&lt;form method=&quot;post&quot; id=&quot;loginForm&quot; th:action=&quot;@{/login}&quot;&gt;&#10;&#10;    &lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; placeholder=&quot;Username&quot; required=&quot;true&quot; autofocus=&quot;true&quot;/&gt;&#10;    &lt;input type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; placeholder=&quot;Password&quot; required=&quot;true&quot;/&gt;&#10;&#10;    &lt;input type=&quot;submit&quot; name=&quot;login&quot; id=&quot;login&quot; value=&quot;Login&quot;/&gt;&#10;&lt;/form&gt;&#10;&#10;&lt;/body&gt;&#10;&lt;/html&gt;&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="websecurityconfig" value="package security;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&#10;import org.springframework.security.config.annotation.web.servlet.configuration.EnableWebSecurity;&#10;&#10;@Configuration&#10;@EnableWebSecurity&#10;public class WebSecurityConfig extends WebSecurityConfigurerAdapter {&#10;    @Override&#10;    protected void configure(HttpSecurity http) throws Exception {&#10;        http&#10;            .authorizeRequests()&#10;                .antMatchers(&quot;/&quot;).permitAll()&#10;                .anyRequest().authenticated()&#10;                .and()&#10;            .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .permitAll()&#10;                .and()&#10;            .logout()&#10;                .permitAll();&#10;    }&#10;&#10;    @Autowired&#10;    public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {&#10;        auth&#10;            .inMemoryAuthentication()&#10;                .withUser(&quot;user&quot;).password(&quot;user&quot;).roles(&quot;USER&quot;);&#10;    }&#10;}&#10;" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="mvcconfig" value="package security;&#10;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.config.annotation.ViewControllerRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;public class MvcConfig extends org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter {&#10;&#10;    @java.lang.Override&#10;    public void addViewControllers(org.springframework.web.servlet.config.annotation.ViewControllerRegistry registry) {&#10;        registry.addViewController(&quot;/&quot;).setViewName(&quot;index&quot;);&#10;        registry.addViewController(&quot;/login&quot;).setViewName(&quot;login&quot;);&#10;    }&#10;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="schema.sql-shiro" value="create table if not exists users (&#10;  username varchar(256),&#10;  password varchar(256),&#10;  enabled boolean&#10;);&#10;&#10;create table if not exists user_roles (&#10;  username varchar(256),&#10;  role_name varchar(256)&#10;);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="data.sql-shiro" value="-- admin/adminjdbc&#10;insert into users values ('admin', '22f256eca1f336a97eef2b260773cb0d81d900c208ff26e94410d292d605fed8', true);&#10;insert into user_roles values ('admin', 'guest');" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="websecuritytests" value="package security;&#10;&#10;import org.junit.Test;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.boot.test.IntegrationTest;&#10;import org.springframework.boot.test.SpringApplicationConfiguration;&#10;import org.springframework.boot.test.TestRestTemplate;&#10;import org.springframework.http.*;&#10;import org.springframework.test.annotation.DirtiesContext;&#10;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#10;import org.springframework.test.context.web.WebAppConfiguration;&#10;import org.springframework.util.LinkedMultiValueMap;&#10;import org.springframework.util.MultiValueMap;&#10;&#10;import java.util.Collections;&#10;import java.util.List;&#10;import java.util.regex.Matcher;&#10;import java.util.regex.Pattern;&#10;&#10;import static org.junit.Assert.assertEquals;&#10;import static org.junit.Assert.assertTrue;&#10;&#10;/**&#10; * Basic integration tests for demo application.&#10; *&#10; * @author Dave Syer&#10; */&#10;@org.junit.runner.RunWith(valueorg.springframework.test.context.junit4.SpringJUnit4ClassRunner.class)&#10;@org.springframework.boot.test.SpringApplicationConfiguration(classes = {security.Application.class})&#10;@org.springframework.test.context.web.WebAppConfiguration&#10;@org.springframework.boot.test.IntegrationTest(value{&quot;server.port:0&quot;, &quot;server.ssl.enabled:false&quot;})&#10;@org.springframework.test.annotation.DirtiesContext&#10;public class WebSecurityTests {&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${local.server.port}&quot;)&#10;    private int port;&#10;&#10;    @org.junit.Test&#10;    public void testHome() throws java.lang.Exception {&#10;        org.springframework.http.HttpHeaders headers = new org.springframework.http.HttpHeaders();&#10;        headers.setAccept(java.util.Collections.singletonList(org.springframework.http.MediaType.TEXT_HTML));&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate().exchange(&#10;                &quot;http://localhost:&quot; + this.port, org.springframework.http.HttpMethod.GET, new org.springframework.http.HttpEntity&lt;java.lang.Void&gt;(&#10;                        headers), java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.OK, entity.getStatusCode());&#10;        assertTrue(&quot;Wrong body (title doesn't match):&#10;&quot; + entity.getBody(), entity&#10;                .getBody().contains(&quot;&lt;title&gt;Spring&quot;));&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void testLogin() throws java.lang.Exception {&#10;        org.springframework.http.HttpHeaders headers = new org.springframework.http.HttpHeaders();&#10;        headers.setAccept(java.util.Collections.singletonList(org.springframework.http.MediaType.TEXT_HTML));&#10;        org.springframework.util.MultiValueMap&lt;java.lang.String, java.lang.String&gt; form = new org.springframework.util.LinkedMultiValueMap&lt;&gt;();&#10;        form.set(&quot;username&quot;, &quot;user&quot;);&#10;        form.set(&quot;password&quot;, &quot;password&quot;);&#10;        form.set(&quot;remember-me&quot;, &quot;true&quot;);&#10;        getCsrf(form, headers);&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate().exchange(&#10;                &quot;http://localhost:&quot; + this.port + &quot;/login&quot;, org.springframework.http.HttpMethod.POST,&#10;                new org.springframework.http.HttpEntity&lt;&gt;(form, headers),&#10;                java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.FOUND, entity.getStatusCode());&#10;        java.util.List&lt;java.lang.String&gt; cookies = entity.getHeaders().get(&quot;Set-Cookie&quot;);&#10;        assertTrue(cookies.toString().contains(&quot;remember-me&quot;));&#10;        assertEquals(&quot;http://localhost:&quot; + this.port + &quot;/&quot;, entity.getHeaders()&#10;                .getLocation().toString());&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void testDenied() throws java.lang.Exception {&#10;        org.springframework.http.HttpHeaders headers = new org.springframework.http.HttpHeaders();&#10;        headers.setAccept(java.util.Collections.singletonList(org.springframework.http.MediaType.TEXT_HTML));&#10;        org.springframework.util.MultiValueMap&lt;java.lang.String, java.lang.String&gt; form = new org.springframework.util.LinkedMultiValueMap&lt;&gt;();&#10;        form.set(&quot;username&quot;, &quot;admin&quot;);&#10;        form.set(&quot;password&quot;, &quot;admin&quot;);&#10;        getCsrf(form, headers);&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate().exchange(&#10;                &quot;http://localhost:&quot; + this.port + &quot;/login&quot;, org.springframework.http.HttpMethod.POST,&#10;                new org.springframework.http.HttpEntity&lt;&gt;(form, headers),&#10;                java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.FOUND, entity.getStatusCode());&#10;        java.lang.String cookie = entity.getHeaders().getFirst(&quot;Set-Cookie&quot;);&#10;        headers.set(&quot;Cookie&quot;, cookie);&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; page = new org.springframework.boot.test.TestRestTemplate().exchange(entity.getHeaders()&#10;                        .getLocation(), org.springframework.http.HttpMethod.GET, new org.springframework.http.HttpEntity&lt;java.lang.Void&gt;(headers),&#10;                java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.OK, page.getStatusCode());&#10;        cookie = entity.getHeaders().getFirst(&quot;Set-Cookie&quot;);&#10;        assertTrue(cookie.contains(&quot;remember-me&quot;));&#10;        assertTrue(&quot;Wrong body (message doesn't match):&#10;&quot; + entity.getBody(), page&#10;                .getBody().contains(&quot;Invalid username and password&quot;));&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void testProtected() throws java.lang.Exception {&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate().getForEntity(&#10;                &quot;http://localhost:&quot; + this.port + &quot;/api/health&quot;, java.lang.String.class);&#10;        assertTrue(&quot;Wrong body (message doesn't match):&#10;&#10;&quot; + entity.getBody(), entity&#10;                .getBody().contains(&quot;Sign In&quot;));&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void testAuthorizedAccess() throws java.lang.Exception {&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate(&quot;user&quot;, &quot;user&quot;)&#10;                .getForEntity(&quot;http://localhost:&quot; + this.port + &quot;/api/health&quot;, java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.OK, entity.getStatusCode());&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void testUnauthorizedAccess() throws java.lang.Exception {&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; entity = new org.springframework.boot.test.TestRestTemplate(&quot;admin&quot;, &quot;admin&quot;)&#10;                .getForEntity(&quot;http://localhost:&quot; + this.port + &quot;/api/health&quot;, java.lang.String.class);&#10;        assertEquals(org.springframework.http.HttpStatus.OK, entity.getStatusCode());&#10;        assertTrue(&quot;Wrong body (message doesn't match):&#10;&#10;&quot; + entity.getBody(), entity&#10;                .getBody().contains(&quot;Sign In&quot;));&#10;    }&#10;&#10;    private void getCsrf(org.springframework.util.MultiValueMap&lt;java.lang.String, java.lang.String&gt; form, org.springframework.http.HttpHeaders headers) {&#10;        org.springframework.http.ResponseEntity&lt;java.lang.String&gt; page = new org.springframework.boot.test.TestRestTemplate().getForEntity(&#10;                &quot;http://localhost:&quot; + this.port + &quot;/login&quot;, java.lang.String.class);&#10;        java.lang.String cookie = page.getHeaders().getFirst(&quot;Set-Cookie&quot;);&#10;        headers.set(&quot;Cookie&quot;, cookie);&#10;        java.lang.String body = page.getBody();&#10;        java.util.regex.Matcher matcher = java.util.regex.Pattern.compile(&quot;(?s).*name=&quot;_csrf&quot;.*?value=&quot;([^&quot;]+).*&quot;)&#10;                .matcher(body);&#10;        matcher.find();&#10;        form.set(&quot;_csrf&quot;, matcher.group(1));&#10;    }&#10;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="loginstatus" value="package security;&#10;&#10;public class LoginStatus {&#10;&#10;    private final boolean loggedIn;&#10;    private final java.lang.String username;&#10;&#10;    public LoginStatus(boolean loggedIn, java.lang.String username) {&#10;        this.loggedIn = loggedIn;&#10;        this.username = username;&#10;    }&#10;&#10;    public boolean isLoggedIn() {&#10;        return loggedIn;&#10;    }&#10;&#10;    public java.lang.String getUsername() {&#10;        return username;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="spring-jdbc" value="@org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.jdbcAuthentication().dataSource(this.dataSource);&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="websecurityconfig-shiro" value="package security;&#10;&#10;import org.apache.shiro.realm.text.PropertiesRealm;&#10;import org.apache.shiro.spring.LifecycleBeanPostProcessor;&#10;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;&#10;import org.apache.shiro.web.filter.authc.AnonymousFilter;&#10;import org.apache.shiro.web.filter.authc.FormAuthenticationFilter;&#10;import org.apache.shiro.web.filter.authc.LogoutFilter;&#10;import org.apache.shiro.web.filter.authc.UserFilter;&#10;import org.apache.shiro.web.filter.authz.RolesAuthorizationFilter;&#10;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;&#10;import org.apache.shiro.web.servlet.AbstractShiroFilter;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.context.annotation.DependsOn;&#10;&#10;import javax.servlet.Filter;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;@Configuration&#10;public class WebSecurityConfig {&#10;&#10;    @Bean(name = &quot;shiroFilter&quot;)&#10;    public AbstractShiroFilter shiroFilter() throws Exception {&#10;        ShiroFilterFactoryBean shiroFilter = new ShiroFilterFactoryBean();&#10;        Map&lt;String, String&gt; filterChainDefinitionMapping = new HashMap&lt;&gt;();&#10;        filterChainDefinitionMapping.put(&quot;/api/health&quot;, &quot;authcBasic,roles[guest]&quot;);&#10;        shiroFilter.setFilterChainDefinitionMap(filterChainDefinitionMapping);&#10;        shiroFilter.setSecurityManager(securityManager());&#10;        Map&lt;String, Filter&gt; filters = new HashMap&lt;&gt;();&#10;        filters.put(&quot;anon&quot;, new AnonymousFilter());&#10;        filters.put(&quot;authc&quot;, new FormAuthenticationFilter());&#10;        LogoutFilter logoutFilter = new LogoutFilter();&#10;        logoutFilter.setRedirectUrl(&quot;/login?logout&quot;);&#10;        filters.put(&quot;roles&quot;, new RolesAuthorizationFilter());&#10;        filters.put(&quot;user&quot;, new UserFilter());&#10;        shiroFilter.setFilters(filters);&#10;        return (AbstractShiroFilter) shiroFilter.getObject();&#10;    }&#10;&#10;    @Bean(name = &quot;securityManager&quot;)&#10;    public DefaultWebSecurityManager securityManager() {&#10;        DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();&#10;        securityManager.setRealm(realm());&#10;        return securityManager;&#10;    }&#10;&#10;    @Bean(name = &quot;realm&quot;)&#10;    @DependsOn(&quot;lifecycleBeanPostProcessor&quot;)&#10;    public PropertiesRealm realm() {&#10;        PropertiesRealm propertiesRealm = new PropertiesRealm();&#10;        propertiesRealm.init();&#10;        return propertiesRealm;&#10;    }&#10;&#10;    @Bean&#10;    public static LifecycleBeanPostProcessor lifecycleBeanPostProcessor() {&#10;        return new LifecycleBeanPostProcessor();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="shiro-urls" value="filterChainDefinitionMapping.put(&quot;/login&quot;, &quot;authc&quot;);&#10;        filterChainDefinitionMapping.put(&quot;/logout&quot;, &quot;logout&quot;);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="shiro-rememberme" value="&lt;div&gt;&#10;        &lt;input type=&quot;checkbox&quot; name=&quot;rememberMe&quot; id=&quot;rememberme&quot;/&gt;&#10;        &lt;label for=&quot;rememberMe&quot;&gt;Remember me&lt;/label&gt;&#10;    &lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mysql-dep" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;mysql&lt;/groupId&gt;&#10;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&#10;            &lt;version&gt;5.1.34&lt;/version&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="shiro-logout" value="LogoutFilter logoutFilter = new LogoutFilter();&#10;        logoutFilter.setRedirectUrl(&quot;/login?logout&quot;);&#10;        filters.put(&quot;logout&quot;, logoutFilter);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="jetty-context" value="&lt;?xml version=&quot;1.0&quot;  encoding=&quot;ISO-8859-1&quot;?&gt;&#10;&lt;!DOCTYPE Configure PUBLIC &quot;-//Jetty//Configure//EN&quot; &quot;http://www.eclipse.org/jetty/configure.dtd&quot;&gt;&#10;&lt;Configure class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;&#10;&#10;    &lt;!-- configuration for WELD, as explained here: https://docs.jboss.org/weld/reference/latest/en-US/html/environments.html#_jetty --&gt;&#10;    &lt;Set name=&quot;serverClasses&quot;&gt;&#10;        &lt;Array type=&quot;java.lang.String&quot;&gt;&#10;            &lt;Item&gt;-org.eclipse.jetty.servlet.ServletContextHandler.Decorator&lt;/Item&gt;&#10;        &lt;/Array&gt;&#10;    &lt;/Set&gt;&#10;&#10;&lt;/Configure&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jetty-env" value="&lt;?xml version=&quot;1.0&quot;  encoding=&quot;ISO-8859-1&quot;?&gt;&#10;&lt;Configure id=&quot;webAppCtx&quot; class=&quot;org.eclipse.jetty.webapp.WebAppContext&quot;&gt;&#10;&#10;    &lt;!-- configuration for WELD, as explained here: https://docs.jboss.org/weld/reference/latest/en-US/html/environments.html#_jetty --&gt;&#10;    &lt;New id=&quot;BeanManager&quot; class=&quot;org.eclipse.jetty.plus.jndi.Resource&quot;&gt;&#10;        &lt;Arg&gt;&#10;            &lt;Ref id=&quot;webAppCtx&quot;/&gt;&#10;        &lt;/Arg&gt;&#10;        &lt;Arg&gt;BeanManager&lt;/Arg&gt;&#10;        &lt;Arg&gt;&#10;            &lt;New class=&quot;javax.naming.Reference&quot;&gt;&#10;                &lt;Arg&gt;javax.enterprise.inject.spi.BeanManager&lt;/Arg&gt;&#10;                &lt;Arg&gt;org.jboss.weld.resources.ManagerObjectFactory&lt;/Arg&gt;&#10;                &lt;Arg/&gt;&#10;            &lt;/New&gt;&#10;        &lt;/Arg&gt;&#10;    &lt;/New&gt;&#10;&#10;&lt;/Configure&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="jstl-dep" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;javax.servlet&lt;/groupId&gt;&#10;            &lt;artifactId&gt;jstl&lt;/artifactId&gt;&#10;            &lt;version&gt;1.2&lt;/version&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="thymeleaf-dep" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="data.sql" value="insert into users (username, password, enabled) values ('user', 'password', true);&#10;insert into authorities (username, authority) values ('user', 'ROLE_ADMIN');&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="schema.sql" value="CREATE TABLE IF NOT EXISTS users (&#10;  username VARCHAR(256),&#10;  password VARCHAR(256),&#10;  enabled  BOOLEAN&#10;);&#10;&#10;CREATE TABLE IF NOT EXISTS authorities (&#10;  username  VARCHAR(256),&#10;  authority VARCHAR(256)&#10;);&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="SQL" value="true" />
    </context>
  </template>
  <template name="shiro-login-url" value="shiroFilter.setLoginUrl(&quot;/login&quot;);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="applicationtests-shiro" value="package security;&#10;&#10;import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;&#10;import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;&#10;&#10;import org.apache.shiro.web.servlet.AbstractShiroFilter;&#10;import org.junit.Before;&#10;import org.junit.Test;&#10;import org.junit.runner.RunWith;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.boot.test.SpringApplicationConfiguration;&#10;import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;&#10;import org.springframework.test.context.web.WebAppConfiguration;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;import org.springframework.web.context.WebApplicationContext;&#10;&#10;@org.junit.runner.RunWith(SpringJUnit4ClassRunner.class)&#10;@org.springframework.boot.test.SpringApplicationConfiguration(classes = security.Application.class)&#10;@org.springframework.test.context.web.WebAppConfiguration&#10;public class ApplicationTests {&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    org.springframework.web.context.WebApplicationContext context;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    org.apache.shiro.web.servlet.AbstractShiroFilter shiroFilter;&#10;&#10;    org.springframework.test.web.servlet.MockMvc mockMvc;&#10;&#10;    @org.junit.Before&#10;    public void setup() {&#10;        mockMvc = org.springframework.test.web.servlet.setup.MockMvcBuilders&#10;                .webAppContextSetup(context)&#10;                .addFilters(shiroFilter)&#10;                .alwaysDo(print())&#10;                .build();&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void apiNeedsAuthentication() throws java.lang.Exception {&#10;        mockMvc&#10;                .perform(get(&quot;/api/health&quot;))&#10;                .andExpect(status().is3xxRedirection());&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void loginSuccess() throws java.lang.Exception {&#10;        org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder loginRequest = post(&quot;/login&quot;)&#10;                .param(&quot;username&quot;, &quot;admin&quot;)&#10;                .param(&quot;password&quot;, &quot;adminjdbc&quot;);&#10;        mockMvc&#10;                .perform(loginRequest)&#10;                .andExpect(status().is3xxRedirection());&#10;    }&#10;&#10;    @org.junit.Test&#10;    public void invalidUsernamePassword() throws java.lang.Exception {&#10;        org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder loginRequest = post(&quot;/login&quot;)&#10;                .param(&quot;username&quot;, &quot;admin&quot;)&#10;                .param(&quot;password&quot;, &quot;INVALID&quot;);&#10;        mockMvc&#10;                .perform(loginRequest)&#10;                .andExpect(status().isOk());&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="noxml-ppc" value="public org.springframework.context.support.PropertySourcesPlaceholderConfigurer properties() {&#10;        org.springframework.context.support.PropertySourcesPlaceholderConfigurer configurer = new org.springframework.context.support.PropertySourcesPlaceholderConfigurer();&#10;        configurer.setIgnoreUnresolvablePlaceholders(true);&#10;        configurer.setLocations(new org.springframework.core.io.ClassPathResource(&quot;jdbc.properties&quot;),&#10;                                new org.springframework.core.io.ClassPathResource(&quot;mail.properties&quot;),&#10;                                new org.springframework.core.io.ClassPathResource(&quot;hibernate.properties&quot;));&#10;        return configurer;&#10;    }" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-ds" value="@org.springframework.context.annotation.Bean&#10;    public org.apache.commons.dbcp.BasicDataSource dataSource() {&#10;        org.apache.commons.dbcp.BasicDataSource dataSource = new org.apache.commons.dbcp.BasicDataSource();&#10;        dataSource.setDriverClassName(driverClassName);&#10;        dataSource.setUrl(url);&#10;        dataSource.setUsername(username);&#10;        dataSource.setPassword(password);&#10;        dataSource.setMaxActive(100);&#10;        dataSource.setMaxWait(1000);&#10;        dataSource.setPoolPreparedStatements(true);&#10;        dataSource.setDefaultAutoCommit(true);&#10;        dataSource.setValidationQuery(validationQuery);&#10;        dataSource.setTestOnBorrow(true);&#10;        return dataSource;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-jdbc" value="@org.springframework.beans.factory.annotation.Value(value&quot;${jdbc.driverClassName}&quot;)&#10;    private java.lang.String driverClassName;&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${jdbc.url}&quot;)&#10;    private java.lang.String url;&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${jdbc.username}&quot;)&#10;    private java.lang.String username;&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${jdbc.password}&quot;)&#10;    private java.lang.String password;&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${jdbc.validationQuery}&quot;)&#10;    private java.lang.String validationQuery;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-pu" value="@org.springframework.context.annotation.Bean&#10;    public org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager persistenceUnitManager() {&#10;        org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager unitManager = new org.springframework.orm.jpa.persistenceunit.DefaultPersistenceUnitManager();&#10;        unitManager.setDefaultDataSource(dataSource);&#10;        return unitManager;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-em" value="@org.springframework.beans.factory.annotation.Value(value&quot;${hibernate.dialect}&quot;)&#10;    private java.lang.String hibernateDialect;&#10;&#10;    @org.springframework.beans.factory.annotation.Value(value&quot;${app.search.index.basedir}&quot;)&#10;    private java.lang.String searchBaseDir;&#10;&#10;    @org.springframework.context.annotation.Bean(name = &quot;entityManagerFactory&quot;)&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactoryBean(org.springframework.orm.jpa.persistenceunit.PersistenceUnitManager unitManager) {&#10;        org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = new org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean();&#10;        entityManagerFactoryBean.setPersistenceUnitManager(unitManager);&#10;        java.util.Properties properties = new java.util.Properties();&#10;        properties.setProperty(&quot;hibernate.dialect&quot;, hibernateDialect);&#10;        properties.setProperty(&quot;hibernate.query.substitutions&quot;, &quot;true 'Y', false 'N'&quot;);&#10;        properties.setProperty(&quot;hibernate.cache.use_second_level_cache&quot;, &quot;true&quot;);&#10;        properties.setProperty(&quot;hibernate.cache.provider_class&quot;, &quot;org.hibernate.cache.EhCacheProvider&quot;);&#10;        properties.setProperty(&quot;hibernate.search.default.indexBase&quot;, searchBaseDir);&#10;        entityManagerFactoryBean.setJpaProperties(properties);&#10;        return entityManagerFactoryBean;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-tx" value="@org.springframework.context.annotation.Bean&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public org.springframework.orm.jpa.JpaTransactionManager transactionManager(org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean entityManagerFactory) {&#10;        org.springframework.orm.jpa.JpaTransactionManager jpaTransactionManager = new org.springframework.orm.jpa.JpaTransactionManager();&#10;        jpaTransactionManager.setEntityManagerFactory(entityManagerFactory.getObject());&#10;        return jpaTransactionManager;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-ex" value="@org.springframework.context.annotation.Bean&#10;    public org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor exceptionTranslation(){&#10;        return new org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor();&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-serviceconfig" value="@Configuration&#10;@org.springframework.transaction.annotation.EnableTransactionManagement&#10;@org.springframework.context.annotation.EnableAspectJAutoProxy&#10;@org.springframework.context.annotation.ComponentScan(value&quot;com.raibledesigns.service&quot;)&#10;public class ServiceConfig {&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public com.raibledesigns.service.MailEngine mailEngine() {&#10;        com.raibledesigns.service.MailEngine mailEngine = new com.raibledesigns.service.MailEngine();&#10;        mailEngine.setVelocityEngine(velocityEngine().getObject());&#10;        mailEngine.setFrom(&quot;${mail.default.from}&quot;);&#10;        return mailEngine;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.mail.javamail.JavaMailSenderImpl mailSender(@org.springframework.beans.factory.annotation.Value(value&quot;${mail.host}&quot;) java.lang.String mailHost) {&#10;        org.springframework.mail.javamail.JavaMailSenderImpl mailSender = new org.springframework.mail.javamail.JavaMailSenderImpl();&#10;        mailSender.setHost(mailHost);&#10;        mailSender.setDefaultEncoding(&quot;UTF-8&quot;);&#10;        return mailSender;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.ui.velocity.VelocityEngineFactoryBean velocityEngine() {&#10;        org.springframework.ui.velocity.VelocityEngineFactoryBean velocityEngineFactoryBean = new org.springframework.ui.velocity.VelocityEngineFactoryBean();&#10;        java.util.Properties properties = new java.util.Properties();&#10;        properties.setProperty(&quot;resource.loader&quot;, &quot;class&quot;);&#10;        properties.setProperty(&quot;class.resource.loader.class&quot;, &quot;org.apache.velocity.runtime.resource.loader.ClasspathResourceLoader&quot;);&#10;        properties.setProperty(&quot;velocimacro.library&quot;, &quot;&quot;);&#10;        velocityEngineFactoryBean.setVelocityProperties(properties);&#10;        return velocityEngineFactoryBean;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    @org.springframework.context.annotation.Scope(value&quot;prototype&quot;)&#10;    public org.springframework.mail.SimpleMailMessage mailMessage() {&#10;        org.springframework.mail.SimpleMailMessage mailMessage = new org.springframework.mail.SimpleMailMessage();&#10;        mailMessage.setFrom(&quot;${mail.default.from}&quot;);&#10;        return mailMessage;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordEncoder() {&#10;        return new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean(name = &quot;passwordTokenEncoder&quot;)&#10;    public org.springframework.security.crypto.password.PasswordEncoder passwordTokenEncoder() {&#10;        return new org.springframework.security.crypto.password.StandardPasswordEncoder();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true" useStaticImport="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-security" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.configuration.EnableWebSecurity&#10;public class SecurityConfig extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private com.raibledesigns.dao.UserDao userDao;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    private org.springframework.security.crypto.password.PasswordEncoder passwordEncoder;&#10;&#10;    @org.springframework.beans.factory.annotation.Autowired&#10;    public void configureGlobal(org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder auth) throws java.lang.Exception {&#10;        auth.userDetailsService(userDao)&#10;            .passwordEncoder(passwordEncoder);&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void configure(org.springframework.security.config.annotation.web.builders.WebSecurity web) throws java.lang.Exception {&#10;        web.ignoring()&#10;                .antMatchers(&quot;/images/**&quot;)&#10;                .antMatchers(&quot;/styles/**&quot;)&#10;                .antMatchers(&quot;/scripts/**&quot;)&#10;                .antMatchers(&quot;/assets/**&quot;);&#10;    }&#10;&#10;    @java.lang.Override&#10;    protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;            .csrf()&#10;            .disable()&#10;            .headers()&#10;            .frameOptions()&#10;            .disable()&#10;            .authorizeRequests()&#10;            .antMatchers(&quot;/app/admin/**&quot;).hasAuthority(&quot;ROLE_ADMIN&quot;)&#10;            .antMatchers(&quot;/app/passwordHint*&quot;).permitAll()&#10;            .antMatchers(&quot;/app/requestRecoveryToken*&quot;).permitAll()&#10;            .antMatchers(&quot;/app/updatePassword*&quot;).permitAll()&#10;            .antMatchers(&quot;/app/signup*&quot;).permitAll()&#10;            .antMatchers(&quot;/app/**&quot;).hasAnyAuthority(&quot;ROLE_ADMIN&quot;,&quot;ROLE_USER&quot;)&#10;        .and()&#10;            .formLogin()&#10;                .loginPage(&quot;/login&quot;)&#10;                .usernameParameter(&quot;j_username&quot;)&#10;                .passwordParameter(&quot;j_password&quot;)&#10;                .loginProcessingUrl(&quot;/j_security_check&quot;)&#10;                .failureUrl(&quot;/login?error=true&quot;)&#10;        .and()&#10;            .rememberMe()&#10;                .userDetailsService(userDao)&#10;                .key(&quot;e37f4b31-0c45-11dd-bd0b-0800200c9a66&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-web" value="public class WebAppInitializer implements org.springframework.web.WebApplicationInitializer {&#10;&#10;    @java.lang.Override&#10;    public void onStartup(javax.servlet.ServletContext container) throws javax.servlet.ServletException {&#10;        container.setInitParameter(&quot;javax.servlet.jsp.jstl.fmt.localizationContext&quot;, &quot;ApplicationResources&quot;);&#10;        container.setInitParameter(&quot;javax.servlet.jsp.jstl.fmt.fallbackLocale&quot;, &quot;en&quot;);&#10;        container.setInitParameter(&quot;contextClass&quot;, &quot;org.springframework.web.context.support.AnnotationConfigWebApplicationContext&quot;);&#10;        container.setInitParameter(&quot;contextConfigLocation&quot;,&#10;                &quot;com.raibledesigns.config.ResourcesConfig,com.raibledesigns.config.JpaConfig,&quot; +&#10;                &quot;com.raibledesigns.config.ServiceConfig,com.raibledesigns.config.SecurityConfig&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic encodingFilter = container.addFilter(&quot;encodingFilter&quot;, org.springframework.web.filter.CharacterEncodingFilter.class);&#10;        encodingFilter.setInitParameter(&quot;encoding&quot;, &quot;UTF-8&quot;);&#10;        encodingFilter.setInitParameter(&quot;forceEncoding&quot;, &quot;true&quot;);&#10;        encodingFilter.addMappingForUrlPatterns(null, false, &quot;/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic exportFilter = container.addFilter(&quot;exportFilter&quot;, org.displaytag.filter.ResponseOverrideFilter.class);&#10;        exportFilter.addMappingForUrlPatterns(null, false, &quot;/app/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic localeFilter = container.addFilter(&quot;localeFilter&quot;, com.raibledesigns.webapp.filter.LocaleFilter.class);&#10;        localeFilter.addMappingForUrlPatterns(null, false, &quot;/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic rewriteFilter = container.addFilter(&quot;rewriteFilter&quot;, org.tuckey.web.filters.urlrewrite.UrlRewriteFilter.class);&#10;        rewriteFilter.setInitParameter(&quot;logLevel&quot;, &quot;commons&quot;);&#10;        rewriteFilter.setInitParameter(&quot;confReloadCheckInterval&quot;, &quot;-1&quot;);&#10;        rewriteFilter.addMappingForUrlPatterns(null, false, &quot;/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic securityFilter = container.addFilter(&quot;securityFilter&quot;, org.springframework.web.filter.DelegatingFilterProxy.class);&#10;        securityFilter.setInitParameter(&quot;targetBeanName&quot;, &quot;springSecurityFilterChain&quot;);&#10;        securityFilter.addMappingForUrlPatterns(java.util.EnumSet.of(&#10;                javax.servlet.DispatcherType.REQUEST, javax.servlet.DispatcherType.FORWARD, javax.servlet.DispatcherType.INCLUDE), false, &quot;/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic sitemeshFilter = container.addFilter(&quot;sitemeshFilter&quot;, com.opensymphony.sitemesh.webapp.SiteMeshFilter.class);&#10;        sitemeshFilter.addMappingForUrlPatterns(java.util.EnumSet.of(&#10;                javax.servlet.DispatcherType.REQUEST, javax.servlet.DispatcherType.FORWARD), false, &quot;/*&quot;);&#10;&#10;        javax.servlet.FilterRegistration.Dynamic wroFilter = container.addFilter(&quot;wroFilter&quot;, ro.isdc.wro.http.WroFilter.class);&#10;        wroFilter.addMappingForUrlPatterns(java.util.EnumSet.of(&#10;                javax.servlet.DispatcherType.REQUEST, javax.servlet.DispatcherType.FORWARD), false, &quot;/assets/*&quot;);&#10;&#10;        javax.servlet.ServletRegistration.Dynamic cxfServlet = container.addServlet(&quot;CXFServlet&quot;, org.apache.cxf.transport.servlet.CXFServlet.class);&#10;        cxfServlet.addMapping(&quot;/services/*&quot;);&#10;&#10;        container.addListener(org.springframework.web.context.ContextLoaderListener.class);&#10;        container.addListener(com.raibledesigns.webapp.listener.StartupListener.class);&#10;        container.addListener(com.raibledesigns.webapp.listener.UserCounterListener.class);&#10;        container.addListener(com.raibledesigns.webapp.jsp.EscapeXmlELResolverListener.class);&#10;        container.addListener(net.sf.navigator.menu.MenuContextListener.class);&#10;&#10;        org.springframework.web.context.support.XmlWebApplicationContext appContext = new org.springframework.web.context.support.XmlWebApplicationContext();&#10;        appContext.setConfigLocation(&quot;/WEB-INF/dispatcher-servlet.xml&quot;);&#10;&#10;        javax.servlet.ServletRegistration.Dynamic dispatcher =&#10;                container.addServlet(&quot;dispatcher&quot;, new org.springframework.web.servlet.DispatcherServlet(appContext));&#10;        dispatcher.setLoadOnStartup(1);&#10;        dispatcher.addMapping(&quot;/app/*&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-webconfig" value="@org.springframework.context.annotation.Configuration&#10;@org.springframework.web.servlet.config.annotation.EnableWebMvc&#10;@org.springframework.context.annotation.ComponentScan(value&quot;com.raibledesigns.webapp&quot;)&#10;public class WebConfig extends org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter {&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.web.servlet.handler.SimpleMappingExceptionResolver exceptionResolver() {&#10;        org.springframework.web.servlet.handler.SimpleMappingExceptionResolver exceptionResolver = new org.springframework.web.servlet.handler.SimpleMappingExceptionResolver();&#10;&#10;        java.util.Properties exceptionMappings = new java.util.Properties();&#10;        exceptionMappings.put(&quot;org.springframework.dao.DataAccessException&quot;, &quot;dataAccessFailure&quot;);&#10;        exceptionResolver.setExceptionMappings(exceptionMappings);&#10;&#10;        return exceptionResolver;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.web.multipart.MultipartResolver multipartResolver() {&#10;        org.springframework.web.multipart.commons.CommonsMultipartResolver multipartResolver = new org.springframework.web.multipart.commons.CommonsMultipartResolver();&#10;        multipartResolver.setMaxUploadSize(2097152);&#10;        return multipartResolver;&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.context.support.ResourceBundleMessageSource messageSource() {&#10;        org.springframework.context.support.ResourceBundleMessageSource messageSource = new org.springframework.context.support.ResourceBundleMessageSource();&#10;        messageSource.setBasename(&quot;ApplicationResources&quot;);&#10;        messageSource.setUseCodeAsDefaultMessage(true);&#10;        return messageSource;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void addViewControllers(org.springframework.web.servlet.config.annotation.ViewControllerRegistry registry) {&#10;        registry.addViewController(&quot;/admin/activeUsers&quot;).setViewName(&quot;admin/activeUsers&quot;);&#10;        registry.addViewController(&quot;/home&quot;).setViewName(&quot;home&quot;);&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.web.servlet.ViewResolver viewResolver() {&#10;        org.springframework.web.servlet.view.InternalResourceViewResolver viewResolver = new org.springframework.web.servlet.view.InternalResourceViewResolver();&#10;        viewResolver.setRequestContextAttribute(&quot;rc&quot;);&#10;        viewResolver.setViewClass(org.springframework.web.servlet.view.JstlView.class);&#10;        viewResolver.setPrefix(&quot;/WEB-INF/pages/&quot;);&#10;        viewResolver.setSuffix(&quot;*.jsp&quot;);&#10;        return viewResolver;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="noxml-boot" value="@org.springframework.context.annotation.ComponentScan&#10;@org.springframework.boot.autoconfigure.EnableAutoConfiguration&#10;public class Application {&#10;    public static void main(java.lang.String[] args) {&#10;        org.springframework.context.ApplicationContext ctx = org.springframework.boot.SpringApplication.run(com.raibledesigns.Application.class, args);&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="spring-passwordEncoder" value="passwordEncoder(new org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder()" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="COMPLETION" value="false" />
      <option name="JAVA_CODE" value="true" />
      <option name="JAVA_COMMENT" value="false" />
      <option name="JAVA_DECLARATION" value="false" />
      <option name="JAVA_EXPRESSION" value="false" />
      <option name="JAVA_STATEMENT" value="false" />
      <option name="JAVA_STRING" value="false" />
    </context>
  </template>
  <template name="login-ajax-spring" value="&lt;script src=&quot;https://code.jquery.com/jquery-2.1.4.min.js&quot;&gt;&lt;/script&gt;&#10;&lt;script type=&quot;text/javascript&quot;&gt;&#10;    var loginFailed = function (data, status) {&#10;        $(&quot;.error&quot;).remove();&#10;        $('#j_username').before('&lt;p style=&quot;color: red&quot; class=&quot;error&quot;&gt;Login failed, please try again.&lt;/p&gt;');&#10;    };&#10;    $(&quot;#login&quot;).on('click', function (e) {&#10;        e.preventDefault();&#10;        $.ajax({&#10;            url: &quot;/api/login&quot;,&#10;            type: &quot;GET&quot;,&#10;            beforeSend: function (xhr) {&#10;                var basic = btoa($(&quot;#username&quot;).val() + &quot;:&quot; + $(&quot;#password&quot;).val());&#10;                xhr.withCredentials = true;&#10;                xhr.setRequestHeader (&quot;Authorization&quot;, &quot;Basic &quot; + basic);&#10;            },&#10;            success: function (data, status) {&#10;                if (data.loggedIn) {&#10;                    // success&#10;                    location.href = '/api/health';&#10;                } else {&#10;                    loginFailed(data);&#10;                }&#10;            },&#10;            error: loginFailed&#10;        });&#10;    });&#10;&lt;/script&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-search" value="&lt;h2&gt;Search&lt;/h2&gt;&#10;&lt;form&gt;&#10;  &lt;input type=&quot;search&quot; name=&quot;query&quot; [(ngModel)]=&quot;query&quot; (keyup.enter)=&quot;search()&quot;&gt;&#10;  &lt;button type=&quot;button&quot; (click)=&quot;search()&quot;&gt;Search&lt;/button&gt;&#10;&lt;/form&gt;&#10;&lt;pre&gt;{{searchResults | json}}&lt;/pre&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-search.ts" value="import { Component, OnInit } from '@angular/core';&#10;&#10;@Component({&#10;  selector: 'app-search',&#10;  templateUrl: './search.component.html',&#10;  styleUrls: ['./search.component.css']&#10;})&#10;export class SearchComponent implements OnInit {&#10;  query: string;&#10;  searchResults: any;&#10;&#10;  constructor() {&#10;    console.log('initialized search component');&#10;  }&#10;&#10;  ngOnInit() {&#10;  }&#10;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-styles" value="styleUrls: ['./app/+search/components/search.component.css']," description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-css" value=":host {&#10;  display: block;&#10;  padding: 0 20px;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="ng-data" value="[&#10;  {&#10;    &quot;id&quot;: 1,&#10;    &quot;name&quot;: &quot;Peyton Manning&quot;,&#10;    &quot;phone&quot;: &quot;(303) 567-8910&quot;,&#10;    &quot;address&quot;: {&#10;      &quot;street&quot;: &quot;1234 Main Street&quot;,&#10;      &quot;city&quot;: &quot;Greenwood Village&quot;,&#10;      &quot;state&quot;: &quot;CO&quot;,&#10;      &quot;zip&quot;: &quot;80111&quot;&#10;    }&#10;  },&#10;  {&#10;    &quot;id&quot;: 2,&#10;    &quot;name&quot;: &quot;Demaryius Thomas&quot;,&#10;    &quot;phone&quot;: &quot;(720) 213-9876&quot;,&#10;    &quot;address&quot;: {&#10;      &quot;street&quot;: &quot;5555 Marion Street&quot;,&#10;      &quot;city&quot;: &quot;Denver&quot;,&#10;      &quot;state&quot;: &quot;CO&quot;,&#10;      &quot;zip&quot;: &quot;80202&quot;&#10;    }&#10;  },&#10;  {&#10;    &quot;id&quot;: 3,&#10;    &quot;name&quot;: &quot;Von Miller&quot;,&#10;    &quot;phone&quot;: &quot;(917) 323-2333&quot;,&#10;    &quot;address&quot;: {&#10;      &quot;street&quot;: &quot;14 Mountain Way&quot;,&#10;      &quot;city&quot;: &quot;Vail&quot;,&#10;      &quot;state&quot;: &quot;CO&quot;,&#10;      &quot;zip&quot;: &quot;81657&quot;&#10;    }&#10;  }&#10;]&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="ng-service" value="import { Injectable } from '@angular/core';&#10;import { Http, Response } from '@angular/http';&#10;&#10;@Injectable()&#10;export class SearchService {&#10;  constructor(private http:Http) {&#10;  }&#10;&#10;  getAll() {&#10;    return this.http.get('assets/data/people.json').map((res:Response) =&gt; res.json());&#10;  }&#10;}&#10;&#10;export class Address {&#10;  street:string;&#10;  city:string;&#10;  state:string;&#10;  zip:string;&#10;&#10;  constructor(obj?:any) {&#10;    this.street = obj &amp;&amp; obj.street || null;&#10;    this.city = obj &amp;&amp; obj.city || null;&#10;    this.state = obj &amp;&amp; obj.state || null;&#10;    this.zip = obj &amp;&amp; obj.zip || null;&#10;  }&#10;}&#10;&#10;export class Person {&#10;  id:number;&#10;  name:string;&#10;  phone:string;&#10;  address:Address;&#10;&#10;  constructor(obj?:any) {&#10;    this.id = obj &amp;&amp; Number(obj.id) || null;&#10;    this.name = obj &amp;&amp; obj.name || null;&#10;    this.phone = obj &amp;&amp; obj.phone || null;&#10;    this.address = obj &amp;&amp; obj.address || null;&#10;  }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-service-import" value="import { Person, SearchService } from '../shared/index';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-auto-search" value="sub: Subscription;&#10;&#10;  constructor(private searchService: SearchService, private router: Router, private route: ActivatedRoute) {&#10;    this.sub = this.route.params.subscribe(params =&gt; {&#10;      if (params['term']) {&#10;        this.query = decodeURIComponent(params['term']);&#10;        this.search();&#10;      }&#10;    });&#10;  }&#10;  &#10;  ngOnDestroy() {&#10;    this.sub.unsubscribe();&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-search.ts-typed" value="public searchService: SearchService" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-getAll" value="search(): void {&#10;    this.searchService.getAll().subscribe(&#10;      data =&gt; {this.searchResults = data;},&#10;      error =&gt; console.log(error)&#10;    );&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-import-http" value="import { HTTP_PROVIDERS } from '@angular/http';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-import-map" value="import 'rxjs/add/operator/map';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-table" value="&lt;table *ngIf=&quot;searchResults&quot;&gt;&#10;  &lt;thead&gt;&#10;  &lt;tr&gt;&#10;    &lt;th&gt;Name&lt;/th&gt;&#10;    &lt;th&gt;Phone&lt;/th&gt;&#10;    &lt;th&gt;Address&lt;/th&gt;&#10;  &lt;/tr&gt;&#10;  &lt;/thead&gt;&#10;  &lt;tbody&gt;&#10;  &lt;tr *ngFor=&quot;let person of searchResults; let i=index&quot;&gt;&#10;    &lt;td&gt;{{person.name}}&lt;/td&gt;&#10;    &lt;td&gt;{{person.phone}}&lt;/td&gt;&#10;    &lt;td&gt;{{person.address.street}}&lt;br/&gt;&#10;      {{person.address.city}}, {{person.address.state}} {{person.address.zip}}&#10;    &lt;/td&gt;&#10;  &lt;/tr&gt;&#10;  &lt;/tbody&gt;&#10;&lt;/table&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-css2" value="table {&#10;  margin-top: 10px;&#10;  border-collapse: collapse;&#10;}&#10;&#10;th {&#10;  text-align: left;&#10;  border-bottom: 2px solid #ddd;&#10;  padding: 8px;&#10;}&#10;&#10;td {&#10;  border-top: 1px solid #ddd;&#10;  padding: 8px;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="ng-service-search" value="search(q:string): Observable&lt;any&gt; {&#10;    if (!q || q === '*') {&#10;      q = '';&#10;    } else {&#10;      q = q.toLowerCase();&#10;    }&#10;    return this.getAll().map(data =&gt; {&#10;      const results = [];&#10;      data.map(item =&gt; {&#10;        if (JSON.stringify(item).toLowerCase().includes(q)) {&#10;          results.push(item);&#10;        }&#10;      });&#10;      return results;&#10;    });&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-mock-service" value="import { SpyObject } from './helper';&#10;import { SearchService } from '../search.service';&#10;import Spy = jasmine.Spy;&#10;&#10;export class MockSearchService extends SpyObject {&#10;  getAllSpy: Spy;&#10;  getByIdSpy: Spy;&#10;  searchSpy: Spy;&#10;  saveSpy: Spy;&#10;  fakeResponse: any;&#10;&#10;  constructor() {&#10;    super( SearchService );&#10;&#10;    this.fakeResponse = null;&#10;    this.getAllSpy = this.spy('getAll').andReturn(this);&#10;    this.getByIdSpy = this.spy('get').andReturn(this);&#10;    this.searchSpy = this.spy('search').andReturn(this);&#10;    this.saveSpy = this.spy('save').andReturn(this);&#10;  }&#10;&#10;  subscribe(callback: any) {&#10;    callback(this.fakeResponse);&#10;  }&#10;&#10;  setResponse(json: any): void {&#10;    this.fakeResponse = json;&#10;  }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-mock-routes" value="import { ActivatedRoute, Params } from '@angular/router';&#10;import { Observable } from 'rxjs';&#10;&#10;export class MockActivatedRoute extends ActivatedRoute {&#10;  params: Observable&lt;Params&gt;;&#10;&#10;  constructor(parameters?: { [key: string]: any }) {&#10;    super();&#10;    this.params = Observable.of(parameters);&#10;  }&#10;}&#10;&#10;export class MockRouter {&#10;  navigate = jasmine.createSpy('navigate');&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-search-testbed" value="  let mockSearchService: MockSearchService;&#10;  let mockActivatedRoute: MockActivatedRoute;&#10;  let mockRouter: MockRouter;&#10;&#10;  beforeEach(() =&gt; {&#10;    mockSearchService = new MockSearchService();&#10;    mockActivatedRoute = new MockActivatedRoute({'term': 'peyton'});&#10;    mockRouter = new MockRouter();&#10;&#10;    TestBed.configureTestingModule({&#10;      declarations: [SearchComponent],&#10;      providers: [&#10;        {provide: SearchService, useValue: mockSearchService},&#10;        {provide: ActivatedRoute, useValue: mockActivatedRoute},&#10;        {provide: Router, useValue: mockRouter}&#10;      ],&#10;      imports: [FormsModule, RouterTestingModule]&#10;    });&#10;  });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-search-tests" value="  it('should search when a term is set and search() is called', () =&gt; {&#10;    component.query = 'M';&#10;    component.search();&#10;    expect(mockSearchService.searchSpy).toHaveBeenCalledWith('M');&#10;  });&#10;&#10;  it('should search automatically when a term is on the URL', () =&gt; {&#10;    fixture.detectChanges();&#10;    expect(mockSearchService.searchSpy).toHaveBeenCalledWith('peyton');&#10;  });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-app-e2e" value="it('should have correct nav text for About', () =&gt; {&#10;    expect(element(by.css('sd-app sd-navbar nav a:nth-child(2)')).getText()).toEqual('ABOUT');&#10;  });&#10;&#10;  it('should have correct nav text for Search', () =&gt; {&#10;    expect(element(by.css('sd-app sd-navbar nav a:last-child')).getText()).toEqual('SEARCH');&#10;  });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-search-e2e" value="import { browser, by, element } from 'protractor';&#10;&#10;describe('Search', () =&gt; {&#10;&#10;  beforeEach(() =&gt; {&#10;    browser.get('/search');&#10;  });&#10;&#10;  it('should have an input and search button', () =&gt; {&#10;    expect(element(by.css('app-root app-search form input')).isPresent()).toEqual(true);&#10;    expect(element(by.css('app-root app-search form button')).isPresent()).toEqual(true);&#10;  });&#10;&#10;  it('should allow searching', () =&gt; {&#10;    const searchButton = element(by.css('button'));&#10;    const searchBox = element(by.css('input'));&#10;    searchBox.sendKeys('M');&#10;    searchButton.click().then(() =&gt; {&#10;      const list = element.all(by.css('app-search table tbody tr'));&#10;      expect(list.count()).toBe(3);&#10;    });&#10;  });&#10;});&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="adoc-text" value="Hello world is one of the ways to get started with a new programming language." description="" toReformat="true" toShortenFQNames="true" />
  <template name="adoc-code" value="[source,html]&#10;.src/main/webapp/index.html&#10;----&#10;include::{sourcedir}/index.html[]&#10;----" description="" toReformat="true" toShortenFQNames="true" />
  <template name="ng-link" value="&lt;nav&gt;&#10;  &lt;a routerLink=&quot;/search&quot; routerLinkActive=&quot;active&quot;&gt;Search&lt;/a&gt;&#10;&lt;/nav&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-mock-helper" value="/// &lt;reference path=&quot;../../../../../node_modules/@types/jasmine/index.d.ts&quot;‌​/&gt;&#10;&#10;export interface GuinessCompatibleSpy extends jasmine.Spy {&#10;  /** By chaining the spy with and.returnValue, all calls to the function will return a specific&#10;   * value. */&#10;  andReturn(val: any): void;&#10;  /** By chaining the spy with and.callFake, all calls to the spy will delegate to the supplied&#10;   * function. */&#10;  andCallFake(fn: Function): GuinessCompatibleSpy;&#10;  /** removes all recorded calls */&#10;  reset();&#10;}&#10;&#10;export class SpyObject {&#10;  static stub(object = null, config = null, overrides = null) {&#10;    if (!(object instanceof SpyObject)) {&#10;      overrides = config;&#10;      config = object;&#10;      object = new SpyObject();&#10;    }&#10;&#10;    const m = {};&#10;    Object.keys(config).forEach((key) =&gt; m[key] = config[key]);&#10;    Object.keys(overrides).forEach((key) =&gt; m[key] = overrides[key]);&#10;    for (let key in m) {&#10;      object.spy(key).andReturn(m[key]);&#10;    }&#10;    return object;&#10;  }&#10;&#10;  constructor(type = null) {&#10;    if (type) {&#10;      for (let prop in type.prototype) {&#10;        let m = null;&#10;        try {&#10;          m = type.prototype[prop];&#10;        } catch (e) {&#10;          // As we are creating spys for abstract classes,&#10;          // these classes might have getters that throw when they are accessed.&#10;          // As we are only auto creating spys for methods, this&#10;          // should not matter.&#10;        }&#10;        if (typeof m === 'function') {&#10;          this.spy(prop);&#10;        }&#10;      }&#10;    }&#10;  }&#10;&#10;  spy(name) {&#10;    if (!this[name]) {&#10;      this[name] = this._createGuinnessCompatibleSpy(name);&#10;    }&#10;    return this[name];&#10;  }&#10;&#10;  prop(name, value) { this[name] = value; }&#10;&#10;  /** @internal */&#10;  _createGuinnessCompatibleSpy(name): GuinessCompatibleSpy {&#10;    const newSpy: GuinessCompatibleSpy = &lt;any&gt;jasmine.createSpy(name);&#10;    newSpy.andCallFake = &lt;any&gt;newSpy.and.callFake;&#10;    newSpy.andReturn = &lt;any&gt;newSpy.and.returnValue;&#10;    newSpy.reset = &lt;any&gt;newSpy.calls.reset;&#10;    // revisit return null here (previously needed for rtts_assert).&#10;    newSpy.and.returnValue(null);&#10;    return newSpy;&#10;  }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-export" value="export * from './search/search.service';&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-service-tests" value="it('should retrieve all search results',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res: Response;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;name&quot;: &quot;John Elway&quot;}, {&quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.getAll().subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('John Elway');&#10;    }))&#10;  );&#10;&#10;  it('should filter by search term',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;name&quot;: &quot;John Elway&quot;}, {&quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.search('john').subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('John Elway');&#10;    }))&#10;  );&#10;&#10;  it('should fetch by id',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;id&quot;: 1, &quot;name&quot;: &quot;John Elway&quot;}, {&quot;id&quot;: 2, &quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.search('2').subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('Gary Kubiak');&#10;    }))&#10;  );" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-routes" value="const routes: Routes = [&#10;  { path: '', redirectTo: '/$name$-list', pathMatch: 'full' },&#10;  {&#10;    path: '$name$-list',&#10;    component: $capName$ListComponent&#10;  },&#10;  {&#10;    path: '$name$-add',&#10;    component: $capName$EditComponent&#10;  },&#10;  {&#10;    path: '$name$-edit/:id',&#10;    component: $capName$EditComponent&#10;  }&#10;];" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="capName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-edit-link" value="&lt;td&gt;&lt;a [routerLink]=&quot;['/edit', person.id]&quot;&gt;{{person.name}}&lt;/a&gt;&lt;/td&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ng-onselect" value="onSelect(person: Person) {&#10;    this.router.navigate(['/edit', person.id]);&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-edit-form" value="&lt;div *ngIf=&quot;person&quot;&gt;&#10;  &lt;h3&gt;{{editName}}&lt;/h3&gt;&#10;  &lt;div&gt;&#10;    &lt;label&gt;Id:&lt;/label&gt;&#10;    {{person.id}}&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;    &lt;label&gt;Name:&lt;/label&gt;&#10;    &lt;input [(ngModel)]=&quot;editName&quot; name=&quot;name&quot; id=&quot;name&quot; placeholder=&quot;name&quot;/&gt;&#10;  &lt;/div&gt;&#10;  &lt;div&gt;&#10;    &lt;label&gt;Phone:&lt;/label&gt;&#10;    &lt;input [(ngModel)]=&quot;editPhone&quot; name=&quot;phone&quot; id=&quot;phone&quot; placeholder=&quot;Phone&quot;/&gt;&#10;  &lt;/div&gt;&#10;  &lt;fieldset&gt;&#10;    &lt;legend&gt;Address:&lt;/legend&gt;&#10;    &lt;address&gt;&#10;      &lt;input [(ngModel)]=&quot;editAddress.street&quot; id=&quot;street&quot;&gt;&lt;br/&gt;&#10;      &lt;input [(ngModel)]=&quot;editAddress.city&quot; id=&quot;city&quot;&gt;,&#10;      &lt;input [(ngModel)]=&quot;editAddress.state&quot; id=&quot;state&quot; size=&quot;2&quot;&gt;&#10;      &lt;input [(ngModel)]=&quot;editAddress.zip&quot; id=&quot;zip&quot; size=&quot;5&quot;&gt;&#10;    &lt;/address&gt;&#10;  &lt;/fieldset&gt;&#10;  &lt;button (click)=&quot;save()&quot; id=&quot;save&quot;&gt;Save&lt;/button&gt;&#10;  &lt;button (click)=&quot;cancel()&quot; id=&quot;cancel&quot;&gt;Cancel&lt;/button&gt;&#10;&lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML" value="true" />
    </context>
  </template>
  <template name="ng-edit" value="import { Component, OnDestroy, OnInit } from '@angular/core';&#10;import { Subscription } from 'rxjs';&#10;import { ActivatedRoute, Router } from '@angular/router';&#10;import { CarService } from '../shared/car/car.service';&#10;import { GiphyService } from '../shared/giphy/giphy.service';&#10;import { NgForm } from '@angular/forms';&#10;&#10;@Component({&#10;  selector: 'app-car-edit',&#10;  templateUrl: './car-edit.component.html',&#10;  styleUrls: ['./car-edit.component.css']&#10;})&#10;export class CarEditComponent implements OnInit, OnDestroy {&#10;  car: any = {};&#10;&#10;  sub: Subscription;&#10;&#10;  constructor(private route: ActivatedRoute,&#10;              private router: Router,&#10;              private carService: CarService,&#10;              private giphyService: GiphyService) {&#10;  }&#10;&#10;  ngOnInit() {&#10;    this.sub = this.route.params.subscribe(params =&gt; {&#10;      const id = params.id;&#10;      if (id) {&#10;        this.carService.get(id).subscribe((car: any) =&gt; {&#10;          if (car) {&#10;            this.car = car;&#10;            this.car.href = car._links.self.href;&#10;            this.giphyService.get(car.name).subscribe(url =&gt; car.giphyUrl = url);&#10;          } else {&#10;            console.log(`Car with id '${id}' not found, returning to list`);&#10;            this.gotoList();&#10;          }&#10;        });&#10;      }&#10;    });&#10;  }&#10;&#10;  ngOnDestroy() {&#10;    this.sub.unsubscribe();&#10;  }&#10;&#10;  gotoList() {&#10;    this.router.navigate(['/car-list']);&#10;  }&#10;&#10;  save(form: NgForm) {&#10;    this.carService.save(form).subscribe(result =&gt; {&#10;      this.gotoList();&#10;    }, error =&gt; console.error(error));&#10;  }&#10;&#10;  remove(href) {&#10;    this.carService.remove(href).subscribe(result =&gt; {&#10;      this.gotoList();&#10;    }, error =&gt; console.error(error));&#10;  }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-localstorage" value="search(q: string): Observable&lt;any&gt; {&#10;  if (!q || q === '*') {&#10;    q = '';&#10;  } else {&#10;    q = q.toLowerCase();&#10;  }&#10;  return this.getAll().map(data =&gt; {&#10;    const results: any = [];&#10;    data.map(item =&gt; {&#10;      // check for item in localStorage&#10;      if (localStorage['person' + item.id]) {&#10;        item = JSON.parse(localStorage['person' + item.id]);&#10;      }&#10;      if (JSON.stringify(item).toLowerCase().includes(q)) {&#10;        results.push(item);&#10;      }&#10;    });&#10;    return results;&#10;  });&#10;}&#10;&#10;get(id: number) {&#10;  return this.getAll().map(all =&gt; {&#10;    if (localStorage['person' + id]) {&#10;      return JSON.parse(localStorage['person' + id]);&#10;    }&#10;    return all.find(e =&gt; e.id === id);&#10;  });&#10;}&#10;&#10;save(person: Person) {&#10;  localStorage['person' + person.id] = JSON.stringify(person);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-edit-css" value=":host {&#10;  display: block;&#10;  padding: 0 20px;&#10;}&#10;&#10;button {&#10;  margin-top: 10px;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS" value="true" />
    </context>
  </template>
  <template name="ng-edit-testbed" value="let mockSearchService: MockSearchService;&#10;    let mockActivatedRoute: MockActivatedRoute;&#10;    let mockRouter: MockRouter;&#10;&#10;    beforeEach(() =&gt; {&#10;      mockSearchService = new MockSearchService();&#10;      mockActivatedRoute = new MockActivatedRoute({'id': 1});&#10;      mockRouter = new MockRouter();&#10;&#10;      TestBed.configureTestingModule({&#10;        declarations: [EditComponent],&#10;        providers: [&#10;          {provide: SearchService, useValue: mockSearchService},&#10;          {provide: ActivatedRoute, useValue: mockActivatedRoute},&#10;          {provide: Router, useValue: mockRouter}&#10;        ],&#10;        imports: [FormsModule]&#10;      });&#10;    });&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-edit-tests" value="  it('should fetch a single record', () =&gt; {&#10;    fixture = TestBed.createComponent(EditComponent);&#10;&#10;    const person = {name: 'Emmanuel Sanders', address: {city: 'Denver'}};&#10;    mockSearchService.setResponse(person);&#10;&#10;    fixture.detectChanges();&#10;    // verify service was called&#10;    expect(mockSearchService.getByIdSpy).toHaveBeenCalledWith(1);&#10;&#10;    // verify data was set on component when initialized&#10;    const editComponent = fixture.debugElement.componentInstance;&#10;    expect(editComponent.editAddress.city).toBe('Denver');&#10;&#10;    // verify HTML renders as expected&#10;    const compiled = fixture.debugElement.nativeElement;&#10;    expect(compiled.querySelector('h3').innerHTML).toBe('Emmanuel Sanders');&#10;  });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-edit-e2e" value="import { browser, by, element } from 'protractor';&#10;&#10;describe('Edit', () =&gt; {&#10;&#10;  beforeEach(() =&gt; {&#10;    browser.get('/edit/1');&#10;  });&#10;&#10;  const name = element(by.id('name'));&#10;  const street = element(by.id('street'));&#10;  const city = element(by.id('city'));&#10;&#10;  it('should allow viewing a person', () =&gt; {&#10;    expect(element(by.css('h3')).getText()).toEqual('Peyton Manning');&#10;    expect(name.getAttribute('value')).toEqual('Peyton Manning');&#10;    expect(street.getAttribute('value')).toEqual('1234 Main Street');&#10;    expect(city.getAttribute('value')).toEqual('Greenwood Village');&#10;  });&#10;&#10;  it('should allow updating a name', function () {&#10;    const save = element(by.id('save'));&#10;    name.sendKeys(' Won!');&#10;    save.click();&#10;    // verify one element matched this change&#10;    const list = element.all(by.css('app-search table tbody tr'));&#10;    expect(list.count()).toBe(1);&#10;  });&#10;});&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-travis" value="os:&#10;  - linux&#10;services:&#10;  - docker&#10;language: node_js&#10;node_js:&#10;  - &quot;6.10.0&quot;&#10;addons:&#10;  apt:&#10;    sources:&#10;    - google-chrome&#10;    packages:&#10;    - google-chrome-stable&#10;cache:&#10;  yarn: true&#10;  directories:&#10;    - $HOME/.yarn-cache&#10;    - node_modules&#10;branches:&#10;  only:&#10;  - master&#10;before_install:&#10;  - export CHROME_BIN=/usr/bin/google-chrome&#10;  - export DISPLAY=:99.0&#10;  - sh -e /etc/init.d/xvfb start&#10;  # Repo for Yarn&#10;  - curl -o- -L https://yarnpkg.com/install.sh | bash&#10;  - export PATH=$HOME/.yarn/bin:$PATH&#10;  - yarn global add @angular/cli&#10;install:&#10;  - yarn install&#10;script:&#10;  - ng test --watch false&#10;  - ng e2e&#10;notifications:&#10;  webhooks:&#10;    on_success: change&#10;    on_failure: always&#10;    on_start: false" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-service-testbed" value="{&#10;          provide: Http, useFactory: (backend: ConnectionBackend, defaultOptions: BaseRequestOptions) =&gt; {&#10;          return new Http(backend, defaultOptions);&#10;        }, deps: [MockBackend, BaseRequestOptions]&#10;        },&#10;        {provide: MockBackend, useClass: MockBackend},&#10;        {provide: BaseRequestOptions, useClass: BaseRequestOptions}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-test-getall" value="it('should retrieve all search results',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res: Response;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;name&quot;: &quot;John Elway&quot;}, {&quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.getAll().subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('John Elway');&#10;    }))&#10;  );" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-test-search" value="it('should filter by search term',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;name&quot;: &quot;John Elway&quot;}, {&quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.search('john').subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('John Elway');&#10;    }))&#10;  );&#10;&#10;  it('should fetch by id',&#10;    inject([SearchService, MockBackend], fakeAsync((searchService: SearchService, mockBackend: MockBackend) =&gt; {&#10;      let res;&#10;      mockBackend.connections.subscribe(c =&gt; {&#10;        expect(c.request.url).toBe('assets/data/people.json');&#10;        const response = new ResponseOptions({body: '[{&quot;id&quot;: 1, &quot;name&quot;: &quot;John Elway&quot;}, {&quot;id&quot;: 2, &quot;name&quot;: &quot;Gary Kubiak&quot;}]'});&#10;        c.mockRespond(new Response(response));&#10;      });&#10;      searchService.search('2').subscribe((response) =&gt; {&#10;        res = response;&#10;      });&#10;      tick();&#10;      expect(res[0].name).toBe('Gary Kubiak');&#10;    }))&#10;  );" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="adoc-slide" value="== $SELECTION$&#10;&#10;[.cue]&#10;****&#10;include::{uri-script}[tag=$SELECTION$]&#10;****" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="AsciiDoc" value="true" />
    </context>
  </template>
  <template name="ng-jenkins" value="node {&#10;    def nodeHome = tool name: 'node-6.9.5', type: 'jenkins.plugins.nodejs.tools.NodeJSInstallation'&#10;    env.PATH = &quot;${nodeHome}/bin:${env.PATH}&quot;&#10;&#10;    stage('check tools') {&#10;        sh &quot;node -v&quot;&#10;        sh &quot;npm -v&quot;&#10;    }&#10;&#10;    stage('checkout') {&#10;        checkout scm&#10;    }&#10;&#10;    stage('npm install') {&#10;        sh &quot;npm install&quot;&#10;    }&#10;&#10;    stage('unit tests') {&#10;        sh &quot;ng test --watch false&quot;&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-jenkins-e2e" value="stage('protractor tests') {&#10;    sh &quot;npm run e2e&quot;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-jenkins-heroku" value="stage('deploying') {&#10;    sh '''&#10;    # exit 1 on errors&#10;    set -e&#10;&#10;    # deal with remote&#10;    echo &quot;Checking if remote exists...&quot;&#10;    if ! git ls-remote heroku; then&#10;      echo &quot;Adding heroku remote...&quot;&#10;      git remote add heroku https://git.heroku.com/$heroku_app_name$.git&#10;    fi&#10;&#10;    # push only origin/master to heroku/master - will do nothing if&#10;    # master doesn't change.&#10;    echo &quot;Updating heroku master branch...&quot;&#10;    git push heroku origin/master:master&#10;    '''&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="heroku_app_name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-http-provider" value="{&#10;          provide: Http, useFactory: (backend: ConnectionBackend, defaultOptions: BaseRequestOptions) =&gt; {&#10;          return new Http(backend, defaultOptions);&#10;        },&#10;          deps: [MockBackend, BaseRequestOptions]&#10;        },&#10;        {provide: MockBackend, useClass: MockBackend},&#10;        {provide: BaseRequestOptions, useClass: BaseRequestOptions}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-prepost" value="&quot;preinstall&quot;: &quot;npm install -g http-server-spa&quot;,&#10;&quot;postinstall&quot;: &quot;ng build -prod --aot&quot;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-sw" value="let log = console.log.bind(console);&#10;let err = console.error.bind(console);&#10;&#10;self.addEventListener('install', (e) =&gt; {&#10;  e.waitUntil(self.skipWaiting());&#10;  log('Service Worker: Installed');&#10;});&#10;&#10;self.addEventListener('activate', (e) =&gt; {&#10;  e.waitUntil(self.clients.claim());&#10;  log('Service Worker: Active');&#10;});&#10;&#10;self.addEventListener('fetch', (e) =&gt; {&#10;  log('Service Worker: Fetch');&#10;});&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ng-sw-script" value="  &lt;script defer&gt;&#10;    if (navigator.serviceWorker) {&#10;      navigator.serviceWorker.register('sw.js').then(() =&gt; {&#10;        console.log('Service worker installed')&#10;    }, err =&gt; {&#10;        console.error('Service worker error:', err);&#10;      });&#10;    }&#10;  &lt;/script&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="security-cache-disable" value="http.headers().cacheControl().disable();" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ng-giphy-service" value="import { Injectable } from '@angular/core';&#10;import { HttpClient } from '@angular/common/http';&#10;import { map } from 'rxjs/operators';&#10;&#10;@Injectable({&#10;  providedIn: 'root'&#10;})&#10;export class GiphyService {&#10;&#10;  // This is a Giphy API Key I created. Create your own at https://developers.giphy.com/dashboard/?create=true.&#10;  giphyApi = '//api.giphy.com/v1/gifs/search?api_key=nOTRbUNMgD5mj4XowN2ERoPNudAkK6ft&amp;limit=1&amp;q=';&#10;&#10;  constructor(public http: HttpClient) {&#10;  }&#10;&#10;  get(searchTerm) {&#10;    const apiLink = this.giphyApi + searchTerm;&#10;    return this.http.get(apiLink).pipe(map((response: any) =&gt; {&#10;      if (response.data.length &gt; 0) {&#10;        return response.data[0].images.original.url;&#10;      } else {&#10;        return 'https://media.giphy.com/media/YaOxRsmrv9IeA/giphy.gif'; // dancing cat for 404&#10;      }&#10;    }));&#10;  }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-giphy-foreach" value="for (const $item$ of this.$item$s) {&#10;          this.giphyService.get($item$.name).subscribe(url =&gt; $item$.giphyUrl = url);&#10;        }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="ng-material-app" value="&lt;mat-toolbar color=&quot;primary&quot;&gt;&#10;  &lt;span&gt;Welcome to {{title}}!&lt;/span&gt;&#10;&lt;/mat-toolbar&gt;&#10;&#10;&lt;app-$item$-list&gt;&lt;/app-$item$-list&gt;&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-material-list" value="&lt;mat-list&gt;&#10;  &lt;mat-list-item *ngFor=&quot;let $item$ of $item$s&quot;&gt;&#10;    &lt;img mat-list-avatar src=&quot;{{$item$.giphyUrl}}&quot; alt=&quot;{{$item$.name}}&quot;&gt;&#10;    &lt;h3 mat-line&gt;{{$item$.name}}&lt;/h3&gt;&#10;  &lt;/mat-list-item&gt;&#10;&lt;/mat-list&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-manifest" value="{&#10;    &quot;name&quot;: &quot;PWA $item$s&quot;,&#10;    &quot;short_name&quot;: &quot;$item$s&quot;,&#10;    &quot;icons&quot;: [&#10;        {&#10;            &quot;src&quot;: &quot;android-chrome-192x192.png&quot;,&#10;            &quot;sizes&quot;: &quot;192x192&quot;,&#10;            &quot;type&quot;: &quot;image/png&quot;&#10;        },&#10;        {&#10;            &quot;src&quot;: &quot;android-chrome-512x512.png&quot;,&#10;            &quot;sizes&quot;: &quot;512x512&quot;,&#10;            &quot;type&quot;: &quot;image/png&quot;&#10;        }&#10;    ],&#10;    &quot;theme_color&quot;: &quot;#ffffff&quot;,&#10;    &quot;background_color&quot;: &quot;#ffa500&quot;,&#10;    &quot;display&quot;: &quot;standalone&quot;,&#10;    &quot;start_url&quot;: &quot;index.html&quot;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ng-style" value="@import '~@angular/material/core/theming/prebuilt/indigo-pink.css';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="sp-config" value="export function stormpathConfig(): StormpathConfiguration {&#10;  let spConfig: StormpathConfiguration = new StormpathConfiguration();&#10;  spConfig.endpointPrefix = '$endpointPrefix$';&#10;  spConfig.autoAuthorizedUris.push(new RegExp(spConfig.endpointPrefix + '/*'));&#10;  return spConfig;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpointPrefix" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sp-login" value="&lt;sp-authport&gt;&lt;/sp-authport&gt;&#10;&#10;&lt;div *ngIf=&quot;(user$ | async)&quot;&gt;&#10;  &lt;h2&gt;&#10;    Welcome, {{ ( user$ | async ).fullName }}&#10;  &lt;/h2&gt;&#10;  &lt;a href=&quot;&quot; (click)=&quot;logout(); false&quot;&gt;Logout&lt;/a&gt;&#10;&lt;/div&gt;&#10;&lt;div [hidden]=&quot;!(user$ | async)&quot;&gt;&#10;&lt;!-- secure components or &lt;router-outlet&gt;&lt;/router-outlet&gt; --&gt;&#10;&lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="boot-add" value="// Top beers from https://www.beeradvocate.com/lists/us&#10;Stream.of(&quot;Kentucky Brunch Brand Stout&quot;, &quot;Marshmallow Handjee&quot;, &quot;Barrel-Aged Abraxas&quot;,&#10;        &quot;Hunahpu's Imperial Stout&quot;, &quot;King Julius&quot;, &quot;Heady Topper&quot;,&#10;        &quot;Budweiser&quot;, &quot;Coors Light&quot;, &quot;PBR&quot;).forEach(name -&gt;&#10;        repository.save(new Beer(name))&#10;);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="boot-good" value="@GetMapping(&quot;/good-beers&quot;)&#10;public Collection&lt;Beer&gt; goodBeers() {&#10;&#10;    return repository.findAll().stream()&#10;            .filter(this::isGreat)&#10;            .collect(Collectors.toList());&#10;}&#10;&#10;    private boolean isGreat(Beer beer) {&#10;        return !beer.getName().equals(&quot;Budweiser&quot;) &amp;&amp;&#10;            !beer.getName().equals(&quot;Coors Light&quot;) &amp;&amp;&#10;            !beer.getName().equals(&quot;PBR&quot;);&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="io-logout" value="&lt;ion-buttons end&gt;&#10;      &lt;button ion-button icon-only (click)=&quot;logout()&quot;&gt;&#10;        Logout&#10;      &lt;/button&gt;&#10;    &lt;/ion-buttons&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-username" value="&lt;p *ngIf=&quot;(user$ | async)&quot;&gt;&#10;    You are logged in as: &lt;b&gt;{{ ( user$ | async ).fullName }}&lt;/b&gt;&#10;  &lt;/p&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-app" value="constructor(platform: Platform, private stormpath: Stormpath) {&#10;    stormpath.user$.subscribe(user =&gt; {&#10;      if (!user) {&#10;        this.rootPage = LoginPage;&#10;      } else {&#10;        this.rootPage = TabsPage;&#10;      }&#10;    });&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-home" value="user$: Observable&lt;Account | boolean&gt;;&#10;&#10;  constructor(private stormpath: Stormpath) {&#10;    this.user$ = this.stormpath.user$;&#10;  }&#10;&#10;  logout(): void {&#10;    this.stormpath.logout();&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="io-keyboard" value="&lt;preference name=&quot;KeyboardDisplayRequiresUserAction&quot; value=&quot;false&quot;/&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
    </context>
  </template>
  <template name="io-beer-service" value="import { Injectable } from '@angular/core';&#10;import { Http, Response } from '@angular/http';&#10;import 'rxjs/add/operator/map';&#10;import 'rxjs/add/operator/catch';&#10;import { Observable } from 'rxjs';&#10;&#10;@Injectable()&#10;export class BeerService {&#10;  public API = 'http://localhost:8080';&#10;  public BEER_API = this.API + '/beers';&#10;&#10;  constructor(public http: Http) {}&#10;&#10;  getGoodBeers(): Observable&lt;any&gt; {&#10;    return this.http.get(this.API + '/good-beers')&#10;      .map((response: Response) =&gt; response.json());&#10;  }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-beer-list" value="&lt;ion-list&gt;&#10;    &lt;ion-item *ngFor=&quot;let beer of beers&quot; &gt;&#10;      &lt;h2&gt;{{beer.name}}&lt;/h2&gt;&#10;    &lt;/ion-item&gt;&#10;  &lt;/ion-list&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-avatar" value="&lt;ion-avatar item-left&gt;&#10;      &lt;img src=&quot;{{beer.giphyUrl}}&quot;&gt;&#10;    &lt;/ion-avatar&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-open-modal" value="&lt;ion-buttons end&gt;&#10;      &lt;button ion-button icon-only (click)=&quot;openModal()&quot; color=&quot;primary&quot;&gt;&#10;        &lt;ion-icon name=&quot;add-circle&quot;&gt;&lt;/ion-icon&gt;&#10;        &lt;ion-icon name=&quot;beer&quot;&gt;&lt;/ion-icon&gt;&#10;      &lt;/button&gt;&#10;    &lt;/ion-buttons&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-open-modal-ts" value="openModal(beerId) {&#10;    let modal = this.modalCtrl.create(BeerModalPage, beerId);&#10;    modal.present();&#10;    // refresh data after modal dismissed&#10;    modal.onDidDismiss(() =&gt; this.ionViewDidLoad())&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-beer-modal" value="import { BeerService } from '../../providers/beer-service';&#10;import { Component, ViewChild } from '@angular/core';&#10;import { GiphyService } from '../../providers/giphy-service';&#10;import { NavParams, ViewController, ToastController, NavController } from 'ionic-angular';&#10;import { NgForm } from '@angular/forms';&#10;&#10;@Component({&#10;  templateUrl: './beer-modal.html'&#10;})&#10;export class BeerModalPage {&#10;  @ViewChild('name') name;&#10;  beer: any = {};&#10;  error: any;&#10;&#10;  constructor(public beerService: BeerService,&#10;              public giphyService: GiphyService,&#10;              public params: NavParams,&#10;              public viewCtrl: ViewController,&#10;              public toastCtrl: ToastController,&#10;              public navCtrl: NavController) {&#10;    if (this.params.data.id) {&#10;      this.beerService.get(this.params.get('id')).subscribe(beer =&gt; {&#10;        this.beer = beer;&#10;        this.beer.href = beer._links.self.href;&#10;        this.giphyService.get(beer.name).subscribe(url =&gt; beer.giphyUrl = url);&#10;      });&#10;    }&#10;  }&#10;&#10;  dismiss() {&#10;    this.viewCtrl.dismiss();&#10;  }&#10;&#10;  save(form: NgForm) {&#10;    let update: boolean = form['href'];&#10;    this.beerService.save(form).subscribe(result =&gt; {&#10;      let toast = this.toastCtrl.create({&#10;        message: 'Beer &quot;' + form.name + '&quot; ' + ((update) ? 'updated' : 'added') + '.',&#10;        duration: 2000&#10;      });&#10;      toast.present();&#10;      this.dismiss();&#10;    }, error =&gt; this.error = error)&#10;  }&#10;&#10;  ionViewDidLoad() {&#10;    setTimeout(() =&gt; {&#10;      this.name.setFocus();&#10;    },150);&#10;  }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-beer-modal-html" value="&lt;ion-header&gt;&#10;  &lt;ion-toolbar&gt;&#10;    &lt;ion-title&gt;&#10;      {{beer ? 'Beer Details' : 'Add Beer'}}&#10;    &lt;/ion-title&gt;&#10;    &lt;ion-buttons start&gt;&#10;      &lt;button ion-button (click)=&quot;dismiss()&quot;&gt;&#10;        &lt;span ion-text color=&quot;primary&quot; showWhen=&quot;ios,core&quot;&gt;Cancel&lt;/span&gt;&#10;        &lt;ion-icon name=&quot;md-close&quot; showWhen=&quot;android,windows&quot;&gt;&lt;/ion-icon&gt;&#10;      &lt;/button&gt;&#10;    &lt;/ion-buttons&gt;&#10;  &lt;/ion-toolbar&gt;&#10;&lt;/ion-header&gt;&#10;&lt;ion-content padding&gt;&#10;  &lt;form #beerForm=&quot;ngForm&quot; (ngSubmit)=&quot;save(beerForm.value)&quot;&gt;&#10;    &lt;input type=&quot;hidden&quot; name=&quot;href&quot; [(ngModel)]=&quot;beer.href&quot;&gt;&#10;    &lt;ion-row&gt;&#10;      &lt;ion-col&gt;&#10;        &lt;ion-list inset&gt;&#10;          &lt;ion-item&gt;&#10;            &lt;ion-input placeholder=&quot;Beer Name&quot; name=&quot;name&quot; type=&quot;text&quot;&#10;                       required [(ngModel)]=&quot;beer.name&quot; #name&gt;&lt;/ion-input&gt;&#10;          &lt;/ion-item&gt;&#10;        &lt;/ion-list&gt;&#10;      &lt;/ion-col&gt;&#10;    &lt;/ion-row&gt;&#10;    &lt;ion-row&gt;&#10;      &lt;ion-col *ngIf=&quot;beer&quot; text-center&gt;&#10;        &lt;img src=&quot;{{beer.giphyUrl}}&quot;&gt;&#10;      &lt;/ion-col&gt;&#10;    &lt;/ion-row&gt;&#10;    &lt;ion-row&gt;&#10;      &lt;ion-col&gt;&#10;        &lt;div *ngIf=&quot;error&quot; class=&quot;alert alert-danger&quot;&gt;{{error}}&lt;/div&gt;&#10;        &lt;button ion-button color=&quot;primary&quot; full type=&quot;submit&quot;&#10;                [disabled]=&quot;!beerForm.form.valid&quot;&gt;Save&lt;/button&gt;&#10;      &lt;/ion-col&gt;&#10;    &lt;/ion-row&gt;&#10;  &lt;/form&gt;&#10;&lt;/ion-content&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-get-save" value="get(id: string) {&#10;  return this.http.get(this.BEER_API + '/' + id)&#10;    .map((response: Response) =&gt; response.json());&#10;}&#10;&#10;save(beer: any): Observable&lt;any&gt; {&#10;  let result: Observable&lt;Response&gt;;&#10;  if (beer['href']) {&#10;    result = this.http.put(beer.href, beer);&#10;  } else {&#10;    result = this.http.post(this.BEER_API, beer)&#10;  }&#10;  return result.map((response: Response) =&gt; response.json())&#10;    .catch(error =&gt; Observable.throw(error));&#10;}&#10;&#10;remove(id: string) {&#10;    return this.http.delete(this.BEER_API + '/' + id)&#10;      .map((response: Response) =&gt; response.json());&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-swipe" value="&lt;ion-item-sliding *ngFor=&quot;let beer of beers&quot; &gt;&#10;      &lt;ion-item (click)=&quot;openModal({id: beer.id})&quot;&gt;&#10;        &lt;ion-avatar item-left&gt;&#10;          &lt;img src=&quot;{{beer.giphyUrl}}&quot;&gt;&#10;        &lt;/ion-avatar&gt;&#10;        &lt;h2&gt;{{beer.name}}&lt;/h2&gt;&#10;      &lt;/ion-item&gt;&#10;      &lt;ion-item-options&gt;&#10;        &lt;button ion-button color=&quot;danger&quot; (click)=&quot;remove(beer)&quot;&gt;&lt;ion-icon name=&quot;trash&quot;&gt;&lt;/ion-icon&gt; Delete&lt;/button&gt;&#10;      &lt;/ion-item-options&gt;&#10;    &lt;/ion-item-sliding&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="io-remove" value="remove(beer) {&#10;  this.beerService.remove(beer.id).subscribe(response =&gt; {&#10;    for (let i = 0; i &lt; this.beers.length; i++) {&#10;      if (this.beers[i] === beer) {&#10;        this.beers.splice(i, 1);&#10;        let toast = this.toastCtrl.create({&#10;          message: 'Beer &quot;' + beer.name + '&quot; deleted.',&#10;          duration: 2000,&#10;          position: 'top'&#10;        });&#10;        toast.present();&#10;      }&#10;    }&#10;  });&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="io-get-good-beers" value="this.beerService.getGoodBeers().subscribe(data =&gt; {&#10;      this.beers = data;&#10;    });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="sp-bootstrap" value="&lt;link rel=&quot;stylesheet&quot; href=&quot;https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="sp-maven-zuul" value=" &lt;dependency&gt;&#10;            &lt;groupId&gt;com.stormpath.spring&lt;/groupId&gt;&#10;            &lt;artifactId&gt;stormpath-zuul-spring-cloud-starter&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="sp-maven-bom" value="&lt;dependency&gt;&#10;                &lt;groupId&gt;com.stormpath.sdk&lt;/groupId&gt;&#10;                &lt;artifactId&gt;stormpath-bom&lt;/artifactId&gt;&#10;                &lt;version&gt;2.0.0-okta-rc3&lt;/version&gt;&#10;                &lt;type&gt;pom&lt;/type&gt;&#10;                &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-material-styles" value="@import &quot;~@angular/material/prebuilt-themes/indigo-pink.css&quot;;&#10;@import '~https://fonts.googleapis.com/icon?family=Material+Icons';&#10;&#10;body {&#10;  margin: 0;&#10;  font-family: Roboto, sans-serif;&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="sp-maven-boot" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;com.stormpath.spring&lt;/groupId&gt;&#10;            &lt;artifactId&gt;stormpath-default-spring-boot-starter&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="adoc.text" value="Asciidoctor and Gradle lets you to write a book that can be published as HTML, PDF, EPUB, MOBI, and print!&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="AsciiDoc" value="true" />
    </context>
  </template>
  <template name="adoc.code" value="[source,html]&#10;----&#10;include::{sourcedir}/../../main/webapp/index.html[]&#10;----&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="AsciiDoc" value="true" />
    </context>
  </template>
  <template name="ng-sw-cache" value="let log = console.log.bind(console);&#10;let err = console.error.bind(console);&#10;&#10;let version = '1';&#10;let cacheName = 'pwa-client-v' + version;&#10;let dataCacheName = 'pwa-client-data-v' + version;&#10;let appShellFilesToCache = [&#10;  './',&#10;  './index.html',&#10;  './inline.bundle.js',&#10;  './styles.bundle.js',&#10;  './vendor.bundle.js',&#10;  './main.bundle.js'&#10;];&#10;&#10;self.addEventListener('install', (e) =&gt; {&#10;  e.waitUntil(self.skipWaiting());&#10;  log('Service Worker: Installed');&#10;&#10;  e.waitUntil(&#10;    caches.open(cacheName).then((cache) =&gt; {&#10;      log('Service Worker: Caching App Shell');&#10;      return cache.addAll(appShellFilesToCache);&#10;    })&#10;  );&#10;});&#10;&#10;self.addEventListener('activate', (e) =&gt; {&#10;  e.waitUntil(self.clients.claim());&#10;  log('Service Worker: Active');&#10;&#10;  e.waitUntil(&#10;    caches.keys().then((keyList) =&gt; {&#10;      return Promise.all(keyList.map((key) =&gt; {&#10;&#10;        if (key !== cacheName) {&#10;          log('Service Worker: Removing old cache', key);&#10;          return caches.delete(key);&#10;        }&#10;&#10;      }));&#10;    })&#10;  );&#10;});&#10;&#10;self.addEventListener('fetch', (e) =&gt; {&#10;  log('Service Worker: Fetch URL ', e.request.url);&#10;&#10;  // Match requests for data and handle them separately&#10;  e.respondWith(&#10;    caches.match(e.request.clone()).then((response) =&gt; {&#10;      return response || fetch(e.request.clone()).then((r2) =&gt; {&#10;          return caches.open(dataCacheName).then((cache) =&gt; {&#10;            console.log('Service Worker: Fetched &amp; Cached URL ', e.request.url);&#10;            cache.put(e.request.url, r2.clone());&#10;            return r2.clone();&#10;          });&#10;        });&#10;    })&#10;  );&#10;});&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="ng-material-module" value="import { MdListModule, MdProgressBarModule, MdToolbarModule } from '@angular/material';&#10;import { NgModule } from '@angular/core';&#10;&#10;@NgModule({&#10;  imports: [MdListModule, MdProgressBarModule, MdToolbarModule],&#10;  exports: [MdListModule, MdProgressBarModule, MdToolbarModule],&#10;})&#10;export class AppMaterialModule { }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-service" value="import { Injectable } from '@angular/core';&#10;import * as OktaSignIn from '@okta/okta-signin-widget/dist/js/okta-sign-in.min.js'&#10;import { ReplaySubject } from 'rxjs/ReplaySubject';&#10;import { Observable } from 'rxjs/Observable';&#10;&#10;@Injectable()&#10;export class OktaAuthService {&#10;&#10;  signIn = new OktaSignIn({&#10;    baseUrl: 'https://dev-158606.oktapreview.com',&#10;    clientId: '0oac85oh5p2VqZJ7c0h7',&#10;    authParams: {&#10;      issuer: 'https://dev-158606.oktapreview.com',&#10;      responseType: ['id_token', 'token'],&#10;      scopes: ['openid', 'email', 'profile']&#10;    }&#10;  });&#10;&#10;  public user$: Observable&lt;any&gt;;&#10;  public userSource: ReplaySubject&lt;any&gt;;&#10;&#10;  constructor() {&#10;    this.userSource = new ReplaySubject&lt;any&gt;(1);&#10;    this.user$ = this.userSource.asObservable();&#10;  }&#10;&#10;  isAuthenticated() {&#10;    // Checks if there is a current accessToken in the TokenManger.&#10;    return !!this.signIn.tokenManager.get('accessToken');&#10;  }&#10;&#10;  login() {&#10;    // Launches the widget and stores the tokens.&#10;    this.signIn.renderEl({el: '#okta-signin-container'}, response =&gt; {&#10;      if (response.status === 'SUCCESS') {&#10;        response.forEach(token =&gt; {&#10;          if (token.idToken) {&#10;            this.signIn.tokenManager.add('idToken', token);&#10;          }&#10;          if (token.accessToken) {&#10;            this.signIn.tokenManager.add('accessToken', token);&#10;          }&#10;          this.userSource.next(this.idTokenAsUser);&#10;          this.signIn.hide();&#10;        });&#10;      } else {&#10;        console.error(response);&#10;      }&#10;    });&#10;  }&#10;&#10;  get idTokenAsUser() {&#10;    const token = this.signIn.tokenManager.get('idToken');&#10;    return {&#10;      name: token.claims.name,&#10;      email: token.claims.email,&#10;      username: token.claims.preferred_username&#10;    }&#10;  }&#10;&#10;  async logout() {&#10;    // Terminates the session with Okta and removes current tokens.&#10;    this.signIn.tokenManager.clear();&#10;    await this.signIn.signOut();&#10;    this.signIn.remove();&#10;    this.userSource.next(undefined);&#10;  }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-css" value="@import '~https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.1.0/css/okta-sign-in.min.css';&#10;@import '~https://ok1static.oktacdn.com/assets/js/sdk/okta-signin-widget/2.1.0/css/okta-theme.css';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="okta-login" value="&lt;!-- Container to inject the Sign-In Widget --&gt;&#10;&lt;div id=&quot;okta-signin-container&quot;&gt;&lt;/div&gt;&#10;&#10;&lt;div *ngIf=&quot;user&quot;&gt;&#10;  &lt;h2&gt;&#10;    Welcome {{user?.name}}!&#10;  &lt;/h2&gt;&#10;&#10;  &lt;button mat-raised-button (click)=&quot;oktaService.logout()&quot;&gt;Logout&lt;/button&gt;&#10;&lt;/div&gt;&#10;&lt;div [hidden]=&quot;!user&quot;&gt;&#10;  &lt;app-beer-list&gt;&lt;/app-beer-list&gt;&#10;&lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="okta-headers" value="const headers: Headers = new Headers();&#10;    if (this.oktaService.isAuthenticated()) {&#10;      const accessToken = this.oktaService.signIn.tokenManager.get('accessToken');&#10;      headers.append('Authorization', accessToken.tokenType + ' ' + accessToken.accessToken);&#10;    }&#10;    const options = new RequestOptions({ headers: headers });" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-oninit" value="user;&#10;&#10;  constructor(public oktaService: OktaAuthService, private changeDetectorRef: ChangeDetectorRef) {&#10;  }&#10;&#10;  ngOnInit() {&#10;    // 1. for initial load and browser refresh&#10;    if (this.oktaService.isAuthenticated()) {&#10;      this.user = this.oktaService.idTokenAsUser;&#10;    } else {&#10;      this.oktaService.login();&#10;    }&#10;&#10;    // 2. register a listener for authentication and logout&#10;    this.oktaService.user$.subscribe(user =&gt; {&#10;      this.user = user;&#10;      if (!user) {&#10;        this.oktaService.login();&#10;      }&#10;      // Let Angular know that model changed.&#10;      // See https://github.com/okta/okta-signin-widget/issues/268 for more info.&#10;      this.changeDetectorRef.detectChanges();&#10;    });&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-maven-boot" value=" &lt;dependency&gt;&#10;            &lt;groupId&gt;com.okta.spring&lt;/groupId&gt;&#10;            &lt;artifactId&gt;okta-spring-boot-starter&lt;/artifactId&gt;&#10;            &lt;version&gt;$version$&lt;/version&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="version" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="spring-oauth2" value="&lt;dependency&gt;&#10;  &lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;&#10;  &lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;&#10;  &lt;version&gt;$version$.RELEASE&lt;/version&gt;&#10;&lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="version" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="cf-manifest" value="---&#10;applications:&#10;&#10;- name: beer-server&#10;  host: beer-server&#10;  path: ./server/target/demo-0.0.1-SNAPSHOT.jar&#10;  env :&#10;    FORCE_HTTPS: true&#10;&#10;- name: beer-client&#10;  host: beer-client&#10;  path: ./client/dist/&#10;  env :&#10;    FORCE_HTTPS: true" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="OTHER" value="true" />
    </context>
  </template>
  <template name="cf-build" value="#!/bin/bash&#10;&#10;&#10;&#10;# set origin for client on server&#10;sed -i -e &quot;s|http://localhost:4200|https://beer-server.cfapps.io|g&quot; $start/server/src/main/java/com/okta/developer/demo/DemoApplication.java&#10;&#10;mvn clean package -f $start/server/pom.xml&#10;&#10;cd $start/client&#10;rm -rf dist&#10;# set API URL&#10;sed -i -e &quot;s|http://localhost:8080|https://beer-server.cfapps.io|g&quot; $start/client/src/app/shared/beer/beer.service.ts&#10;# set redirectURI to client URI&#10;sed -i -e &quot;s|http://localhost:4200|https://beer-client.cfapps.io|g&quot; $start/client/src/app/shared/okta/okta.service.ts&#10;yarn &amp;&amp; ng build -prod --aot&#10;touch dist/Staticfile&#10;# enable pushstate so no 404s on refresh&#10;echo 'pushstate: enabled' &gt; dist/Staticfile&#10;&#10;cd $start&#10;cf push&#10;&#10;# reset and remove changed files&#10;git checkout $start&#10;rm -rf $start/server/src/main/java/com/okta/developer/demo/DemoApplication.java-e&#10;rm -rf $start/client/src/app/shared/beer/beer.service.ts-e&#10;rm -rf $start/client/src/app/shared/okta/okta.service.ts-e" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="okta-oauth2" value="okta.oauth2.issuer=https://dev-737523.oktapreview.com/oauth2/default&#10;okta.oauth2.clientId=0oafx05pu2pxhjgkC0h7" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="cors-filter" value="@org.springframework.context.annotation.Bean&#10;public org.springframework.boot.web.servlet.FilterRegistrationBean&lt;org.springframework.web.filter.CorsFilter&gt; simpleCorsFilter() {&#10;    org.springframework.web.cors.UrlBasedCorsConfigurationSource source = new org.springframework.web.cors.UrlBasedCorsConfigurationSource();&#10;    org.springframework.web.cors.CorsConfiguration config = new org.springframework.web.cors.CorsConfiguration();&#10;    config.setAllowCredentials(true);&#10;    config.setAllowedOrigins(java.util.Collections.singletonList(&quot;http://localhost:$port$&quot;));&#10;    config.setAllowedMethods(java.util.Collections.singletonList(&quot;*&quot;));&#10;    config.setAllowedHeaders(java.util.Collections.singletonList(&quot;*&quot;));&#10;    source.registerCorsConfiguration(&quot;/**&quot;, config);&#10;    org.springframework.boot.web.servlet.FilterRegistrationBean&lt;org.springframework.web.filter.CorsFilter&gt; bean = new org.springframework.boot.web.servlet.FilterRegistrationBean&lt;&gt;(new org.springframework.web.filter.CorsFilter(source));&#10;    bean.setOrder(org.springframework.core.Ordered.HIGHEST_PRECEDENCE);&#10;    return bean;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="port" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="okta-config" value="const config = {&#10;  issuer: 'https://dev-737523.oktapreview.com/oauth2/default',&#10;  redirectUri: 'http://localhost:4200/implicit/callback',&#10;  clientId: '0oagqzcu86BBOq2jF0h7'&#10;};" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-headers2" value="const headers: Headers = new Headers();&#10;    if (this.oktaAuth.isAuthenticated()) {&#10;      const accessToken = this.oktaAuth.getAccessToken();&#10;      headers.append('Authorization', accessToken.tokenType + ' ' + accessToken.accessToken);&#10;    }&#10;    const options = new RequestOptions({headers: headers});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="okta-login-btn" value="&lt;router-outlet&gt;&lt;/router-outlet&gt;&#10;&#10;&lt;button mat-raised-button color=&quot;accent&quot; *ngIf=&quot;!oktaAuth.isAuthenticated()&quot; &#10;        (click)=&quot;oktaAuth.loginRedirect()&quot;&gt;Login&lt;/button&gt;&#10;&lt;button mat-button *ngIf=&quot;oktaAuth.isAuthenticated()&quot; &#10;        (click)=&quot;oktaAuth.logout()&quot;&gt;Logout&lt;/button&gt;&#10;        &#10;&lt;div *ngIf=&quot;oktaAuth.isAuthenticated()&quot;&gt;&#10;  &lt;app-$item$-list&gt;&lt;/app-$item$-list&gt;&#10;&lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="item" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="kors-filter" value="    @Bean&#10;    fun simpleCorsFilter(): FilterRegistrationBean&lt;CorsFilter&gt; {&#10;        val source = UrlBasedCorsConfigurationSource()&#10;        val config = CorsConfiguration()&#10;        config.allowCredentials = true&#10;        config.allowedOrigins = listOf(&quot;http://localhost:4200&quot;)&#10;        config.allowedMethods = listOf(&quot;*&quot;);&#10;        config.allowedHeaders = listOf(&quot;*&quot;)&#10;        source.registerCorsConfiguration(&quot;/**&quot;, config)&#10;        val bean = FilterRegistrationBean(CorsFilter(source))&#10;        bean.order = Ordered.HIGHEST_PRECEDENCE&#10;        return bean&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="okta-oauth2-yml" value="okta:&#10;  oauth2:&#10;    issuer: https://dev-737523.oktapreview.com/oauth2/default&#10;    clientId: 0oaj2pqatz6wVayhk0h7&#10;    clientSecret: cwmZFnGOnCbqMP-Jqgnt-jeIbrGn-qpJUiILH69w" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SBT" value="false" />
      <option name="SCALA" value="false" />
      <option name="SQL" value="false" />
      <option name="SSP" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="kors-filter-reactive" value="                    /*&#10;                    config.setAllowedOrigins(listOf(&quot;domain1.com&quot;, &quot;domain2.com&quot;));&#10;                    config.setAllowedMethods(listOf(&quot;GET&quot;, &quot;POST&quot;));&#10;                    config.setAllowedHeaders(listOf(&quot;header1&quot;, &quot;header2&quot;));&#10;                    config.setExposedHeaders(listOf(&quot;header3&quot;, &quot;header4&quot;));&#10;                    config.setMaxAge(123L);&#10;                    config.setAllowCredentials(false);*/&#10;                    val config = CorsConfiguration()&#10;                    CorsWebFilter({ config.applyPermitDefaultValues() })" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="KOTLIN" value="true" />
    </context>
  </template>
  <template name="react-giphy" value="import * as React from 'react';&#10;&#10;interface GiphyImageProps {&#10;  name: string;&#10;}&#10;&#10;interface GiphyImageState {&#10;  giphyUrl: string;&#10;  isLoading: boolean;&#10;}&#10;&#10;class GiphyImage extends React.Component&lt;GiphyImageProps, GiphyImageState&gt; {&#10;  constructor(props: GiphyImageProps) {&#10;    super(props);&#10;&#10;    this.state = {&#10;      giphyUrl: '',&#10;      isLoading: false&#10;    };&#10;  }&#10;&#10;  componentDidMount() {&#10;    const giphyApi = '//api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC&amp;limit=1&amp;q=';&#10;&#10;    fetch(giphyApi + this.props.name)&#10;      .then(response =&gt; response.json())&#10;      .then(response =&gt; {&#10;        if (response.data.length &gt; 0) {&#10;          this.setState({giphyUrl: response.data[0].images.original.url});&#10;        } else {&#10;          // dancing cat for no images found&#10;          this.setState({giphyUrl: '//media.giphy.com/media/YaOxRsmrv9IeA/giphy.gif'});&#10;        }&#10;        this.setState({isLoading: false});&#10;      });&#10;  }&#10;&#10;  render() {&#10;    const {giphyUrl, isLoading} = this.state;&#10;&#10;    if (isLoading) {&#10;      return &lt;p&gt;Loading image...&lt;/p&gt;;&#10;    }&#10;&#10;    return (&#10;      &lt;img src={giphyUrl} alt={this.props.name} width=&quot;200&quot;/&gt;&#10;    );&#10;  }&#10;}&#10;&#10;export default GiphyImage;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="cf-react" value="#!/bin/bash&#10;# Warning: this script has only been tested on macOS Sierra. There's a good chance&#10;# it won't work on other operating systems. If you get it working on another OS,&#10;# please send a pull request with any changes required. Thanks!&#10;set -e&#10;&#10;### CloudFoundry CLI utilities&#10;CLOUD_DOMAIN=${DOMAIN:-run.pivotal.io}&#10;CLOUD_TARGET=api.${DOMAIN}&#10;&#10;function login(){&#10;    cf api | grep ${CLOUD_TARGET} || cf api ${CLOUD_TARGET} --skip-ssl-validation&#10;    cf apps | grep OK || cf login&#10;}&#10;&#10;function app_domain(){&#10;    D=`cf apps | grep $1 | tr -s ' ' | cut -d' ' -f 6 | cut -d, -f1`&#10;    echo $D&#10;}&#10;&#10;function deploy_service(){&#10;    N=$1&#10;    D=`app_domain $N`&#10;    JSON='{&quot;uri&quot;:&quot;http://'$D'&quot;}'&#10;    cf create-user-provided-service $N -p $JSON&#10;}&#10;&#10;### Installation&#10;&#10;cd `dirname $0`&#10;r=`pwd`&#10;echo $r&#10;&#10;## Reset&#10;cf d -f react-client&#10;cf d -f good-beer-server&#10;&#10;cf a&#10;&#10;# Deploy the server&#10;cd $r/server&#10;mvn clean package&#10;cf push -p target/*jar good-beer-server --no-start  --random-route&#10;cf set-env good-beer-server FORCE_HTTPS true&#10;&#10;# Get the URL for the server&#10;serverUri=https://`app_domain good-beer-server`&#10;&#10;# Deploy the client&#10;cd $r/client&#10;rm -rf build&#10;# replace the server URL in the client&#10;sed -i -e &quot;s|http://localhost:8080|$serverUri|g&quot; $r/client/src/BeerList.tsx&#10;yarn &amp;&amp; yarn build&#10;cd build&#10;touch Staticfile&#10;echo 'pushstate: enabled' &gt; Staticfile&#10;cf push react-client --no-start --random-route&#10;cf set-env react-client FORCE_HTTPS true&#10;cf start react-client&#10;&#10;# Get the URL for the client&#10;clientUri=https://`app_domain react-client`&#10;&#10;# replace the client URL in the server&#10;sed -i -e &quot;s|http://localhost:3000|$clientUri|g&quot; $r/server/src/main/java/com/example/demo/DemoApplication.java&#10;&#10;# redeploy the server&#10;cd $r/server&#10;mvn package -DskipTests&#10;cf push -p target/*jar good-beer-server&#10;&#10;# cleanup changed files&#10;git checkout $r/client&#10;git checkout $r/server&#10;rm $r/client/src/BeerList.tsx-e&#10;rm $r/server/src/main/java/com/example/demo/DemoApplication.java-e&#10;&#10;# show apps and URLs&#10;cf apps" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="heroku-react" value="#!/bin/bash&#10;# Warning: this script has only been tested on macOS Sierra. There's a good chance&#10;# it won't work on other operating systems. If you get it working on another OS,&#10;# please send a pull request with any changes required. Thanks!&#10;set -e&#10;&#10;cd `dirname $0`&#10;r=`pwd`&#10;echo $r&#10;&#10;if [ -z &quot;$(which heroku)&quot; ]; then&#10;  echo &quot;You must install the Heroku CLI first!&quot;&#10;  echo &quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&#10;  exit 1&#10;fi&#10;&#10;if ! echo &quot;$(heroku plugins)&quot; | grep -q heroku-cli-deploy; then&#10;  heroku plugins:install heroku-cli-deploy&#10;fi&#10;&#10;if ! echo &quot;$(git remote -v)&quot; | grep -q good-beer-server-; then&#10;  server_app=good-beer-server-$RANDOM&#10;  heroku create -r server $server_app&#10;else&#10;  server_app=$(heroku apps:info -r server --json | python -c 'import json,sys;print json.load(sys.stdin)[&quot;app&quot;][&quot;name&quot;]')&#10;fi&#10;serverUri=&quot;https://$server_app.herokuapp.com&quot;&#10;&#10;if ! echo &quot;$(git remote -v)&quot; | grep -q react-client-; then&#10;  client_app=react-client-$RANDOM&#10;  heroku create -r client $client_app&#10;else&#10;  client_app=$(heroku apps:info -r client --json | python -c 'import json,sys;print json.load(sys.stdin)[&quot;app&quot;][&quot;name&quot;]')&#10;fi&#10;clientUri=&quot;https://$client_app.herokuapp.com&quot;&#10;&#10;# replace the client URL in the server&#10;sed -i -e &quot;s|http://localhost:3000|$clientUri|g&quot; $r/server/src/main/java/com/example/demo/DemoApplication.java&#10;&#10;# Deploy the server&#10;cd $r/server&#10;mvn clean package -DskipTests&#10;&#10;heroku deploy:jar target/*jar -r server -o &quot;--server.port=\$PORT&quot;&#10;heroku config:set -r server FORCE_HTTPS=&quot;true&quot;&#10;&#10;# Deploy the client&#10;cd $r/client&#10;rm -rf build&#10;# replace the server URL in the client&#10;sed -i -e &quot;s|http://localhost:8080|$serverUri|g&quot; $r/client/src/BeerList.tsx&#10;yarn &amp;&amp; yarn build&#10;cd build&#10;&#10;cat &lt;&lt; EOF &gt; static.json&#10;{&#10;  &quot;https_only&quot;: true,&#10;  &quot;root&quot;: &quot;.&quot;,&#10;  &quot;routes&quot;: {&#10;    &quot;/**&quot;: &quot;index.html&quot;&#10;  }&#10;}&#10;EOF&#10;&#10;rm -f ../dist.tgz&#10;tar -zcvf ../dist.tgz .&#10;&#10;# TODO replace this with the heroku-cli-static command `heroku static:deploy`&#10;source=$(curl -n -X POST https://api.heroku.com/apps/$client_app/sources -H 'Accept: application/vnd.heroku+json; version=3')&#10;get_url=$(echo &quot;$source&quot; | python -c 'import json,sys;print json.load(sys.stdin)[&quot;source_blob&quot;][&quot;get_url&quot;]')&#10;put_url=$(echo &quot;$source&quot; | python -c 'import json,sys;print json.load(sys.stdin)[&quot;source_blob&quot;][&quot;put_url&quot;]')&#10;curl &quot;$put_url&quot; -X PUT -H 'Content-Type:' --data-binary @../dist.tgz&#10;cat &lt;&lt; EOF &gt; build.json&#10;{&#10;  &quot;buildpacks&quot;: [{ &quot;url&quot;: &quot;https://github.com/heroku/heroku-buildpack-static&quot; }],&#10;  &quot;source_blob&quot;: { &quot;url&quot; : &quot;$get_url&quot; }&#10;}&#10;EOF&#10;build_out=$(curl -n -s -X POST https://api.heroku.com/apps/$client_app/builds \&#10;  -d &quot;$(cat build.json)&quot; \&#10;  -H 'Accept: application/vnd.heroku+json; version=3' \&#10;  -H &quot;Content-Type: application/json&quot;)&#10;output_stream_url=$(echo &quot;$build_out&quot; | python -c 'import json,sys;print json.load(sys.stdin)[&quot;output_stream_url&quot;]')&#10;curl -s -L &quot;$output_stream_url&quot;&#10;&#10;rm build.json&#10;rm ../dist.tgz&#10;&#10;# cleanup changed files&#10;git checkout $r/client&#10;git checkout $r/server&#10;rm $r/client/src/BeerList.tsx-e&#10;rm $r/server/src/main/java/com/example/demo/DemoApplication.java-e&#10;&#10;# show apps and URLs&#10;heroku open -r client" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="react-config" value="import { BrowserRouter as Router, Route } from 'react-router-dom';&#10;import { Security, ImplicitCallback } from '@okta/okta-react';&#10;&#10;const config = {&#10;  issuer: 'https://dev-737523.oktapreview.com/oauth2/default',&#10;  redirect_uri: window.location.origin + '/implicit/callback',&#10;  client_id: '0oagbqbpk4qmJDpaS0h7'&#10;};&#10;&#10;export interface Auth {&#10;  login(redirectUri: string): {};&#10;  logout(redirectUri: string): {};&#10;  isAuthenticated(): boolean;&#10;  getAccessToken(): string;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="react-security" value="render() {&#10;    return (&#10;      &lt;Router&gt;&#10;        &lt;Security {...config}&gt;&#10;          &lt;Route path=&quot;/&quot; exact={true} component={Home}/&gt;&#10;          &lt;Route path=&quot;/implicit/callback&quot; component={ImplicitCallback}/&gt;&#10;        &lt;/Security&gt;&#10;      &lt;/Router&gt;&#10;    );&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="react-home" value="import * as React from 'react';&#10;import './App.css';&#10;import $name$List from './$name$List';&#10;import { withAuth } from '@okta/okta-react';&#10;import { Auth } from './App';&#10;&#10;import logo from './logo.svg';&#10;&#10;interface HomeProps {&#10;  auth: Auth;&#10;}&#10;&#10;interface HomeState {&#10;  authenticated: boolean;&#10;}&#10;&#10;export default withAuth(class Home extends React.Component&lt;HomeProps, HomeState&gt; {&#10;  constructor(props: HomeProps) {&#10;    super(props);&#10;    this.state = {authenticated: false};&#10;    this.checkAuthentication = this.checkAuthentication.bind(this);&#10;    this.login = this.login.bind(this);&#10;    this.logout = this.logout.bind(this);&#10;  }&#10;&#10;  async checkAuthentication() {&#10;    const authenticated = await this.props.auth.isAuthenticated();&#10;    if (authenticated !== this.state.authenticated) {&#10;      this.setState({ authenticated });&#10;    }&#10;  }&#10;&#10;  async componentDidMount() {&#10;    await this.checkAuthentication();&#10;  }&#10;&#10;  async componentDidUpdate() {&#10;    await this.checkAuthentication();&#10;  }&#10;&#10;  async login() {&#10;    this.props.auth.login('/')&#10;  }&#10;&#10;  async logout() {&#10;    this.props.auth.logout('/');&#10;  }&#10;&#10;  render() {&#10;    const {authenticated} = this.state;&#10;    let body = null;&#10;    if (authenticated) {&#10;      body = (&#10;        &lt;div className=&quot;Buttons&quot;&gt;&#10;          &lt;button onClick={this.logout}&gt;Logout&lt;/button&gt;&#10;          &lt;$name$List auth={this.props.auth}/&gt;&#10;        &lt;/div&gt;&#10;      );&#10;    } else {&#10;      body = (&#10;        &lt;div className=&quot;Buttons&quot;&gt;&#10;          &lt;button onClick={this.login}&gt;Login&lt;/button&gt;&#10;        &lt;/div&gt;&#10;      );&#10;    }&#10;&#10;    return (&#10;      &lt;div className=&quot;App&quot;&gt;&#10;        &lt;header className=&quot;App-header&quot;&gt;&#10;          &lt;img src={logo} className=&quot;App-logo&quot; alt=&quot;logo&quot;/&gt;&#10;          &lt;h1 className=&quot;App-title&quot;&gt;Welcome to React&lt;/h1&gt;&#10;          {body}&#10;        &lt;/header&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="react-token" value="async componentDidMount() {&#10;    this.setState({isLoading: true});&#10;&#10;    const response = await fetch('http://localhost:8080/$endpoint$', {&#10;      headers: {&#10;        Authorization: 'Bearer ' + await this.props.auth.getAccessToken()&#10;      }&#10;    });&#10;    const data = await response.json();&#10;    this.setState({$endpoint$: data, isLoading: false});&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpoint" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="boot-entity-lombok" value="@lombok.Data&#10;@lombok.NoArgsConstructor&#10;@javax.persistence.Entity&#10;class $name$ {&#10;&#10;    public $name$(java.lang.String name) {&#10;        this.name = name;&#10;    }&#10;&#10;    @javax.persistence.Id&#10;    @javax.persistence.GeneratedValue&#10;    private java.lang.Long id;&#10;&#10;    @lombok.NonNull&#10;    private java.lang.String name;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="feign-client" value="@org.springframework.cloud.openfeign.FeignClient(&quot;beer-catalog-service&quot;)&#10;interface BeerClient {&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/beers&quot;)&#10;    org.springframework.hateoas.Resources&lt;com.example.edgeservice.Beer&gt; readBeers();&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="good-beer-adapter" value="@org.springframework.web.bind.annotation.RestController&#10;class GoodBeerApiAdapterRestController {&#10;&#10;    private final com.example.edgeservice.BeerClient beerClient;&#10;&#10;    public GoodBeerApiAdapterRestController(com.example.edgeservice.BeerClient beerClient) {&#10;        this.beerClient = beerClient;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/good-beers&quot;)&#10;    public java.util.Collection&lt;com.example.edgeservice.Beer&gt; goodBeers() {&#10;        return beerClient.readBeers()&#10;                .getContent()&#10;                .stream()&#10;                .filter(this::isGreat)&#10;                .collect(java.util.stream.Collectors.toList());&#10;    }&#10;&#10;    private boolean isGreat(com.example.edgeservice.Beer beer) {&#10;        return !beer.getName().equals(&quot;Budweiser&quot;) &amp;&amp;&#10;                !beer.getName().equals(&quot;Coors Light&quot;) &amp;&amp;&#10;                !beer.getName().equals(&quot;PBR&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="hystrix-fallback" value="public java.util.Collection&lt;com.example.edgeservice.Beer&gt; fallback() {&#10;        return new java.util.ArrayList&lt;&gt;();&#10;    }&#10;&#10;    @com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand(fallbackMethod = &quot;fallback&quot;)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="resource-server-config" value="import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.oauth2.config.annotation.web.configuration.EnableResourceServer;&#10;import org.springframework.security.oauth2.config.annotation.web.configuration.ResourceServerConfigurerAdapter;&#10;import org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;@EnableResourceServer&#10;public class ResourceServerConfig extends ResourceServerConfigurerAdapter {&#10;&#10;    @java.lang.Override&#10;    public void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        http&#10;            .requestMatcher(new org.springframework.security.web.util.matcher.RequestHeaderRequestMatcher(&quot;Authorization&quot;))&#10;            .authorizeRequests()&#10;            .antMatchers(&quot;/**&quot;).authenticated();&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="spring-oauth2-yaml" value="spring:&#10;  security:&#10;    oauth2:&#10;      client:&#10;        registration:&#10;          okta:&#10;            client-id: $clientId$&#10;            client-secret: $clientSecret$&#10;        provider:&#10;          okta:&#10;            authorization-uri: https://$yourOktaDomain$.com/oauth2/v1/authorize&#10;            token-uri: https://$yourOktaDomain$.com/oauth2/v1/token&#10;            user-info-uri: https://$yourOktaDomain$.com/oauth2/v1/userinfo&#10;            jwk-set-uri: https://$yourOktaDomain$.com/oauth2/v1/keys" description="" toReformat="true" toShortenFQNames="true">
    <variable name="clientId" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="clientSecret" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="yourOktaDomain" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="REQUEST" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="spring-oauth2-reactive" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-config&lt;/artifactId&gt;&#10;            &lt;version&gt;5.1.0.BUILD-SNAPSHOT&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-oauth2-client&lt;/artifactId&gt;&#10;            &lt;version&gt;5.1.0.BUILD-SNAPSHOT&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-oauth2-jose&lt;/artifactId&gt;&#10;            &lt;version&gt;5.1.0.BUILD-SNAPSHOT&lt;/version&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.thymeleaf.extras&lt;/groupId&gt;&#10;            &lt;artifactId&gt;thymeleaf-extras-springsecurity4&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="jh-get" value="if (blog.isPresent() &amp;&amp; blog.get().getUser() != null &amp;&amp;&#10;    !blog.get().getUser().getLogin().equals(SecurityUtils.getCurrentUserLogin().orElse(&quot;&quot;))) {&#10;    return new ResponseEntity&lt;&gt;(&quot;error.http.403&quot;, HttpStatus.FORBIDDEN);&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="react-fetch" value="componentDidMount() {&#10;    this.setState({isLoading: true});&#10;&#10;    fetch('//localhost:3000/$endpoint$')&#10;      .then(response =&gt; response.json())&#10;      .then(data =&gt; this.setState({$endpoint$: data, isLoading: false}));&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpoint" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-constructor" value="constructor(props: AppProps) {&#10;    super(props);&#10;&#10;    this.state = {&#10;      $endpoint$: [],&#10;      isLoading: false&#10;    };&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpoint" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-loading" value="const {$endpoint$, isLoading} = this.state;&#10;&#10;    if (isLoading) {&#10;      return &lt;p&gt;Loading...&lt;/p&gt;;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpoint" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="react-list" value="&lt;div&gt;&#10;          &lt;h2&gt;List&lt;/h2&gt;&#10;          {$endpoint$.map(($entity$: $name$) =&gt;&#10;            &lt;div key={$entity$.id}&gt;&#10;              {$entity$.name}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="endpoint" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="entity" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="TS_CLASS" value="false" />
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="tslint-rules" value="&quot;rules&quot;: {&#10;  &quot;interface-name&quot;: [true, &quot;never-prefix&quot;],&#10;  &quot;no-empty-interface&quot;: false,&#10;  &quot;array-type&quot;: [true, &quot;generic&quot;],&#10;  &quot;member-access&quot;: [true, &quot;no-public&quot;]&#10;}" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="tslint-rules2" value="&quot;ordered-imports&quot;: false,&#10;&quot;object-literal-sort-keys&quot;: false,&#10;&quot;no-console&quot;: false" description="" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="react-icon" value="{&#10;      &quot;src&quot;: &quot;$name$.png&quot;,&#10;      &quot;sizes&quot;: &quot;512x512&quot;,&#10;      &quot;type&quot;: &quot;image/png&quot;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="react-security-imports" value="import { BrowserRouter as Router, Route } from 'react-router-dom';&#10;import { Security, ImplicitCallback } from '@okta/okta-react';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="react-css" value=".Buttons {&#10;  margin-top: 10px;&#10;}&#10;&#10;.Buttons button {&#10;  font-size: 1em;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="okta-d-ts" value="declare module '@okta/okta-$name$';" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ss-maven" value="&lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-oauth2-client&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-oauth2-resource-server&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.springframework.security&lt;/groupId&gt;&#10;            &lt;artifactId&gt;spring-security-oauth2-jose&lt;/artifactId&gt;&#10;        &lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="webflux-entity" value="import lombok.AllArgsConstructor;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;&#10;@org.springframework.data.mongodb.core.mapping.Document&#10;@lombok.Data&#10;@lombok.AllArgsConstructor&#10;@lombok.NoArgsConstructor&#10;class $name$ {&#10;&#10;    @org.springframework.data.annotation.Id&#10;    private java.lang.String id;&#10;    &#10;    private java.lang.String email;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-data" value="import lombok.extern.log4j.Log4j2;&#10;import org.springframework.boot.context.event.ApplicationReadyEvent;&#10;import org.springframework.context.ApplicationListener;&#10;import org.springframework.stereotype.Component;&#10;import reactor.core.publisher.Flux;&#10;&#10;import java.util.UUID;&#10;&#10;@lombok.extern.log4j.Log4j2&#10;@org.springframework.stereotype.Component&#10;@org.springframework.context.annotation.Profile(&quot;demo&quot;)&#10;class SampleDataInitializer&#10;    implements org.springframework.context.ApplicationListener&lt;org.springframework.boot.context.event.ApplicationReadyEvent&gt; {&#10;&#10;    private final com.example.demo.ProfileRepository repository;&#10;&#10;    public SampleDataInitializer(com.example.demo.ProfileRepository repository) {&#10;        this.repository = repository;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void onApplicationEvent(org.springframework.boot.context.event.ApplicationReadyEvent event) {&#10;        repository&#10;            .deleteAll()&#10;            .thenMany(&#10;                reactor.core.publisher.Flux&#10;                    .just(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;)&#10;                    .map(name -&gt; new com.example.demo.Profile(java.util.UUID.randomUUID().toString(), name + &quot;@email.com&quot;))&#10;                    .flatMap(repository::save)&#10;            )&#10;            .thenMany(repository.findAll())&#10;            .subscribe(profile -&gt; log.info(&quot;saving &quot; + profile.toString()));&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-repo" value="import org.springframework.data.mongodb.repository.ReactiveMongoRepository;&#10;&#10;interface $name$Repository extends org.springframework.data.mongodb.repository.ReactiveMongoRepository&lt;$name$, java.lang.String&gt; {&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-controller" value="import org.reactivestreams.Publisher;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import reactor.core.publisher.Mono;&#10;&#10;import java.net.URI;&#10;&#10;@org.springframework.web.bind.annotation.RestController&#10;@org.springframework.web.bind.annotation.RequestMapping(value = &quot;/profiles&quot;, produces = org.springframework.http.MediaType.APPLICATION_JSON_VALUE) &#10;@org.springframework.context.annotation.Profile(&quot;classic&quot;)&#10;class ProfileRestController {&#10;&#10;    private final org.springframework.http.MediaType mediaType = org.springframework.http.MediaType.APPLICATION_JSON_UTF8;&#10;    private final com.example.demo.ProfileService profileService;&#10;&#10;    ProfileRestController(com.example.demo.ProfileService profileService) {&#10;        this.profileService = profileService;&#10;    }&#10;   &#10;    @org.springframework.web.bind.annotation.GetMapping&#10;    org.reactivestreams.Publisher&lt;com.example.demo.Profile&gt; getAll() {&#10;        return this.profileService.all();&#10;    }&#10;&#10;   &#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/{id}&quot;)&#10;    org.reactivestreams.Publisher&lt;com.example.demo.Profile&gt; getById(@org.springframework.web.bind.annotation.PathVariable(&quot;id&quot;) java.lang.String id) {&#10;        return this.profileService.get(id);&#10;    }&#10;    &#10;    @org.springframework.web.bind.annotation.PostMapping&#10;    org.reactivestreams.Publisher&lt;org.springframework.http.ResponseEntity&lt;com.example.demo.Profile&gt;&gt; create(@org.springframework.web.bind.annotation.RequestBody com.example.demo.Profile profile) {&#10;        return this.profileService&#10;            .create(profile.getEmail())&#10;            .map(p -&gt; org.springframework.http.ResponseEntity.created(java.net.URI.create(&quot;/profiles/&quot; + p.getId()))&#10;                .contentType(mediaType)&#10;                .build());&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.DeleteMapping(&quot;/{id}&quot;)&#10;    org.reactivestreams.Publisher&lt;com.example.demo.Profile&gt; deleteById(@org.springframework.web.bind.annotation.PathVariable java.lang.String id) {&#10;        return this.profileService.delete(id);&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.PutMapping(&quot;/{id}&quot;)&#10;    org.reactivestreams.Publisher&lt;org.springframework.http.ResponseEntity&lt;com.example.demo.Profile&gt;&gt; updateById(@org.springframework.web.bind.annotation.PathVariable java.lang.String id, @org.springframework.web.bind.annotation.RequestBody com.example.demo.Profile profile) {&#10;        return reactor.core.publisher.Mono&#10;            .just(profile)&#10;            .flatMap(p -&gt; this.profileService.update(id, p.getEmail()))&#10;            .map(p -&gt; org.springframework.http.ResponseEntity&#10;                .ok()&#10;                .contentType(this.mediaType)&#10;                .build());&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-service" value="import lombok.extern.log4j.Log4j2;&#10;import org.springframework.context.ApplicationEventPublisher;&#10;import org.springframework.stereotype.Service;&#10;import reactor.core.publisher.Flux;&#10;import reactor.core.publisher.Mono;&#10;&#10;@Log4j2&#10;@Service&#10;class $name$Service {&#10;&#10;    private final ApplicationEventPublisher publisher;&#10;    private final $name$Repository repository;&#10;&#10;    $name$Service(ApplicationEventPublisher publisher, $name$Repository repository) {&#10;        this.publisher = publisher;&#10;        this.repository = repository;&#10;    }&#10;&#10;    public Flux&lt;$name$&gt; all() {&#10;        return this.repository.findAll();&#10;    }&#10;&#10;    public Mono&lt;$name$&gt; get(String id) {&#10;        return this.repository.findById(id);&#10;    }&#10;&#10;    public Mono&lt;$name$&gt; update(String id, String email) {&#10;        return this.repository&#10;                .findById(id)&#10;                .map(p -&gt; new $name$(p.getId(), email))&#10;                .flatMap(this.repository::save);&#10;    }&#10;&#10;    public Mono&lt;$name$&gt; delete(String id) {&#10;        return this.repository&#10;                .findById(id)&#10;                .flatMap(p -&gt; this.repository.deleteById(p.getId()).thenReturn(p));&#10;    }&#10;&#10;    public Mono&lt;$name$&gt; create(String email) {&#10;        return this.repository&#10;                .save(new $name$(null, email))&#10;                .doOnSuccess(entity -&gt; this.publisher.publishEvent(new $name$CreatedEvent(entity)));&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-event" value="import org.springframework.context.ApplicationEvent;&#10;&#10;public class $name$CreatedEvent extends org.springframework.context.ApplicationEvent {&#10;&#10;    public $name$CreatedEvent($name$ source) {&#10;        super(source);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-publisher" value="import org.springframework.context.ApplicationListener;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.util.ReflectionUtils;&#10;import reactor.core.publisher.FluxSink;&#10;&#10;import java.util.concurrent.BlockingQueue;&#10;import java.util.concurrent.Executor;&#10;import java.util.concurrent.LinkedBlockingQueue;&#10;import java.util.function.Consumer;&#10;&#10;@org.springframework.stereotype.Component&#10;class $name$CreatedEventPublisher implements&#10;    org.springframework.context.ApplicationListener&lt;$name$CreatedEvent&gt;, &#10;    java.util.function.Consumer&lt;reactor.core.publisher.FluxSink&lt;$name$CreatedEvent&gt;&gt; {&#10;&#10;    private final java.util.concurrent.Executor executor;&#10;    private final java.util.concurrent.BlockingQueue&lt;$name$CreatedEvent&gt; queue =&#10;        new java.util.concurrent.LinkedBlockingQueue&lt;&gt;(); &#10;&#10;    $name$CreatedEventPublisher(java.util.concurrent.Executor executor) {&#10;        this.executor = executor;&#10;    }&#10;    &#10;    @java.lang.Override&#10;    public void onApplicationEvent($name$CreatedEvent event) {&#10;        this.queue.offer(event);&#10;    }&#10;&#10;     @java.lang.Override&#10;    public void accept(reactor.core.publisher.FluxSink&lt;$name$CreatedEvent&gt; sink) {&#10;        this.executor.execute(() -&gt; {&#10;            while (true)&#10;                try {&#10;                    $name$CreatedEvent event = queue.take(); &#10;                    sink.next(event); &#10;                }&#10;                catch (java.lang.InterruptedException e) {&#10;                    org.springframework.util.ReflectionUtils.rethrowRuntimeException(e);&#10;                }&#10;        });&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-predicate" value="import org.springframework.http.server.PathContainer;&#10;import org.springframework.web.reactive.function.server.RequestPredicate;&#10;import org.springframework.web.reactive.function.server.ServerRequest;&#10;import org.springframework.web.reactive.function.server.support.ServerRequestWrapper;&#10;&#10;import java.net.URI;&#10;&#10;public class CaseInsensitiveRequestPredicate implements org.springframework.web.reactive.function.server.RequestPredicate {&#10;&#10;    private final org.springframework.web.reactive.function.server.RequestPredicate target;&#10;&#10;    CaseInsensitiveRequestPredicate(org.springframework.web.reactive.function.server.RequestPredicate target) {&#10;        this.target = target;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public boolean test(org.springframework.web.reactive.function.server.ServerRequest request) {&#10;        return this.target.test(new com.example.demo.LowerCaseUriServerRequestWrapper(request));&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String toString() {&#10;        return this.target.toString();&#10;    }&#10;}&#10;&#10;class LowerCaseUriServerRequestWrapper extends org.springframework.web.reactive.function.server.support.ServerRequestWrapper {&#10;&#10;    LowerCaseUriServerRequestWrapper(org.springframework.web.reactive.function.server.ServerRequest delegate) {&#10;        super(delegate);&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.net.URI uri() {&#10;        return java.net.URI.create(super.uri().toString().toLowerCase());&#10;    }&#10;&#10;    @java.lang.Override&#10;    public java.lang.String path() {&#10;        return uri().getRawPath();&#10;    }&#10;&#10;    @java.lang.Override&#10;    public org.springframework.http.server.PathContainer pathContainer() {&#10;        return org.springframework.http.server.PathContainer.parsePath(path());&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-security" value="import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;&#10;import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;&#10;import org.springframework.security.config.web.server.ServerHttpSecurity;&#10;import org.springframework.security.web.server.SecurityWebFilterChain;&#10;import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.reactive.CorsConfigurationSource;&#10;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Collections;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;@org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity&#10;@org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity&#10;public class SecurityConfiguration {&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.security.web.server.SecurityWebFilterChain securityWebFilterChain(org.springframework.security.config.web.server.ServerHttpSecurity http) {&#10;        // @formatter:off&#10;        http&#10;            .csrf()&#10;                .csrfTokenRepository(org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository.withHttpOnlyFalse())&#10;                .and()&#10;            .authorizeExchange()&#10;                .pathMatchers(&quot;/ws/**&quot;).permitAll()&#10;                .anyExchange().authenticated()&#10;                .and()&#10;            .oauth2Login()&#10;                .and()&#10;            .oauth2ResourceServer()&#10;                .jwt();&#10;        return http.build();&#10;        // @formatter:on&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-endpoint" value="import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.reactive.function.server.RequestPredicate;&#10;import org.springframework.web.reactive.function.server.RouterFunction;&#10;import org.springframework.web.reactive.function.server.ServerResponse;&#10;&#10;import static org.springframework.web.reactive.function.server.RequestPredicates.*;&#10;import static org.springframework.web.reactive.function.server.RouterFunctions.route;&#10;&#10;@Configuration&#10;class $name$EndpointConfiguration {&#10;&#10;    @Bean&#10;    RouterFunction&lt;ServerResponse&gt; routes($name$Handler handler) {&#10;        return route(i(GET(&quot;/profiles&quot;)), handler::all)&#10;                .andRoute(i(GET(&quot;/profiles/{id}&quot;)), handler::getById)&#10;                .andRoute(i(DELETE(&quot;/profiles/{id}&quot;)), handler::deleteById)&#10;                .andRoute(i(POST(&quot;/profiles&quot;)), handler::create)&#10;                .andRoute(i(PUT(&quot;/profiles/{id}&quot;)), handler::updateById);&#10;    }&#10;&#10;    private static RequestPredicate i(RequestPredicate target) {&#10;        return new CaseInsensitiveRequestPredicate(target);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-websocket" value="import com.fasterxml.jackson.core.JsonProcessingException;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import lombok.extern.log4j.Log4j2;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.reactive.HandlerMapping;&#10;import org.springframework.web.reactive.handler.SimpleUrlHandlerMapping;&#10;import org.springframework.web.reactive.socket.WebSocketHandler;&#10;import org.springframework.web.reactive.socket.WebSocketMessage;&#10;import org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter;&#10;import reactor.core.publisher.Flux;&#10;&#10;import java.util.Collections;&#10;import java.util.concurrent.Executor;&#10;import java.util.concurrent.Executors;&#10;&#10;@lombok.extern.log4j.Log4j2&#10;@org.springframework.context.annotation.Configuration&#10;class WebSocketConfiguration {&#10;    &#10;    @org.springframework.context.annotation.Bean&#10;    java.util.concurrent.Executor executor() {&#10;        return java.util.concurrent.Executors.newSingleThreadExecutor();&#10;    }&#10;    &#10;    @org.springframework.context.annotation.Bean&#10;    org.springframework.web.reactive.HandlerMapping handlerMapping(org.springframework.web.reactive.socket.WebSocketHandler wsh) {&#10;        return new org.springframework.web.reactive.handler.SimpleUrlHandlerMapping() {&#10;            {&#10;                setUrlMap(java.util.Collections.singletonMap(&quot;/ws/profiles&quot;, wsh));&#10;                setOrder(10);&#10;            }&#10;        };&#10;    }&#10;    &#10;    @org.springframework.context.annotation.Bean&#10;    org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter webSocketHandlerAdapter() {&#10;        return new org.springframework.web.reactive.socket.server.support.WebSocketHandlerAdapter();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    org.springframework.web.reactive.socket.WebSocketHandler webSocketHandler(&#10;        com.fasterxml.jackson.databind.ObjectMapper objectMapper, &#10;        com.example.demo.ProfileCreatedEventPublisher eventPublisher &#10;    ) {&#10;&#10;        reactor.core.publisher.Flux&lt;com.example.demo.ProfileCreatedEvent&gt; publish = reactor.core.publisher.Flux&#10;            .create(eventPublisher)&#10;            .share(); &#10;&#10;        return session -&gt; {&#10;&#10;            reactor.core.publisher.Flux&lt;org.springframework.web.reactive.socket.WebSocketMessage&gt; messageFlux = publish&#10;                .map(evt -&gt; {&#10;                    try {&#10;                        return objectMapper.writeValueAsString(evt.getSource());&#10;                    }&#10;                    catch (com.fasterxml.jackson.core.JsonProcessingException e) {&#10;                        throw new java.lang.RuntimeException(e);&#10;                    }&#10;                })&#10;                .map(str -&gt; {&#10;                    log.info(&quot;sending &quot; + str);&#10;                    return session.textMessage(str);&#10;                });&#10;&#10;            return session.send(messageFlux); &#10;        };&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-sse" value="import com.fasterxml.jackson.core.JsonProcessingException;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.RestController;&#10;import reactor.core.publisher.Flux;&#10;&#10;@org.springframework.web.bind.annotation.RestController&#10;public class ServerSentEventController {&#10;    private final reactor.core.publisher.Flux&lt;com.example.demo.ProfileCreatedEvent&gt; events;&#10;    private final com.fasterxml.jackson.databind.ObjectMapper objectMapper;&#10;&#10;    public ServerSentEventController(com.example.demo.ProfileCreatedEventPublisher eventPublisher, com.fasterxml.jackson.databind.ObjectMapper objectMapper) {&#10;        this.events = reactor.core.publisher.Flux.create(eventPublisher).share();&#10;        this.objectMapper = objectMapper;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(path = &quot;/sse/profiles&quot;, produces = org.springframework.http.MediaType.TEXT_EVENT_STREAM_VALUE)&#10;    public reactor.core.publisher.Flux&lt;java.lang.String&gt; profiles() {&#10;        return this.events.map(pce -&gt; {&#10;            try {&#10;                return objectMapper.writeValueAsString(pce);&#10;            } catch (com.fasterxml.jackson.core.JsonProcessingException e) {&#10;                throw new java.lang.RuntimeException(e);&#10;            }&#10;        });&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="webflux-ws" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;utf-8&quot;&gt;&#10;    &lt;title&gt;Profile notification client&#10;    &lt;/title&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;&lt;script&gt;&#10;  var socket = new WebSocket('ws://localhost:8080/ws/profiles');&#10;  socket.addEventListener('message', function (event) {&#10;    window.alert('message from server: ' + event.data);&#10;  });&#10;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ss-application" value="oidc:&#10;  issuer-uri: https://dev-737523.oktapreview.com/oauth2/default&#10;  client-id: 0oagbqbpk4qmJDpaS0h7&#10;  client-secret: dagQjCjCJ51Tvqz1jSlelcQ0xSkK5_VwuHmJK7MQ&#10;&#10;spring:&#10;  security:&#10;    oauth2:&#10;      client:&#10;        provider:&#10;          okta:&#10;            issuer-uri: ${oidc.issuer-uri}&#10;        registration:&#10;          okta:&#10;            client-id: ${oidc.client-id}&#10;            client-secret: ${oidc.client-secret}&#10;            scope: openid, email, profile&#10;      resourceserver:&#10;        jwt:&#10;          issuer-uri: ${oidc.issuer-uri}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="REQUEST" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="ss-config" value="package com.example.demo;&#10;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;&#10;import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;&#10;import org.springframework.security.config.web.server.ServerHttpSecurity;&#10;import org.springframework.security.web.server.SecurityWebFilterChain;&#10;import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;&#10;import org.springframework.web.cors.CorsConfiguration;&#10;import org.springframework.web.cors.reactive.CorsConfigurationSource;&#10;import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;&#10;&#10;import java.util.Collections;&#10;&#10;@EnableWebFluxSecurity // &lt;1&gt;&#10;@EnableReactiveMethodSecurity // &lt;2&gt;&#10;public class SecurityConfiguration {&#10;&#10;    @Bean // &lt;3&gt;&#10;    public SecurityWebFilterChain securityWebFilterChain(ServerHttpSecurity http) {&#10;        // @formatter:off&#10;        return http&#10;                .csrf()&#10;                    .csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse()) // &lt;4&gt;&#10;                    .and()&#10;                .authorizeExchange()&#10;                    .pathMatchers(&quot;/ws/**&quot;).permitAll() // &lt;5&gt;&#10;                    .anyExchange().authenticated()&#10;                    .and()&#10;                .oauth2Login()&#10;                    .and()&#10;                .oauth2ResourceServer()&#10;                    .jwt().and().and().build();&#10;        // @formatter:on&#10;    }&#10;&#10;    @Bean // &lt;6&gt;&#10;    CorsConfigurationSource corsConfigurationSource() {&#10;        CorsConfiguration configuration = new CorsConfiguration();&#10;        configuration.setAllowCredentials(true);&#10;        configuration.setAllowedOrigins(Collections.singletonList(&quot;http://localhost:3000&quot;));&#10;        configuration.setAllowedMethods(Collections.singletonList(&quot;GET&quot;));&#10;        configuration.setAllowedHeaders(Collections.singletonList(&quot;*&quot;));&#10;        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="react-interval" value="async fetchData() {&#10;    this.setState({isLoading: true});&#10;&#10;    const response = await fetch('http://localhost:3000/profiles');&#10;    const data = await response.json();&#10;    this.setState({profiles: data, isLoading: false});&#10;  }&#10;&#10;  async componentDidMount() {&#10;    await this.fetchData();&#10;    this.interval = setInterval(() =&gt; this.fetchData(), 1000);&#10;  }&#10;&#10;  componentWillUnmount() {&#10;    clearInterval(this.interval);&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-rxjs" value="async componentDidMount() {&#10;    this.setState({isLoading: true});&#10;&#10;    const request = interval(1000).pipe(&#10;      startWith(0),&#10;      switchMap(async () =&gt;&#10;        fetch('http://localhost:3000/profiles')&#10;          .then((response) =&gt; response.json())&#10;    ));&#10;&#10;    request.subscribe(data =&gt; {&#10;      this.setState({profiles: data, isLoading: false});&#10;    })&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-websocket" value="async componentDidMount() {&#10;    this.setState({isLoading: true});&#10;&#10;    const response = await fetch('http://localhost:3000/profiles');&#10;    const data = await response.json();&#10;    this.setState({profiles: data, isLoading: false});&#10;&#10;    const socket = new WebSocket('ws://localhost:3000/ws/profiles');&#10;    socket.addEventListener('message', async (event: any) =&gt; {&#10;      const profile = JSON.parse(event.data);&#10;      this.state.profiles.push(profile);&#10;      this.setState({profiles: this.state.profiles});&#10;    });&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-websocket2" value="async componentDidMount() {&#10;    this.setState({isLoading: true});&#10;    const headers = {&#10;      headers: {Authorization: 'Bearer ' + await this.props.auth.getAccessToken()}&#10;    };&#10;&#10;    const response = await fetch('http://localhost:8080/profiles', headers);&#10;&#10;    const data = await response.json();&#10;    this.setState({profiles: data, isLoading: false});&#10;&#10;    const socket = new WebSocket('ws://localhost:8080/ws/profiles');&#10;    socket.addEventListener('message', async (event: any) =&gt; {&#10;      const message = JSON.parse(event.data);&#10;      const request = await fetch(`http://localhost:8080/profiles/${message.id}`, headers);&#10;      const profile = await request.json();&#10;      this.state.profiles.push(profile);&#10;      this.setState({profiles: this.state.profiles});&#10;    });&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="react-eventsource" value="async componentDidMount() {&#10;    this.setState({isLoading: true});&#10;    &#10;    const response = await fetch('http://localhost:3000/profiles');&#10;    const data = await response.json();&#10;    this.setState({profiles: data, isLoading: false});&#10;    &#10;    const eventSource = new EventSource('http://localhost:8080/sse/profiles');&#10;    eventSource.onopen = (event: any) =&gt; console.log('open', event);&#10;    eventSource.onmessage = (event: any) =&gt; {&#10;      const profile = JSON.parse(event.data).source;&#10;      this.state.profiles.push(profile);&#10;      this.setState({profiles: this.state.profiles});&#10;    };&#10;    eventSource.onerror = (event: any) =&gt; console.log('error', event);&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="create-stream" value="#!/bin/bash &#10;port=${1:-8080}&#10;count=0&#10;&#10;profile () {&#10;  ((count++))&#10;  echo &quot;posting #${count}&quot;&#10;  http POST http://localhost:${port}/profiles email=&quot;random${count}&quot;&#10;  if [ $count -gt 120 ]&#10;  then&#10;    echo &quot;count is $count, ending...&quot;&#10;    break&#10;  fi&#10;}&#10;&#10;while sleep 1; do profile; done&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="create-stream-auth" value="#!/bin/bash &#10;port=${1:-8080}&#10;count=0&#10;token=&lt;your access token&gt;&#10;&#10;profile () {&#10;  ((count++))&#10;  echo &quot;posting #${count}&quot;&#10;  http POST http://localhost:${port}/profiles email=&quot;random${count}&quot; Authorization:&quot;Bearer ${token}&quot;&#10;  if [ $count -gt 120 ]&#10;  then&#10;    echo &quot;count is $count, ending...&quot;&#10;    break&#10;  fi&#10;}&#10;&#10;while sleep 1; do profile; done" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="create" value="#!/bin/bash &#10;port=${1:-8080}&#10;&#10;curl -H&quot;content-type: application/json&quot; -d'{&quot;email&quot;:&quot;random&quot;}' http://localhost:${port}/profiles" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="Bash" value="true" />
    </context>
  </template>
  <template name="webflux-handler" value="import org.reactivestreams.Publisher;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.stereotype.Component;&#10;import org.springframework.web.reactive.function.server.ServerRequest;&#10;import org.springframework.web.reactive.function.server.ServerResponse;&#10;import reactor.core.publisher.Flux;&#10;import reactor.core.publisher.Mono;&#10;&#10;import java.net.URI;&#10;&#10;@org.springframework.stereotype.Component&#10;class ProfileHandler {&#10;    private final com.example.demo.ProfileService profileService;&#10;&#10;    ProfileHandler(com.example.demo.ProfileService profileService) {&#10;        this.profileService = profileService;&#10;    }&#10;    &#10;    reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; getById(org.springframework.web.reactive.function.server.ServerRequest r) {&#10;        return defaultReadResponse(this.profileService.get(id(r)));&#10;    }&#10;&#10;    reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; all(org.springframework.web.reactive.function.server.ServerRequest r) {&#10;        return defaultReadResponse(this.profileService.all());&#10;    }&#10;&#10;    reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; deleteById(org.springframework.web.reactive.function.server.ServerRequest r) {&#10;        return defaultReadResponse(this.profileService.delete(id(r)));&#10;    }&#10;&#10;    reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; updateById(org.springframework.web.reactive.function.server.ServerRequest r) {&#10;        reactor.core.publisher.Flux&lt;com.example.demo.Profile&gt; id = r.bodyToFlux(com.example.demo.Profile.class)&#10;                .flatMap(p -&gt; this.profileService.update(id(r), p.getEmail()));&#10;        return defaultReadResponse(id);&#10;    }&#10;&#10;    reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; create(org.springframework.web.reactive.function.server.ServerRequest request) {&#10;        reactor.core.publisher.Flux&lt;com.example.demo.Profile&gt; flux = request&#10;                .bodyToFlux(com.example.demo.Profile.class)&#10;                .flatMap(toWrite -&gt; this.profileService.create(toWrite.getEmail()));&#10;        return defaultWriteResponse(flux);&#10;    }&#10;    &#10;    private static reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; defaultWriteResponse(org.reactivestreams.Publisher&lt;com.example.demo.Profile&gt; profiles) {&#10;        return reactor.core.publisher.Mono&#10;                .from(profiles)&#10;                .flatMap(p -&gt; org.springframework.web.reactive.function.server.ServerResponse&#10;                        .created(java.net.URI.create(&quot;/profiles/&quot; + p.getId()))&#10;                        .contentType(org.springframework.http.MediaType.APPLICATION_JSON_UTF8)&#10;                        .build()&#10;                );&#10;    }&#10;    &#10;    private static reactor.core.publisher.Mono&lt;org.springframework.web.reactive.function.server.ServerResponse&gt; defaultReadResponse(org.reactivestreams.Publisher&lt;com.example.demo.Profile&gt; profiles) {&#10;        return org.springframework.web.reactive.function.server.ServerResponse&#10;                .ok()&#10;                .contentType(org.springframework.http.MediaType.APPLICATION_JSON_UTF8)&#10;                .body(profiles, com.example.demo.Profile.class);&#10;    }&#10;&#10;    private static java.lang.String id(org.springframework.web.reactive.function.server.ServerRequest r) {&#10;        return r.pathVariable(&quot;id&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="react-proxy" value="const proxy = require(&quot;http-proxy-middleware&quot;)&#10;&#10;module.exports = app =&gt; {&#10;  app.use(proxy(&quot;/ws&quot;, {target: &quot;http://localhost:8080&quot;, ws: true}))&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="webflux-cors" value="@org.springframework.context.annotation.Bean&#10;    org.springframework.web.cors.reactive.CorsConfigurationSource corsConfigurationSource() {&#10;        org.springframework.web.cors.CorsConfiguration configuration = new org.springframework.web.cors.CorsConfiguration();&#10;        configuration.setAllowCredentials(true);&#10;        configuration.setAllowedOrigins(java.util.Collections.singletonList(&quot;http://localhost:3000&quot;));&#10;        configuration.setAllowedMethods(java.util.Collections.singletonList(&quot;GET&quot;));&#10;        configuration.setAllowedHeaders(java.util.Collections.singletonList(&quot;*&quot;));&#10;        org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource source = new org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource();&#10;        source.registerCorsConfiguration(&quot;/**&quot;, configuration);&#10;        return source;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="spring-repos" value="&lt;pluginRepositories&gt;&#10;        &lt;pluginRepository&gt;&#10;            &lt;id&gt;spring-snapshots&lt;/id&gt;&#10;            &lt;name&gt;Spring Snapshots&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/libs-snapshot&lt;/url&gt;&#10;            &lt;snapshots&gt;&#10;                &lt;enabled&gt;true&lt;/enabled&gt;&#10;            &lt;/snapshots&gt;&#10;        &lt;/pluginRepository&gt;&#10;    &lt;/pluginRepositories&gt;&#10;    &lt;repositories&gt;&#10;        &lt;repository&gt;&#10;            &lt;id&gt;spring-snapshots&lt;/id&gt;&#10;            &lt;name&gt;Spring Snapshot&lt;/name&gt;&#10;            &lt;url&gt;https://repo.spring.io/libs-snapshot&lt;/url&gt;&#10;        &lt;/repository&gt;&#10;    &lt;/repositories&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="boot-https" value=".requiresChannel()&#10;            .requestMatchers(r -&gt; r.getHeader(&quot;X-Forwarded-Proto&quot;) != null)&#10;            .requiresSecure();" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="boot-cool" value="@org.springframework.web.bind.annotation.RestController&#10;class CoolCarController {&#10;    private com.example.demo.CarRepository repository;&#10;&#10;    public CoolCarController(com.example.demo.CarRepository repository) {&#10;        this.repository = repository;&#10;    }&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/cool-cars&quot;)&#10;    public java.util.Collection&lt;com.example.demo.Car&gt; coolCars() {&#10;        return repository.findAll().stream()&#10;                .filter(this::isCool)&#10;                .collect(java.util.stream.Collectors.toList());&#10;    }&#10;&#10;    private boolean isCool(com.example.demo.Car car) {&#10;        return !car.getName().equals(&quot;AMC Gremlin&quot;) &amp;&amp;&#10;                !car.getName().equals(&quot;Triumph Stag&quot;) &amp;&amp;&#10;                !car.getName().equals(&quot;Ford Pinto&quot;) &amp;&amp;&#10;                !car.getName().equals(&quot;Yugo GV&quot;);&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="boot-data" value="@org.springframework.context.annotation.Bean&#10;    org.springframework.boot.ApplicationRunner init(com.example.demo.CarRepository repository) {&#10;        return args -&gt; {&#10;            java.util.stream.Stream.of(&quot;Ferrari&quot;, &quot;Jaguar&quot;, &quot;Porsche&quot;, &quot;Lamborghini&quot;, &quot;Bugatti&quot;,&#10;                    &quot;AMC Gremlin&quot;, &quot;Triumph Stag&quot;, &quot;Ford Pinto&quot;, &quot;Yugo GV&quot;).forEach(name -&gt; {&#10;                repository.save(new com.example.demo.Car(name));&#10;            });&#10;            repository.findAll().forEach(java.lang.System.out::println);&#10;        };&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="mat-add" value="&lt;button mat-fab color=&quot;primary&quot; [routerLink]=&quot;['/car-add']&quot;&gt;Add&lt;/button&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-card" value="&lt;mat-card&gt;&#10;  &lt;mat-card-title&gt;List&lt;/mat-card-title&gt;&#10;  &lt;mat-card-content&gt;&#10;    &lt;mat-list&gt;&#10;      &lt;mat-list-item *ngFor=&quot;let $name$ of $name$s&quot;&gt;&#10;        &lt;img mat-list-avatar src=&quot;{{$name$.giphyUrl}}&quot; alt=&quot;{{$name$.name}}&quot;&gt;&#10;        &lt;h3 mat-line&gt;{{$name$.name}}&lt;/h3&gt;&#10;      &lt;/mat-list-item&gt;&#10;    &lt;/mat-list&gt;&#10;  &lt;/mat-card-content&gt;&#10;&lt;/mat-card&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-edit" value="&lt;a mat-button [routerLink]=&quot;['/car-edit', car.id]&quot;&gt;{{car.name}}&lt;/a&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-form" value="&lt;mat-card&gt;&#10;  &lt;form #$name$Form=&quot;ngForm&quot; (ngSubmit)=&quot;save($name$Form.value)&quot;&gt;&#10;    &lt;mat-card-title&gt;{{$name$.name ? 'Edit' : 'Add'}} $capName$&lt;/mat-card-title&gt;&#10;    &lt;mat-card-content&gt;&#10;      &lt;input type=&quot;hidden&quot; name=&quot;href&quot; [(ngModel)]=&quot;$name$.href&quot;&gt;&#10;      &lt;mat-form-field&gt;&#10;        &lt;input matInput placeholder=&quot;Car Name&quot; [(ngModel)]=&quot;$name$.name&quot;&#10;               required name=&quot;name&quot; #name&gt;&#10;      &lt;/mat-form-field&gt;&#10;    &lt;/mat-card-content&gt;&#10;    &lt;mat-card-actions&gt;&#10;      &lt;button mat-raised-button color=&quot;primary&quot; type=&quot;submit&quot;&#10;              [disabled]=&quot;!$name$Form.form.valid&quot;&gt;Save&lt;/button&gt;&#10;      &lt;button mat-raised-button color=&quot;secondary&quot; (click)=&quot;remove($name$.href)&quot;&#10;              *ngIf=&quot;$name$.href&quot; type=&quot;button&quot;&gt;Delete&lt;/button&gt;&#10;      &lt;a mat-button routerLink=&quot;/$name$-list&quot;&gt;Cancel&lt;/a&gt;&#10;    &lt;/mat-card-actions&gt;&#10;    &lt;mat-card-footer&gt;&#10;      &lt;div class=&quot;giphy&quot; style=&quot;margin: 10px&quot;&gt;&#10;        &lt;img src=&quot;{{$name$.giphyUrl}}&quot; alt=&quot;{{$name$.name}}&quot;&gt;&#10;      &lt;/div&gt;&#10;    &lt;/mat-card-footer&gt;&#10;  &lt;/form&gt;&#10;&lt;/mat-card&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="capName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-home" value="&lt;mat-card&gt;&#10;  &lt;mat-card-content&gt;&#10;    &lt;button mat-raised-button color=&quot;accent&quot; *ngIf=&quot;!isAuthenticated&quot;&#10;            (click)=&quot;oktaAuth.loginRedirect()&quot;&gt;Login&#10;    &lt;/button&gt;&#10;    &lt;button mat-raised-button color=&quot;accent&quot; *ngIf=&quot;isAuthenticated&quot;&#10;            [routerLink]=&quot;['/$name$-list']&quot;&gt;$upperName$ List&#10;    &lt;/button&gt;&#10;  &lt;/mat-card-content&gt;&#10;&lt;/mat-card&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="upperName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-imports" value="BrowserAnimationsModule,&#10;    MatButtonModule,&#10;    MatCardModule,&#10;    MatInputModule,&#10;    MatListModule,&#10;    MatToolbarModule" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="mat-login" value="&lt;mat-toolbar color=&quot;primary&quot;&gt;&#10;  &lt;span&gt;Welcome to {{title}}!&lt;/span&gt;&#10;  &lt;span class=&quot;toolbar-spacer&quot;&gt;&lt;/span&gt;&#10;  &lt;button mat-raised-button color=&quot;accent&quot; *ngIf=&quot;isAuthenticated&quot;&#10;          (click)=&quot;oktaAuth.logout()&quot;&gt;Logout&#10;  &lt;/button&gt;&#10;&lt;/mat-toolbar&gt;&#10;&#10;&lt;router-outlet&gt;&lt;/router-outlet&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="mat-style" value="@import &quot;~@angular/material/prebuilt-themes/indigo-pink.css&quot;;&#10;@import 'https://fonts.googleapis.com/icon?family=Material+Icons';&#10;&#10;body {&#10;  margin: 0;&#10;  font-family: Roboto, sans-serif;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="mat-toolbar" value="&lt;mat-toolbar color=&quot;primary&quot;&gt;&#10;  &lt;span&gt;Welcome to {{title}}!&lt;/span&gt;&#10;&lt;/mat-toolbar&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="ng-callback" value="{&#10;    path: 'implicit/callback',&#10;    component: OktaCallbackComponent&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="ng-callback-import" value="import { OktaCallbackComponent } from '@okta/okta-angular';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ng-oauth" value="OktaAuthModule.initAuth(config)" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="ng-oauth-import" value="import { OktaAuthModule } from '@okta/okta-angular';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ng-service-api" value="public API = '//localhost:8080';&#10;  public CAR_API = this.API + '/cars';" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="ng-service-cud" value="  get(id: string) {&#10;    return this.http.get(this.CAR_API + '/' + id);&#10;  }&#10;&#10;  save(car: any): Observable&lt;any&gt; {&#10;    let result: Observable&lt;any&gt;;&#10;    if (car.href) {&#10;      result = this.http.put(car.href, car);&#10;    } else {&#10;      result = this.http.post(this.CAR_API, car);&#10;    }&#10;    return result;&#10;  }&#10;&#10;  remove(href: string) {&#10;    return this.http.delete(href);&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="ss-oauth" value="&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;com.okta.spring&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;okta-spring-boot-starter&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;0.6.1&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;&#10;&#9;&#9;&lt;dependency&gt;&#10;&#9;&#9;&#9;&lt;groupId&gt;org.springframework.security.oauth.boot&lt;/groupId&gt;&#10;&#9;&#9;&#9;&lt;artifactId&gt;spring-security-oauth2-autoconfigure&lt;/artifactId&gt;&#10;&#9;&#9;&#9;&lt;version&gt;2.1.0.RELEASE&lt;/version&gt;&#10;&#9;&#9;&lt;/dependency&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="ss-okta" value="okta:&#10;  oauth2:&#10;    client-id: 0oaravs6xbgqV9y4S356&#10;    issuer: https://dev-133320.okta.com/oauth2/default" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ACTION_SCRIPT" value="false" />
      <option name="ASPECTJ" value="false" />
      <option name="AsciiDoc" value="false" />
      <option name="Bash" value="false" />
      <option name="CSS" value="false" />
      <option name="CUCUMBER_FEATURE_FILE" value="false" />
      <option name="CoffeeScript" value="false" />
      <option name="ColdFusion" value="false" />
      <option name="Django" value="false" />
      <option name="ECMAScript6" value="false" />
      <option name="GAUGE" value="false" />
      <option name="GROOVY" value="false" />
      <option name="GSP" value="false" />
      <option name="HAML" value="false" />
      <option name="HTML" value="false" />
      <option name="JAVA_CODE" value="false" />
      <option name="JAVA_SCRIPT" value="false" />
      <option name="JSON" value="false" />
      <option name="JSP" value="false" />
      <option name="KOTLIN" value="false" />
      <option name="MAVEN" value="false" />
      <option name="MXML" value="false" />
      <option name="OGNL" value="false" />
      <option name="OTHER" value="true" />
      <option name="Python" value="false" />
      <option name="REQUEST" value="false" />
      <option name="RHTML" value="false" />
      <option name="RUBY" value="false" />
      <option name="SQL" value="false" />
      <option name="TypeScript" value="false" />
      <option name="Vue" value="false" />
      <option name="XML" value="false" />
    </context>
  </template>
  <template name="toolbar-spacer" value=".toolbar-spacer {&#10;  flex: 1 1 auto;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="CSS_RULESET_LIST" value="true" />
    </context>
  </template>
  <template name="ng-provider" value="{provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="ng-interceptor" value="import { Injectable } from '@angular/core';&#10;import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';&#10;import { Observable, from } from 'rxjs';&#10;import { OktaAuthService } from '@okta/okta-angular';&#10;&#10;@Injectable()&#10;export class AuthInterceptor implements HttpInterceptor {&#10;&#10;  constructor(private oktaAuth: OktaAuthService) {&#10;  }&#10;&#10;  intercept(request: HttpRequest&lt;any&gt;, next: HttpHandler): Observable&lt;HttpEvent&lt;any&gt;&gt; {&#10;    return from(this.handleAccess(request, next));&#10;  }&#10;&#10;  private async handleAccess(request: HttpRequest&lt;any&gt;, next: HttpHandler): Promise&lt;HttpEvent&lt;any&gt;&gt; {&#10;    // Only add to known domains since we don't want to send our tokens to just anyone.&#10;    // Also, Giphy's API fails when the request includes a token.&#10;    if (request.urlWithParams.indexOf('localhost') &gt; -1) {&#10;      const accessToken = await this.oktaAuth.getAccessToken();&#10;      request = request.clone({&#10;        setHeaders: {&#10;          Authorization: 'Bearer ' + accessToken&#10;        }&#10;      });&#10;    }&#10;    return next.handle(request).toPromise();&#10;  }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="ng-auth" value="isAuthenticated: boolean;&#10;&#10;  constructor(public oktaAuth: OktaAuthService) {&#10;  }&#10;&#10;  async ngOnInit() {&#10;    this.isAuthenticated = await this.oktaAuth.isAuthenticated();&#10;    // Subscribe to authentication state changes&#10;    this.oktaAuth.$authenticationState.subscribe(&#10;      (isAuthenticated: boolean)  =&gt; this.isAuthenticated = isAuthenticated&#10;    );&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
    </context>
  </template>
  <template name="vue-auth" value="&lt;template&gt;&#10;  &lt;div id=&quot;app&quot;&gt;&#10;    &lt;div id=&quot;nav&quot;&gt;&#10;      &lt;router-link to=&quot;/&quot;&gt;Home&lt;/router-link&gt; |&#10;      &lt;router-link to=&quot;/about&quot;&gt;About&lt;/router-link&gt;&#10;      &lt;template v-if=&quot;authenticated&quot;&gt; |&#10;        &lt;router-link to=&quot;/beer-list&quot;&gt;Good Beers&lt;/router-link&gt;&#10;      &lt;/template&gt;&#10;    &lt;/div&gt;&#10;    &lt;button v-if=&quot;authenticated&quot; v-on:click=&quot;logout&quot;&gt;Logout&lt;/button&gt;&#10;    &lt;button v-else v-on:click=&quot;$auth.loginRedirect()&quot;&gt;Login&lt;/button&gt;&#10;    &lt;router-view/&gt;&#10;  &lt;/div&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script lang=&quot;ts&quot;&gt;&#10;import { Component, Vue, Watch } from 'vue-property-decorator';&#10;&#10;@Component&#10;export default class App extends Vue {&#10;  public authenticated: boolean = false;&#10;&#10;  private created() {&#10;    this.isAuthenticated();&#10;  }&#10;&#10;  @Watch('$route')&#10;  private async isAuthenticated() {&#10;    this.authenticated = await this.$auth.isAuthenticated();&#10;  }&#10;&#10;  private async logout() {&#10;    await this.$auth.logout();&#10;    await this.isAuthenticated();&#10;&#10;    // Navigate back to home&#10;    this.$router.push({path: '/'});&#10;  }&#10;}&#10;&lt;/script&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
  <template name="vue-created" value="private async created() {&#10;  const response = await axios.get('/good-beers');&#10;  this.beers = await response.data;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_CLASS" value="true" />
      <option name="TS_CLASS" value="true" />
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
    </context>
  </template>
  <template name="vue-giphy" value="&lt;template&gt;&#10;  &lt;img :src=giphyUrl v-bind:alt=name height=&quot;200&quot;/&gt;&#10;&lt;/template&gt;&#10;&#10;&lt;script lang=&quot;ts&quot;&gt;&#10;import { Component, Prop, Vue } from 'vue-property-decorator';&#10;import axios from 'axios';&#10;&#10;@Component&#10;export default class GiphyImage extends Vue {&#10;  @Prop() private name!: string;&#10;  private giphyUrl: string = '';&#10;&#10;  private async created() {&#10;    const giphyApi = '//api.giphy.com/v1/gifs/search?api_key=dc6zaTOxFJmzC&amp;limit=1&amp;q=';&#10;&#10;    const response = await axios.get(giphyApi + this.name);&#10;    const data = await response.data.data;&#10;    if (data.length) {&#10;      this.giphyUrl = data[0].images.original.url;&#10;    } else {&#10;      this.giphyUrl = '//media.giphy.com/media/YaOxRsmrv9IeA/giphy.gif';&#10;    }&#10;  }&#10;}&#10;&lt;/script&gt;&#10;&#10;&lt;!-- The &quot;scoped&quot; attribute limits CSS to this component only --&gt;&#10;&lt;style scoped&gt;&#10;img {&#10;  margin: 10px 0 0;&#10;}&#10;&lt;/style&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
  <template name="vue-grid" value="&lt;style scoped&gt;&#10;.grid {&#10;  display: grid;&#10;  grid-template-columns: repeat(3, 1fr);&#10;  grid-gap: 10px;&#10;  grid-auto-rows: minmax(100px, auto);&#10;}&#10;&lt;/style&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="VUE_TOP_LEVEL" value="true" />
    </context>
  </template>
  <template name="vue-list" value="&lt;div class=&quot;$name$-list&quot;&gt;&#10;    &lt;h1&gt;List&lt;/h1&gt;&#10;      &lt;div v-for=&quot;$name$ in $name$s&quot;&gt;&#10;        {{ $name$.name }}&#10;      &lt;/div&gt;&#10;  &lt;/div&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="VUE_TEMPLATE" value="true" />
    </context>
  </template>
  <template name="vue-proxy" value="module.exports = {&#10;  devServer: {&#10;    port: 8081,&#10;    proxy: {&#10;      &quot;/good-beers&quot;: {&#10;        target: &quot;http://localhost:8080&quot;,&#10;        secure: false&#10;      }&#10;    }&#10;  }&#10;};" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ES6_STATEMENT" value="true" />
      <option name="JS_STATEMENT" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="vue-router" value="import Vue from 'vue';&#10;import Router from 'vue-router';&#10;import Home from './views/Home.vue';&#10;import OktaVuePlugin from '@okta/okta-vue';&#10;import BeerList from '@/components/BeerList.vue';&#10;&#10;Vue.use(Router);&#10;Vue.use(OktaVuePlugin, {&#10;  issuer: 'https://dev-737523.oktapreview.com/oauth2/default',&#10;  client_id: '0oahxl84v91nfR0i10h7',&#10;  redirect_uri: window.location.origin + '/implicit/callback',&#10;  scope: 'openid profile email',&#10;});&#10;&#10;const router = new Router({&#10;  mode: 'history',&#10;  base: process.env.BASE_URL,&#10;  routes: [&#10;    {&#10;      path: '/',&#10;      name: 'home',&#10;      component: Home,&#10;    },&#10;    {&#10;      path: '/about',&#10;      name: 'about',&#10;      // route level code-splitting&#10;      // this generates a separate chunk (about.[hash].js) for this route&#10;      // which is lazy-loaded when the route is visited.&#10;      component: () =&gt; import(/* webpackChunkName: &quot;about&quot; */ './views/About.vue'),&#10;    },&#10;    {&#10;      path: '/beer-list',&#10;      name: 'beer-list',&#10;      component: BeerList,&#10;      meta: {&#10;        requiresAuth: true,&#10;      },&#10;    },&#10;    { path: '/implicit/callback', component: OktaVuePlugin.handleCallback() },&#10;  ],&#10;});&#10;&#10;router.beforeEach(Vue.prototype.$auth.authRedirectGuard());&#10;&#10;export default router;&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
      <option name="VUE_SCRIPT" value="true" />
    </context>
  </template>
  <template name="vue-token" value="{&#10;        headers: {&#10;          Authorization: `Bearer ${await this.$auth.getAccessToken()}`,&#10;        },&#10;      }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
    </context>
  </template>
  <template name="ng-route" value="{&#10;    path: '',&#10;    component: HomeComponent&#10;  },&#10;  {&#10;    path: '$name$-list',&#10;    component: $capName$ListComponent&#10;  }," description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="capName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="electron-dist" value="&quot;pack&quot;: &quot;npm run compile &amp;&amp; electron-builder --dir&quot;,&#10;    &quot;dist&quot;: &quot;npm run compile &amp;&amp; electron-builder&quot;,&#10;    &quot;postinstall&quot;: &quot;electron-builder install-app-deps&quot;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="electron-build" value="&quot;build&quot;: {&#10;    &quot;appId&quot;: &quot;com.okta.developer.electron&quot;,&#10;    &quot;productName&quot;: &quot;Electron Awesomeness&quot;,&#10;    &quot;mac&quot;: {&#10;      &quot;category&quot;: &quot;public.app-category.developer-tools&quot;&#10;    }&#10;  }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="react-checkboxes" value="&lt;AvGroup check&gt;&#10;                      &lt;AvInput id=&quot;points-exercise&quot; type=&quot;checkbox&quot; className=&quot;form-control&quot;&#10;                               name=&quot;exercise&quot; trueValue={1} falseValue={0} /&gt;&#10;                      &lt;Label check id=&quot;exerciseLabel&quot; for=&quot;exercise&quot;&gt;&#10;                          &lt;Translate contentKey=&quot;healthPointsApp.points.exercise&quot;&gt;Exercise&lt;/Translate&gt;&#10;                      &lt;/Label&gt;&#10;                  &lt;/AvGroup&gt;&#10;                  &lt;AvGroup check&gt;&#10;                      &lt;AvInput id=&quot;points-meals&quot; type=&quot;checkbox&quot; className=&quot;form-control&quot;&#10;                               name=&quot;meals&quot; trueValue={1} falseValue={0} /&gt;&#10;                      &lt;Label check id=&quot;mealsLabel&quot; for=&quot;meals&quot;&gt;&#10;                          &lt;Translate contentKey=&quot;healthPointsApp.points.meals&quot;&gt;Meals&lt;/Translate&gt;&#10;                      &lt;/Label&gt;&#10;                  &lt;/AvGroup&gt;&#10;                  &lt;AvGroup check&gt;&#10;                      &lt;AvInput id=&quot;points-alcohol&quot; type=&quot;checkbox&quot; className=&quot;form-control&quot;&#10;                               name=&quot;alcohol&quot; trueValue={1} falseValue={0} /&gt;&#10;                      &lt;Label check id=&quot;alcoholLabel&quot; for=&quot;alcohol&quot;&gt;&#10;                          &lt;Translate contentKey=&quot;healthPointsApp.points.alcohol&quot;&gt;Alcohol&lt;/Translate&gt;&#10;                      &lt;/Label&gt;&#10;                  &lt;/AvGroup&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="TS_CLASS" value="false" />
      <option name="TS_EXPRESSION" value="false" />
      <option name="TS_STATEMENT" value="false" />
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="rn-defaultValues" value="formValue: {&#10;          id: null,&#10;          date: new Date(),&#10;          exercise: true,&#10;          meals: true,&#10;          alcohol: true&#10;        }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="ES6_CLASS" value="false" />
      <option name="ES6_EXPRESSION" value="false" />
      <option name="ES6_STATEMENT" value="false" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="rn-entityToForm" value="exercise: (value.exercise === 1),&#10;      meals: (value.meals === 1),&#10;      alcohol: (value.alcohol === 1)," description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="ES6_CLASS" value="false" />
      <option name="ES6_EXPRESSION" value="false" />
      <option name="ES6_STATEMENT" value="false" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="rn-formToEntity" value="exercise: (value.exercise) ? 1 : 0,&#10;      meals: (value.meals) ? 1 : 0,&#10;      alcohol: (value.alcohol) ? 1 : 0," description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="ECMAScript6" value="true" />
      <option name="ES6_CLASS" value="false" />
      <option name="ES6_EXPRESSION" value="false" />
      <option name="ES6_STATEMENT" value="false" />
      <option name="JAVA_SCRIPT" value="true" />
      <option name="JSX_HTML" value="false" />
      <option name="JS_CLASS" value="false" />
      <option name="JS_EXPRESSION" value="false" />
      <option name="JS_STATEMENT" value="false" />
    </context>
  </template>
  <template name="schematics-app-html" value="&lt;div style=&quot;text-align:center&quot;&gt;&#10;  &lt;h1&gt;&#10;    Hello, {{ name }}&#10;  &lt;/h1&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;router-outlet&gt;&lt;/router-outlet&gt;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="HTML_TEXT" value="true" />
    </context>
  </template>
  <template name="schematics-app-ts" value="import { Component } from '@angular/core';&#10;&#10;@Component({&#10;  selector: 'app-root',&#10;  templateUrl: './app.component.html',&#10;  styleUrls: ['./app.component.css']&#10;})&#10;&#10;export class AppComponent {&#10;  name = '&lt;%= name %&gt;';&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="schematics-move" value="const movePath = normalize(_options.path + '/');&#10;    const templateSource = apply(url('./files/src'), [&#10;      template({..._options}),&#10;      move(movePath)&#10;    ]);&#10;    const rule = mergeWith(templateSource, MergeStrategy.Overwrite);&#10;    return rule(tree, _context);" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="schematics-move-fix" value="// fix for https://github.com/angular/angular-cli/issues/11337&#10;      forEach((fileEntry: FileEntry) =&gt; {&#10;        if (tree.exists(fileEntry.path)) {&#10;          tree.overwrite(fileEntry.path, fileEntry.content);&#10;        }&#10;        return fileEntry;&#10;      })," description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
    </context>
  </template>
  <template name="schematics-ng-add" value="&quot;ng-add&quot;: {&#10;      &quot;factory&quot;: &quot;./ng-add/index&quot;,&#10;      &quot;description&quot;: &quot;Add schematic&quot;,&#10;      &quot;schema&quot;: &quot;./my-component/schema.json&quot;&#10;    }" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="schematics-ng-add-index" value="import { chain, Rule, schematic, SchematicContext, Tree, } from '@angular-devkit/schematics';&#10;&#10;export default function (options: any): Rule {&#10;  return (host: Tree, context: SchematicContext) =&gt; {&#10;    return chain([&#10;      schematic('my-component', options)&#10;    ])(host, context);&#10;  };&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="schematics-schema" value="{&#10;  &quot;$schema&quot;: &quot;http://json-schema.org/schema&quot;,&#10;  &quot;id&quot;: &quot;SchematicsMyComponent&quot;,&#10;  &quot;title&quot;: &quot;My Component Schema&quot;,&#10;  &quot;type&quot;: &quot;object&quot;,&#10;  &quot;properties&quot;: {&#10;    &quot;name&quot;: {&#10;      &quot;type&quot;: &quot;string&quot;,&#10;      &quot;description&quot;: &quot;Your Name&quot;,&#10;      &quot;x-prompt&quot;: &quot;What is your name?&quot;&#10;    }&#10;  },&#10;  &quot;required&quot;: [&quot;name&quot;]&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSON" value="true" />
      <option name="JSON_PROPERTY_KEYS" value="false" />
      <option name="JSON_STRING_VALUES" value="false" />
    </context>
  </template>
  <template name="schematics-setup" value="export function setupOptions(host: Tree, options: any): Tree {&#10;  const workspace = getWorkspace(host);&#10;  if (!options.project) {&#10;    options.project = Object.keys(workspace.projects)[0];&#10;  }&#10;  const project = workspace.projects[options.project];&#10;&#10;  options.path = join(normalize(project.root), 'src');&#10;  return host;&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="schematics-test" value="import { SchematicTestRunner, UnitTestTree } from '@angular-devkit/schematics/testing';&#10;import * as path from 'path';&#10;&#10;describe('my-component', () =&gt; {&#10;&#10;  const collectionPath = path.join(__dirname, '../collection.json');&#10;  const schematicRunner = new SchematicTestRunner(&#10;    'schematics',&#10;    path.join(__dirname, './../collection.json'),&#10;  );&#10;&#10;  const workspaceOptions: any = {&#10;    name: 'workspace',&#10;    newProjectRoot: 'projects',&#10;    version: '0.5.0',&#10;  };&#10;&#10;  const appOptions: any = {&#10;    name: 'schematest'&#10;  };&#10;&#10;  const schemaOptions: any = {&#10;    name: 'foo'&#10;  };&#10;&#10;  let appTree: UnitTestTree;&#10;&#10;  beforeEach(() =&gt; {&#10;    appTree = schematicRunner.runExternalSchematic('@schematics/angular', 'workspace', workspaceOptions);&#10;    appTree = schematicRunner.runExternalSchematic('@schematics/angular', 'application', appOptions, appTree);&#10;  });&#10;&#10;  it('works', () =&gt; {&#10;    const runner = new SchematicTestRunner('schematics', collectionPath);&#10;    runner.runSchematicAsync('my-component', schemaOptions, appTree).toPromise().then(tree =&gt; {&#10;      const appComponent = tree.readContent('/projects/schematest/src/app/app.component.ts');&#10;      expect(appComponent).toContain(`name = '${schemaOptions.name}'`);&#10;    });&#10;  });&#10;});" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JS_STATEMENT" value="true" />
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="oauth2-resource-server" value="@org.springframework.context.annotation.Configuration&#10;&#9;static class OktaOAuth2WebSecurityConfigurerAdapter extends org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter {&#10;&#9;&#9;@java.lang.Override&#10;&#9;&#9;protected void configure(org.springframework.security.config.annotation.web.builders.HttpSecurity http) throws java.lang.Exception {&#10;        // @formatter:off&#10;        http&#10;            .authorizeRequests().anyRequest().authenticated()&#10;            .and()&#10;            .oauth2ResourceServer().jwt();&#10;        // @formatter:on&#10;&#9;&#9;}&#10;&#9;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="vue-link" value="&lt;router-link to=&quot;/$name$-list&quot;&gt;Good $upperName$s&lt;/router-link&gt;" description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="upperName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="VUE_TEMPLATE" value="true" />
    </context>
  </template>
  <template name="vue-route" value="{&#10;      path: '/$name$-list',&#10;      name: '$name$-list',&#10;      component: $upperName$List,&#10;      meta: {&#10;        requiresAuth: true,&#10;      },&#10;    }," description="" toReformat="true" toShortenFQNames="true">
    <variable name="name" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="upperName" expression="capitalize(String)" defaultValue="capitalize(name)" alwaysStopAt="true" />
    <context>
      <option name="JS_EXPRESSION" value="true" />
      <option name="TS_EXPRESSION" value="true" />
      <option name="VUE_COMPONENT_DESCRIPTOR" value="true" />
    </context>
  </template>
  <template name="i18n-hello" value="String language = &quot;en&quot;;&#10;        String country = &quot;US&quot;;&#10;&#10;        if (args.length == 2) {&#10;            language = args[0];&#10;            country = args[1];&#10;        }&#10;&#10;        var locale = new Locale(language, country);&#10;        var messages = ResourceBundle.getBundle(&quot;messages&quot;, locale);&#10;&#10;        System.out.print(messages.getString(&quot;hello&quot;) + &quot; &quot;);&#10;        System.out.println(messages.getString(&quot;world&quot;));" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_EXPRESSION" value="true" />
      <option name="JAVA_STATEMENT" value="true" />
    </context>
  </template>
  <template name="i18n-home" value="import org.springframework.stereotype.Controller;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;&#10;@org.springframework.stereotype.Controller&#10;public class HomeController {&#10;&#10;    @org.springframework.web.bind.annotation.GetMapping(&quot;/&quot;)&#10;    java.lang.String home() {&#10;        return &quot;home&quot;;&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="i18n-mvc" value="import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.LocaleResolver;&#10;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&#10;import org.springframework.web.servlet.i18n.CookieLocaleResolver;&#10;import org.springframework.web.servlet.i18n.LocaleChangeInterceptor;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;public class MvcConfigurer implements org.springframework.web.servlet.config.annotation.WebMvcConfigurer {&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.web.servlet.LocaleResolver localeResolver() {&#10;        return new org.springframework.web.servlet.i18n.CookieLocaleResolver();&#10;    }&#10;&#10;    @org.springframework.context.annotation.Bean&#10;    public org.springframework.web.servlet.i18n.LocaleChangeInterceptor localeInterceptor() {&#10;        org.springframework.web.servlet.i18n.LocaleChangeInterceptor localeInterceptor = new org.springframework.web.servlet.i18n.LocaleChangeInterceptor();&#10;        localeInterceptor.setParamName(&quot;lang&quot;);&#10;        return localeInterceptor;&#10;    }&#10;&#10;    @java.lang.Override&#10;    public void addInterceptors(org.springframework.web.servlet.config.annotation.InterceptorRegistry registry) {&#10;        registry.addInterceptor(localeInterceptor());&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="i18n-oidc" value="import org.slf4j.Logger;&#10;import org.slf4j.LoggerFactory;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.security.core.context.SecurityContext;&#10;import org.springframework.security.core.context.SecurityContextHolder;&#10;import org.springframework.security.oauth2.core.oidc.user.OidcUser;&#10;import org.springframework.web.servlet.i18n.CookieLocaleResolver;&#10;&#10;import javax.servlet.http.HttpServletRequest;&#10;import java.util.Locale;&#10;&#10;@org.springframework.context.annotation.Configuration&#10;public class OidcLocaleResolver extends org.springframework.web.servlet.i18n.CookieLocaleResolver {&#10;    private final org.slf4j.Logger logger = org.slf4j.LoggerFactory.getLogger(com.okta.spring.example.OidcLocaleResolver.class);&#10;&#10;    @java.lang.Override&#10;    public java.util.Locale resolveLocale(javax.servlet.http.HttpServletRequest request) {&#10;        org.springframework.security.core.context.SecurityContext securityContext = org.springframework.security.core.context.SecurityContextHolder.getContext();&#10;        if (securityContext.getAuthentication().getPrincipal() instanceof org.springframework.security.oauth2.core.oidc.user.OidcUser) {&#10;            org.springframework.security.oauth2.core.oidc.user.OidcUser user = (org.springframework.security.oauth2.core.oidc.user.OidcUser) securityContext.getAuthentication().getPrincipal();&#10;            logger.info(&quot;Setting locale from OidcUser: {}&quot;, user.getLocale());&#10;            return java.util.Locale.forLanguageTag(user.getLocale());&#10;        } else {&#10;            return request.getLocale();&#10;        }&#10;    }&#10;}" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="ss-resource-config" value="package com.example.demo;&#10;&#10;import com.okta.spring.boot.oauth.Okta;&#10;import org.springframework.security.config.annotation.web.builders.HttpSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;&#10;import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;&#10;&#10;@EnableWebSecurity&#10;public class SecurityConfiguration extends WebSecurityConfigurerAdapter {&#10;&#10;    @Override&#10;    protected void configure(HttpSecurity http) throws Exception {&#10;        // @formatter:off&#10;        http&#10;            .authorizeRequests().anyRequest().authenticated()&#10;            .and()&#10;            .oauth2ResourceServer().jwt();&#10;        // @formatter:on&#10;&#10;        Okta.configureResourceServer401ResponseBody(http);&#10;    }&#10;}&#10;" description="" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
</templateSet>